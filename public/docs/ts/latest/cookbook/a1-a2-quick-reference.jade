include ../../../../_includes/_util-fns

:marked
  There are many syntactical differences between Angular&nbsp;1 and Angular&nbsp;2.
  This chapter provides a quick reference guide to some of the common Angular&nbsp;1
  syntax and its equivalent in Angular&nbsp;2.

.l-main-section
:marked
  ## Template Basics
  Templates are the user-facing part of an Angular application written in HTML.
  The following are some of the key Angular&nbsp;1 template features with the equivalent
  template syntax in Angular&nbsp;2.

- var top="vertical-align:top"
table
  col(width="50%")
  col(width="50%") 
  tr
    th Angular&nbsp;1
    th Angular&nbsp;2
  tr(style=top)
    td
      :marked
        ### Bindings
      code-example.
         &lt;h2>{{vm.title}}&lt;/h2>
      :marked
        In Angular&nbsp;1, the binding is prefixed with the controller alias because we
        had to be specific about the source of the binding.
    td
      :marked
        ### Bindings
      code-example.
         &lt;h2>{{title}}&lt;/h2>
      :marked
        In Angular&nbsp;2, the context of the binding is implied and is always the
        associated component. So it needs no reference variable.
  tr(style=top)
    td
      :marked
        ### Filters
      code-example.
         {{ movie.releaseDate | date }}
      :marked
        To filter output in our templates, we use filters in Angular&nbsp;1.
        In this example, we filter the releaseDate to format it as a date.
    td
      :marked
        ### Pipes
      code-example.
        {{ movie.releaseDate | date }}      
      :marked
        In Angular&nbsp;2, we use pipes to filter output. Many (but not all) of the built-in filters from Angular&nbsp;1 are
        built-in pipes in Angular&nbsp;2. See the heading "Pipes" below for more information.
  tr(style=top)
    td
      :marked
        ### Local variables
      code-example.
        &lt;tr ng-repeat='movie in vm.movies'>&lt;/tr> 
      :marked
        Here, `movie` is a user-defined local variable.
    td
      :marked
        ### Local variables
      code-example
        &lt;tr *ng-for='#movie of vm.movies'>&lt;/tr>
      :marked
        In Angular&nbsp;2, we have true local variables that are explicitly defined using the hash (#) symbol.


:marked
  ## Template Directives
  Angular&nbsp;1 provided many built-in directives. 
  Many of them are replaced or are no longer needed in Angular&nbsp;2. 
  The following are some of the key Angular&nbsp;1 directives and the equivalent feature in Angular&nbsp;2.

table
  col(width="50%")
  col(width="50%") 
  tr
    th Angular&nbsp;1
    th Angular&nbsp;2
  tr(style=top)
    td
      :marked
        ### ng-app
      code-example.
        &lt;body ng-app='movieHunter'>      
      :marked
        The ng-app directive bootstrapped Angular&nbsp;1 and gave it the name of the main application module.
    td
      :marked
        ### Bootstrapping
      code-example(format="").
        import {bootstrap} from 'angular2/platform/browser'
        import {AppComponent} from './app.component'
        
        bootstrap(AppComponent);      
      :marked
        In Angular&nbsp;2, the bootstrapping is handled in code instead of in the template.
        By convention, such code is in a file named main.ts.
  tr(style=top)
    td
      :marked
        ### ng-click
      code-example(format="").
        &lt;button type='button' 
                class='btn btn-info'
                ng-click='vm.toggleImage()'>
          Show Poster
        &lt;/button>          
      :marked
        In Angular&nbsp;1, the ng-click directive allows us to specify custom behavior when an element is clicked.
        When this button is clicked, the `toggleImage()` method in the controller referenced by the vm controller as alias is executed.
    td
      :marked
        ### Event binding    
      code-example(format="").
        &lt;button type='button' 
                class='btn btn-info' 
                (click)='toggleImage()'>
            Show Poster
        &lt;/button>          
      :marked
        The Angular&nbsp;1 event-based directives do not exist in Angular&nbsp;2. 
        Rather, we use event bindings by defining the name of the event within parenthesis. 
        When this button is clicked, the `toggleImage()` method in the associated component is executed.
        
        NOTE: To follow current Angular practices, we should prefix the method with “on”. So in this case: `onToggleImage()`.
