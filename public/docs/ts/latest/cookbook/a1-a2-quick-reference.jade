include ../../../../_includes/_util-fns

:marked
  There are many syntactical differences between Angular&nbsp;1 and Angular&nbsp;2.
  This chapter provides a quick reference guide to some of the common Angular&nbsp;1
  syntax and its equivalent in Angular&nbsp;2.

.l-main-section
:marked
  ## Template Basics
  Templates are the user-facing part of an Angular application written in HTML.
  The following are some of the key Angular&nbsp;1 template features with the equivalent
  template syntax in Angular&nbsp;2.

- var top="vertical-align:top"
table
  col(width="50%")
  col(width="50%") 
  tr
    th Angular&nbsp;1
    th Angular&nbsp;2
  tr(style=top)
    td
      :marked
        ### Bindings
      code-example.
         &lt;h2>{{vm.title}}&lt;/h2>
      :marked
        In Angular&nbsp;1, the binding is prefixed with the controller alias because we
        had to be specific about the source of the binding.
    td
      :marked
        ### Bindings
      code-example.
         &lt;h2>{{title}}&lt;/h2>
      :marked
        In Angular&nbsp;2, the context of the binding is implied and is always the
        associated component. So it needs no reference variable.
  tr(style=top)
    td
      :marked
        ### Filters
      code-example.
         {{ movie.releaseDate | date }}
      :marked
        To filter output in our templates, we use filters in Angular&nbsp;1.
        In this example, we filter the releaseDate to format it as a date.
    td
      :marked
        ### Pipes
      code-example.
        {{ movie.releaseDate | date }}      
      :marked
        In Angular&nbsp;2, we use pipes to filter output. Many (but not all) of the built-in filters from Angular&nbsp;1 are
        built-in pipes in Angular&nbsp;2. See the heading "Pipes" below for more information.
  tr(style=top)
    td
      :marked
        ### Local variables
      code-example.
        &lt;tr ng-repeat='movie in vm.movies'>&lt;/tr> 
      :marked
        Here, `movie` is a user-defined local variable.
    td
      :marked
        ### Local variables
      code-example
        &lt;tr *ng-for='#movie of vm.movies'>&lt;/tr>
      :marked
        In Angular&nbsp;2, we have true local variables that are explicitly defined using the hash (#) symbol.


:marked
  ## Template Directives
  Angular&nbsp;1 provided many built-in directives. 
  Many of them are replaced or are no longer needed in Angular&nbsp;2. 
  The following are some of the key Angular&nbsp;1 directives and the equivalent feature in Angular&nbsp;2.

table
  col(width="50%")
  col(width="50%") 
  tr
    th Angular&nbsp;1
    th Angular&nbsp;2
  tr(style=top)
    td
      :marked
        ### ng-app
      code-example.
        &lt;body ng-app='movieHunter'>      
      :marked
        The `ng-app` directive bootstrapped Angular&nbsp;1 and gave it the name of the main application module.
    td
      :marked
        ### Bootstrapping
      code-example(format="").
        import {bootstrap} from 'angular2/platform/browser'
        import {AppComponent} from './app.component'
        
        bootstrap(AppComponent);      
      :marked
        In Angular&nbsp;2, the bootstrapping is handled in code instead of in the template.
        By convention, such code is in a file named main.ts.
  tr(style=top)
    td
      :marked
        ### ng-click
      code-example(format="").
        &lt;button type='button' 
                ng-click='vm.toggleImage()'>
          Show Poster
        &lt;/button>          
      :marked
        In Angular&nbsp;1, the `ng-click` directive allows us to specify custom behavior when an element is clicked.
        When this button is clicked, the `toggleImage()` method in the controller referenced by the vm controller as alias is executed.
    td
      :marked
        ### Event binding
      code-example(format="").
        &lt;button type='button' 
                (click)='toggleImage()'>
            Show Poster
        &lt;/button>          
      :marked
        The Angular&nbsp;1 event-based directives do not exist in Angular&nbsp;2. 
        Rather, we use event bindings by defining the name of the event within parenthesis. 
        When this button is clicked, the `toggleImage()` method in the associated component is executed.
        
        NOTE: To follow current Angular practices, we should prefix the method with "on". So in this case: `onToggleImage()`.
  tr(style=top)
    td
      :marked
        ### ng-controller
      code-example(format="").
        &lt;div ng-controller='MovieListCtrl as vm'>
      :marked
        In Angular&nbsp;1, the `ng-controller` directive attaches a controller to the view. 
        Using the `ng-controller` (or defining the controller as part of the routing) tied the
        view to the controller code associated with that view. 
    td
      :marked
        ### Component decoration
      code-example(format="").
        @Component({
          selector: 'mh-movie-list',
          templateUrl: 'app/movies/movieListView.html'
        })
      :marked
        In Angular&nbsp;2, the template no longer specifies its associated controller. 
        Rather, the component specifies its associated template as part of the component class decorator.
        This allows for building reusable components that include their own user interface.
  tr(style=top)
    td
      :marked
        ### ng-hide
        In Angular&nbsp;1, the `ng-hide` directive shows or hides the associated HTML element based on
        an expression. See `ng-show` for more information.
    td
      :marked
        ### Property binding to the hidden attribute
        Angular&nbsp;2, uses property binding instead of a built-in directive to hide and show HTML elements.
        See `ng-show` for more information.
  tr(style=top)
    td
      :marked
        ### ng-if
      code-example(format="").
        &ltdiv ng-if='listFilter'>Movies filtered by: {{listFilter}}</div>
      :marked
        In Angular&nbsp;1, the `ng-if` directive removes or recreates a portion of the DOM
        based on an expression. If the expression is false, the element is removed from the DOM.
    td
      :marked
        ### *ngIf
      code-example(format="").
        &ltdiv *ngIf='listFilter'>Movies filtered by: {{listFilter.value}}</div>
      :marked
        The `*ngIf` directive in Angular&nbsp;2 works the same as the `ng-if` directive in Angular&npsp;1, 
        it removes or recreates a portion of the DOM based on an expression. 
        Notice that the syntax is slightly different. The (*) makes it clear that the `ngIf` is a structural directive,
        meaning that it modifies the DOM.
  tr(style=top)
    td
      :marked
        ### ng-repeat
      code-example(format="").
        &lttr ng-repeat="movie in vm.movies">
      :marked
        In Angular&nbsp;1, the `ng-repeat` directive repeats the associated DOM element
        for each item from the specified collection.
    td
      :marked
        ### *ngFor
      code-example(format="").
        &lttr *ngFor="#movie of movies">
      :marked
        The `*ngFor` directive in Angular&nbsp;2 works similar to the `ng-repeat` directive in Angular&npsp;1, 
        it repeats the associated DOM element for each item from the specified collection. 
        Notice that the syntax is slightly different. The (*) makes it clear that the `ngFor` is a structural directive,
        meaning that it modifies the DOM. The (#) identifies 'movie' as a local variable. 
        And the preposition was changed from "in" to "of".
  tr(style=top)
    td
      :marked
        ### ng-show
      code-example(format="").
        &ltdiv ng-show='listFilter'>Movies filtered by: {{listFilter}}</div>
      :marked
        In Angular&nbsp;1, the `ng-show` directive shows or hides the associated HTML element based on
        an expression.
    td
      :marked
        ### Property binding to the hidden attribute
      code-example(format="").
        &ltdiv [hidden]='!listFilter.value'>Movies filtered by: {{listFilter.value}}</div>
      :marked
        Angular&nbsp;2, uses property binding instead of a built-in directive to hide and show HTML elements.
        We define property binding by placing square brackets around the property name. For hiding and showing
        elements, we bind to the HTML `hidden` attribute.
  tr(style=top)
    td
      :marked
        ### ng-src
      code-example(format="").
        &ltimg ng-src='{{movie.imageurl}}'
               title='{{movie.title}}'>
      :marked
        The `ng-src` directive allowed Angular&nbsp;1 to preprocess the 'src' attribute so it
        could replace the binding expression with the appropriate URL before the browser
        went to fetch from that URL.
    td
      :marked
        ### Property binding to the hidden attribute
      code-example(format="").
        &ltimg [src]='movie.imageurl'
               [title]='movie.title'>
      :marked
        Angular&nbsp;2, uses property binding instead of a built-in directive for the same purpose.
        We define property binding by placing square brackets around the property name. For specifying
        the image source, we bind to the HTML `src` attribute.
:marked
  ## Filters / Pipes
  Angular&nbsp;2 pipes provide formatting for data in our template, similar to Angular&nbsp;1 filters.
  Many of the built-in filters in Angular&nbsp;1 have corresponding pipes in Angular&nbsp;2.

table
  col(width="50%")
  col(width="50%") 
  tr
    th Angular&nbsp;1
    th Angular&nbsp;2
  tr(style=top)
    td
      :marked
        ### currency
      code-example.
        {{ movie.price | currency }}
      :marked
        Formats a number as a currency.
    td
      :marked
        ### currency
      code-example(format="").
        {{ movie.price | currency }}
      :marked
        The Angular&nbsp;2 `currency` pipe has comparable functionality to the `currency` filter.
  tr(style=top)
    td
      :marked
        ### date
      code-example.
        {{ movie.releaseDate  | date }}
      :marked
        Formats a date to a string based on the requested format.
    td
      :marked
        ### date
      code-example(format="").
        {{ movie.releaseDate  | date }}
      :marked
        The Angular&nbsp;2 `date` pipe has comparable functionality to the `date` filter.
        However the Angular&nbsp;2 `date` pipe does not process string dates such as
        '2001-12-19T00:00:00', as might be found in a JSON file. 
        As a work around, create a convertToDate or similar function:
      :marked
      code-example(format="").
        {{ convertToDate(movie.releaseDate) | date}}
      :marked
        And in the associated component:
      :marked
      code-example(format="").
        convertToDate(dateString): Date {
          return new Date(dateString);
         }
  tr(style=top)
    td
      :marked
        ### filter
      code-example.
        &lttr ng-repeat='movie in movieList | filter: {title:listFilter}'>
      :marked
        Selects a subset of items from the defined collection based on the filter criteria.
    td
      :marked
        ### None
      :marked
        There is no comparable filter in Angular&nbsp;2.
        Filtering can be coded in the component. 
        If the filtering code is expected to be reused in several templates, consider building a custom pipe.
  tr(style=top)
    td
      :marked
        ### json
      code-example.
        &ltpre>{{movie | json}}</pre>
      :marked
        Converts a JavaScript object into a JSON string. This is useful for debugging.
    td
      :marked
        ### json
      code-example.
        &ltpre>{{movie | json}}</pre>
      :marked
        The Angular&nbsp;2 `json` pipe has comparable functionality to the `json` filter.
  tr(style=top)
    td
      :marked
        ### limitTo
      code-example.
        &lttr ng-repeat='movie in movieList | limitTo: 10'>
      :marked
        Selects the defined number of items from the collection.
    td
      :marked
        ### None
        There is no comparable filter in Angular&nbsp;2.
        Limiting the results can be coded in the component. 
        If the limiting code is expected to be reused in several templates, consider building a custom pipe.
  tr(style=top)
    td
      :marked
        ### lowercase
      code-example.
        {{ movie.mpaa | lowercase }}
      :marked
        Converts the string to lowercase.
    td
      :marked
        ### lowercase
      code-example.
        {{ movie.mpaa | lowercase }}
      :marked
        The Angular&nbsp;2 `lowercase` pipe has comparable functionality to the `lowercase` filter.
  tr(style=top)
    td
      :marked
        ### number
      code-example.
        {{ movie.starRating  | number }}
      :marked
        Formats a number as text.
    td
      :marked
        ### number
      code-example.
        {{ movie.starRating | number }}
        {{ movie.starRating | number:'1.1-2' }}
      :marked
        The Angular&nbsp;2 `number` pipe has comparable functionality to the `number` filter.
        However, Angular&nbsp;2 provides more functionality when defining 
        the decimal places as shown in the second example above. The pipe argument is defined as follows:
        * The first number represents the minimum number of integer digits. Defaults to 1.
        * The second number is the minimum number of fractional digits. Defaults to 0.
        * The third number is the maximum number of fractional digits. Defaults to 3.
  tr(style=top)
    td
      :marked
        ### orderBy
      code-example.
        &lttr ng-repeat="movie in movieList | orderBy : 'title'">
      :marked
        Orders the collection as specified by the expression. 
        In this example, the movieList is ordered by the movie title.
    td
      :marked
        ### None
        There is no comparable filter in Angular&nbsp;2.
        Ordering/sorting the results can be coded in the component. 
        If the ordering/sorting code is expected to be reused in several templates, consider building a custom pipe.
  tr(style=top)
    td
    td
      :marked
        ### async
        The `async` pipe in Angular&nbsp;2 ...
  tr(style=top)
    td
    td
      :marked
        ### percent
      code-example.
        {{ movie.approvalRating | percent: '1.0-2' }}
      :marked
        The `percent` pipe in Angular&nbsp;2 formats a number as a local percentage. The argument is defined as follows:
        * The first number represents the minimum number of integer digits. Defaults to 1.
        * The second number is the minimum number of fractional digits. Defaults to 0.
        * The third number is the maximum number of fractional digits. Defaults to 3.