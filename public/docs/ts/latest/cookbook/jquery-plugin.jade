include ../_util-fns

:marked
    Using jQuery for direct DOM access is not recommended in Angular projects, but we do see value in supporting integration with third party jQuery plugins.
    
    In this cookbook we show how to integrate `draggable` and `droppable` from jQuery UI to make it easier for our admins to assign new adventures to our brave heroes.
    
    Before a hero can set out on a new quest, one of our admins will give the hero a new assignment by dragging and dropping the hero's name on top of the assignment.
:marked
   **See the [live example](/resources/live-examples/cb-jquery-plugin/ts/plnkr.html)**.   
   
<a id="toc"></a>
:marked
   ## Table of contents

      [Add jQuery](#jquery-add)

      [Drag](#drag)

      [Drop](#drop)
      
.l-main-section
<a id="jquery-add"></a>
:marked
   ## Add jQuery
   
   Before we can start we have to add the necessary script references to load the jQuery library and the two plugins, `draggable` and `droppable`, from jQuery UI. 
   
+makeExample('cb-jquery-plugin/ts/index.html', 'jquery', 'index.html (add jquery scripts)')(format=".")  

:marked
    jQuery declares a global `jQuery` variable, but this variable is not know to TypeScript. In order to reference `jQuery` from TypeScript we have to declare a corresponding TypeScript variable as well.
    
    In this case we don't need to access the jQuery api, so it's unnecessary to add additional typings for jQuery. Instead we will just declare `jQuery` as an `any` variable. 
    
    If we don't declare `jQuery`, the TypeScript compiler will give us an error.
    
+makeExample('cb-jquery-plugin/ts/app/hero.component.ts', 'declare-jquery', 'app/hero.component.ts (declare jquery)')(format=".")  
   
.l-main-section
<a id="drag"></a>
:marked
   ## Drag
   
   `draggable` is a jQuery plugin that allows us to move an element on the screen. In the UI our admins will "drag" heroes and drop them on assignments.
   
    `HeroComponent` is created to represent "draggable" hero elements.  

+makeTabs(
  `cb-jquery-plugin/ts/app/hero.component.ts,
   cb-jquery-plugin/ts/app/hero.component.html`,
  null,
  `hero.component.ts,
   hero.component.html`
)  

:marked
    We want to be careful not to access the DOM directly, so we are using `@ViewChild` to access the target element for the `draggable` plugin. 
    
    `@ViewChild('hero')` declares a reference to an element in the template with a matching `#hero` variable reference. 

:marked
    Now, we can go ahead and apply the draggable plugin to `this.hero.nativeElement` using familiar `jQuery` syntax.
+makeExample('cb-jquery-plugin/ts/app/hero.component.ts', 'add-plugin', 'app/hero.component.ts (add plugin)')(format=".")  

:marked
    We apply the plugin in the `AfterViewInit` lifecycle hook since we know the component view has been fully initialized at this point. 
   
.l-main-section
<a id="drop"></a>
:marked
   ## Drop    
   
   `droppable` is used in tandem with `draggable` to create a drop-zone for dragged elements. 
   
   `HeroAssignmentComponent` represents an assignment that we can assign one or more heroes to using drag and drop.

+makeTabs(
  `cb-jquery-plugin/ts/app/hero-assignment.component.ts,
   cb-jquery-plugin/ts/app/hero-assignment.component.html`,
  null,
  `hero-assignment.component.ts,
   hero-assignment.component.html`
)   

:marked
    Same as with `draggable`, we are applying the `droppable` plugin in `AfterViewInit`.
    
    `droppable` lets us specify a callback that executes when a hero is dropped on the assignment. We use this callback to manage an array of assigned heroes whenever a new hero is assigned.  

+makeExample('cb-jquery-plugin/ts/app/hero-assignment.component.ts', 'add-plugin', 'app/hero-assignment.component.ts (add plugin)')(format=".")  
          
:marked
    The final UI looks like this.
    
    Admins can assign any given hero to multiple assignments by dragging and dropping. 
figure.image-display
   img(src="/resources/images/cookbooks/jquery-plugin/hero-assignments.png" alt="Hero Assignments")
   
:marked
   [Back to top](#top)   
    
          
      