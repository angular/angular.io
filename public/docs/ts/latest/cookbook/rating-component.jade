include ../_util-fns

:marked
  In this cookbook we will show how to build a custom rating directive with two-way databinding.
  <a id="top"></a>
  ## Table of contents
  
    [A static rating component](#static-component)
    
    [Adding inputs](#inputs)
    
    [Reacting to clicks](#clicks)
    
    [Adding outputs](#outputs)
  
:marked
  **See the [live example](/resources/live-examples/cb-rating-component/ts/plnkr.html)**.
  
.l-main-section
<a id="static-component"></a>
:marked
  ## A static rating component
  
  The first thing we are going to do is to create an static rating component. Let's start with the basic skeleton.
  
+makeExample('cb-rating-component/ts/app/rating.component.1.ts', null, 'rating.component.ts (skeleton)')(format=".")

:marked
  Our next step would be to print our 5 stars. To do that, we need to output some HTML.
  For each star, we want to output two elements: We want the star itself which we can see and click, and also an invisible star that we will use for accessibility.
  This means that we need `ngFor` to generate not only one element, but two.
  
  What we can do here, is to de-sugar `ngFor` into its complete version. That will allow us to to generate as many elements as we need.
  
+makeExample('cb-rating-component/ts/app/rating.component.2.ts', 'template', 'rating.component.ts (template)')(format=".")

.l-sub-section
  :marked
    Learn more about this syntax at the [Template Syntax](../guide/template-syntax.html#!#star-template) chapter and [Structural Directives](../guides/structural-directives.html#!#asterisk).

:marked
  So here we say that we want a `<template>` element (the element itself won't output any markup) with the `ngFor` directive in it.
  We give to it the collection we want to repeat, `range`, and also that we want a reference to the current index in the collection.
  Notice that we aren't getting a reference to the current item on the `range` collection, we don't need it. We just need to generate that template as many times as we need.
  
  We need to create that range collection now.

+makeExample('cb-rating-component/ts/app/rating.component.ts', 'range-attribute', 'rating.component.ts (class)')(format=".")

:marked
  Let's update our app component to see it in action.
  
+makeExample('cb-rating-component/ts/app/app.component.1.ts', null, 'app.component.ts')(format=".")

:marked
  If we check our browser now, we can see it working.
  
figure.image-display
  img(src="/resources/images/cookbooks/rating-component/static-component.png" alt="Static Component")  

:marked
  And also the desired markup.
  
figure.image-display
  img(src="/resources/images/cookbooks/rating-component/generated-output.png" alt="Generated Output")
  
<a id="inputs"></a>
:marked
  ## Adding inputs
  
  But not all heroes are as awesome as Windstorm! We should be able to initialize our rating component with a different value. That means that we need an input.
  
+makeExample('cb-rating-component/ts/app/rating.component.ts', 'rate-input', 'rating.component.ts (class)')(format=".")

:marked
  With the input we just need to apply a class or another.
  
+makeExample('cb-rating-component/ts/app/rating.component.3.ts', 'template', 'rating.component.ts (template)')(format=".")

:marked
  Now that we have the input, we can use it with static or dynamic values.
  
code-example(language="html", format=".")
  &lt;my-hero-rating rate="3"&gt;&lt;/my-hero-rating&gt;
  &lt;my-hero-rating [rate]="rate"&gt;&lt;/my-hero-rating&gt;
  
<a id="clicks"></a>
:marked
  ## Reacting to clicks
  
  Bombasto is not a bad hero, let's make the rating clickable.
  
+makeExample('cb-rating-component/ts/app/rating.component.ts', 'rating-template', 'rating.component.ts (template)')(format=".")

:marked
  By clicking a star, we update our internal `rate` with the new value.
  
+makeExample('cb-rating-component/ts/app/rating.component.3.ts', 'update-method', 'rating.component.ts (class)')(format=".")

figure.image-display
  img(src="/resources/images/cookbooks/rating-component/click.gif" alt="Static Click")
  
<a id="outputs"></a>
:marked
  ## Adding outputs
  
  When clicking the rating component, we want the updated rate back, so we need an output.
  
+makeExample('cb-rating-component/ts/app/rating.component.ts', 'rate-output', 'rating.component.ts (class)')(format=".")

:marked
  And we push the new rate in a click.
  
+makeExample('cb-rating-component/ts/app/rating.component.ts', 'update-method', 'rating.component.ts (class)')(format=".")

:marked
  That allows us to do two-way databinding.
  
code-example(language="html", format=".")
  &lt;my-hero-rating [(rate)]="rate"&gt;&lt;/my-hero-rating&gt;
  
:marked
  Here is the complete source for the rating component.
  
+makeExample('cb-rating-component/ts/app/rating.component.ts', null, 'rating.component.ts')(format=".")

:marked
  [Back to top](#top)
