include ../_util-fns

:marked
    JavaScript has traditionally been a website scripting language, but has become a popular language for desktop and server side development as well.

    In this cookbook we show how to create cross platform dektop applications using Angular and Electron.  

<a id="toc"></a>
:marked
    ## Table of contents

      [Electron](#electron)

      [Adding Tour of Heroes](#toh)

      [Running the Application](#running-application)

.l-main-section
<a id="electron"></a>
:marked
   ## Electron

   Electron provides a runtime envrionment for executing JavaScript in dektop applications. 
   
   We will take our existing <a href="/docs/ts/latest/tutorial/toh-pt6.html">Tour of Heroes application</a> and turn it into an Electron dekstop application instead of a traditional web application.

   Before we can get started we have to install the Electron runtime. 

   The latest build of Electron can be installed by running `npm install -g electron-prebuilt`.

   Installing `electron-prebuilt` with `-g` makes the installation global, but this is not a requirement.

.l-main-section
<a id="electron"></a>
:marked
   ## Adding Tour of Heroes

   It may seem like an ambitious goal to convert an application like Tour of Heroes to a dektop application. The question is, can it be done without making major changes to the existing code?

   Luckily the answer is yes. In fact the code can be ported to Electron nearly without any code changes at all.

   We pick up where Tour of Heroes left of with the following files:

.filetree
    .file angular2-tour-of-heroes
    .children
    .file app
    .children
        .file app.component.ts
        .file app.component.css
        .file dashboard.component.css
        .file dashboard.component.html
        .file dashboard.component.ts
        .file hero.ts
        .file hero-detail.component.css
        .file hero-detail.component.html
        .file hero-detail.component.ts
        .file hero.service.ts
        .file heroes.component.css
        .file heroes.component.html
        .file heroes.component.ts
        .file main.ts
        .file hero-data.service.ts
        .file node_modules ...
        .file typings ...
        .file index.html
        .file package.json
        .file styles.css
        .file sample.css
        .file systemjs.config.json
        .file tsconfig.json
        .file typings.json

:marked
    The only modification we have to make is change the `href` of the base tag to `href="."` from `href="/"`
+makeExample('cb-electron/ts/index.html', 'base', 'ts/index.html')(format=".")    

:marked
    The `href` change is necessary since Electron will reference files as physical file paths instead of relative web urls. 

.l-main-section
<a id="running-application"></a>
:marked
   ## Running the Application    

   In order to run our Tour of Heroes application we have to create a simple Electron application to host our Angular code.

   We have defined the Electron application in index.js and put it in the same folder as index.html.

+makeExample('cb-electron/ts/index.js', null, 'index.js')(format=".") 

:marked
    We can now launch the Electron application by running `electron` from the command line, and pass it the path to the application as a command line argument. 

    If we are starting the application from the same folder as index.html we can simple start it as `electron .` 
   
   