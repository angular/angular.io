include ../_util-fns

:marked
   In the following example I will show how to use ngForm dynamically to render a simple form with different control types and validation.

:marked
   In situations where you need to support multiple forms with frequent changes, it's never desirable to rely on fixed markup forms.
   Instead it's much better to create data driven forms where the form is generated dynamically based on conventions in your model.

<a id="toc"></a>
:marked
   ## Table of contents

      [Question Model](#object-model)

      [Form Component](#form-component)

      [Dynamic Template](#dynamic-template)

:marked
   **See the [live example](/resources/live-examples/cb-dynamic-form/ts/plnkr.html)**.

.l-main-section
<a id="object-model"></a>
:marked
   ## Question Model

   The first step is to generate an object model that can describe all scenarios needed by the form functionality.

   I have created `QuestionBase` as a baseline for more specific question types.

+makeExample('cb-dynamic-form/ts/app/question-base.ts')

:marked
   From the base I have derived new classes in `TextboxQuestion` and `DropdownQuestion` to represent Textbox and Dropdown questions. The idea is that the form will be bound to the specific question types and render the appropriate controls. In the case of textbox it supports multiple html5 types like text, email, url etc via the `type` property.

+makeExample('cb-dynamic-form/ts/app/textbox-question.ts')

+makeExample('cb-dynamic-form/ts/app/dropdown-question.ts')

:marked
   The next step is to define a top level model that will contain the list of questions that make up a survey.

:marked
   The model is very simple with just an array of questions and a method to convert the questions to an ngForm control group. The control group consumes the meta data from the question models and allows you to specify default values and validation rules.

+makeExample('cb-dynamic-form/ts/app/question-model.ts')

<a id="form-component"></a>
:marked
   ## Form Component
   Now that we have defined the necessary models we are ready to create a component to represent the dynamic form.

+makeExample('cb-dynamic-form/ts/app/dynamic-form.component.ts')

:marked
   The form component expects the list of questions in the form of an array - bound to  `@Input() questions`.

   In a real world application it's likely that the question definitions will come from an api, but for simplicity I have instantiated the question model manually in the host component. For the sake of brevity I have only included three question types - plain textbox, email textbox and dropdown list.

+makeExample('cb-dynamic-form/ts/app/app.component.ts')

<a id="dynamic-template"></a>
:marked
   ## Dynamic Template
   The final step is to create the template for our dynamic form component.

   The key to this is really the dynamic data binding of meta data used to render the form. In addition to control meta we are also adding validation dynamically. The validation requirements are added in the `toGroup()` method we discussed earlier in the main model.

   The save button will be disabled until the form is in a valid state, but once it's clicked, I am rendering out the current values of the form. This proves that any user input is bound back to the model.

+makeExample('cb-dynamic-form/ts/app/dynamic-form.component.html')

:marked
   The final form looks like this:
figure.image-display
   img(src="/resources/images/cookbooks/dynamic-form/dynamic-form.png" alt="Dynamic-Form")


:marked
   [Back to top](#top)