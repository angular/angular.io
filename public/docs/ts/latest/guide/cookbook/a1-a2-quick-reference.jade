include ../../../../../_includes/_util-fns

:marked
  There are many syntactical differences between Angular 1.x and Angular 2.
  This chapter provides a quick reference guide to some of the common Angular 1.x
  syntax and its equivalent in Angular 2.

.l-main-section
:marked
  ## Template Basics
  Templates are the user-facing part of an Angular application written in HTML.
  The following are some of the key Angular 1.x template features with the equivalent
  template syntax in Angular 2.

table
  tr
    th Angular 1.x
    th Angular 2
  tr
    td <b>Bindings</b>
    td <b>Bindings</b>
  tr
    td
      code-example(language="html" escape="html")
        <h2 class='title'>{{vm.title}}</h2>
      In Angular 1, the binding is prefixed with the controller alias because we
      had to be specific about the source of the binding.<br>
    td
      code-example(format="" escape="html")
        <h2 class='title'>{{title}}</h2>
      In Angular 2, the context of the binding is implied and is always the
      associated component. So it needs no reference variable.
  tr
    td <b>Filters</b>
    td <b>Pipes</b>
  tr
    td
      code-example(format="" escape="html")
        {{ movie.releaseDate | date }}
      To filter output in our templates, we use filters in Angular 1.x.
    td
      code-example(format="" escape="html")
        {{ movie.releaseDate | date }}
      In Angular 2, we use pipes to filter output. Many (but not all) of the filters from Angular 1.x are
      built-in pipes in Angular 2. See the heading "Pipes" below for more information.
  tr
    td <b>Local variables</b>
    td <b>Local variables</b>
  tr
    td
      code-example(format="" escape="html")
        <li ng-repeat='movie in vm.movies'></li>
      Here, movie is a user-defined local variable.
    td
      code-example(format="" escape="html")
        <li ng-for='#movie of vm.movies'></li>
      In Angular 2, we have true local variables that are explicitly defined using the hash (#) symbol.
