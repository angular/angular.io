block includes
  include ../_util-fns
  - var _Install = 'Install'
  - var _prereq = 'Node.js'
  - var _angular_browser_uri = '@angular/platform-browser-dynamic'
  - var _angular_core_uri = '@angular/core'
  - var _appDir = 'app'
  - var _indexHtmlDir = 'project root'

:marked
  Welcome to the plunker Angular 2 Quickstart. Here we won't talk about toolings, we will directly dive into real Angular 2 code.
  
.l-main-section
button(class="verbose off md-primary md-button md-ink-ripple", type="button", onclick="verbose(false)").
  Hide explanations
button(class="verbose on md-primary md-button md-ink-ripple", type="button", onclick="verbose(true)").
  View explanations
.l-verbose-section
  :marked
    *Explanations* describe the concepts and reasons behind the instructions.
    Explanations have a thin border on the left like *this* block of text.

    Click *Hide Explanations* to show only the instructions.
    Click *View Explanations* to see everything again.

.l-main-section
  :marked
    ## Our first component
    
    Let's begin with our application component file:
    
+makeExample('real-quickstart/ts/app/app.component.ts', null)(format=".")

<iframe src="http://embed.plnkr.co/7dkHxWBnrcEoEDKw747t?show=src/app/app.component.ts" style="width:100%; height:500px" frameborder="0"></iframe>

.l-verbose-section
  :marked
    ### AppComponent is the root of the application

    Every Angular app has at least one **root component**, conventionally named `AppComponent`,
    that hosts the client user experience.
    Components are the basic building blocks of Angular applications.
    A component controls a portion of the screen &mdash; a *view* &mdash; through its associated template.

    This QuickStart has only one, extremely simple component.
    But it has the essential structure of every component we'll ever write:

    * One or more [import](#component-import)
    statements to reference the things we need.
    * A [@Component #{_decorator}](#component-decorator)
    that tells Angular what template to use and how to create the component.
    * A [component class](#component-class)
    that controls the appearance and behavior of a view through its template.

  a#component-import
  :marked
    ### Import

    Angular apps are modular. They consist of many files each dedicated to a purpose.
    Angular itself is modular. It is a collection of library modules
    each made up of several, related features that we'll use to build our application.

    When we need something from a module or library, we import it.
    Here we import the Angular 2 core so that our component code can have access to
    the `@Component` #{_decorator}.

  +makeExample('real-quickstart/ts/app/app.component.ts', 'import')

  h3#component-decorator @Component #{_decorator}
  +ifDocsFor('ts')
    :marked
      `Component` is a *decorator function* that takes a *metadata object* as argument.
      We apply this function to the component class by prefixing the function with the
      **@** symbol and invoking it with a metadata object, just above the class.
  :marked
    `@Component` is #{_a} *#{_decorator}* that allows us to associate *metadata* with the
    component class.
    The metadata tells Angular how to create and use this component.

  +makeExample('real-quickstart/ts/app/app.component.ts', 'metadata')

  block annotation-fields
    :marked
      This particular metadata object has two fields, a `selector` and a `template`.
  :marked
    The **selector** specifies a simple CSS selector for an HTML element that represents the component.

    >The element for this component is named `my-app`.
    Angular creates and displays an instance of our `AppComponent`
    wherever it encounters a `my-app` element in the host HTML.

    The **template** specifies the component's companion template,
    written in an enhanced form of HTML that tells Angular how to render this component's view.

    >Our template is a single line of HTML announcing "*My First Angular 2 App*".

    >A more advanced template could contain data bindings to component properties
    and might identify other application components which have their own templates.
    These templates might identify yet other components.
    In this way an Angular application becomes a tree of components.

  :marked
    ### Component class
    At the bottom of the file is an empty, do-nothing class named `AppComponent`.
  +makeExample('real-quickstart/ts/app/app.component.ts', 'class')
  :marked
    When we're ready to build a substantive application,
    we can expand this class with properties and application logic.
    Our `AppComponent` class is empty because we don't need it to do anything in this QuickStart.
  +ifDocsFor('ts')
    :marked
      We **export** `AppComponent` so that we can **import** it elsewhere in our application,
      as we'll see when we create `main.ts`.

.l-main-section
  :marked
    ## Add main.ts

    Previous example did work, but how is the application being bootstrapped anyway?
    Let's create the main file where we bootstrap our application:
    
+makeExample('real-quickstart/ts/app/main.ts')(format=".")
<iframe src="http://embed.plnkr.co/NHloqqXa683mAPLatC11?show=src/main.ts" style="width:100%; height:500px" frameborder="0"></iframe>

.l-verbose-section
  :marked
    We import the two things we need to launch the application:

    1. Angular's browser `bootstrap` function
    1. The application root component, `AppComponent`.

    Then we call `bootstrap` with `AppComponent`.

    ### Bootstrapping is platform-specific
    Notice that we import the `bootstrap` function from `#{_angular_browser_uri}`,
    not `#{_angular_core_uri}`.
    Bootstrapping isn't core because there isn't a single way to bootstrap the app.
    True, most applications that run in a browser call the bootstrap function from
    this library.

    But it is possible to load a component in a different environment.
    We might load it on a mobile device with [Apache Cordova](https://cordova.apache.org/) or [NativeScript](https://www.nativescript.org/).
    We might wish to render the first page of our application on the server
    to improve launch performance or facilitate
    [SEO](http://www.google.com/webmasters/docs/search-engine-optimization-starter-guide.pdf).
    These targets require a different kind of bootstrap function that we'd import from a different library.

    ### Why create separate *main.#{_docsFor}* and app component files?

    Both `main.#{_docsFor}` and the app component files are tiny.
    This is just a QuickStart.
    We could have merged these two files into one
    and spared ourselves some complexity.

    We'd rather demonstrate the proper way to structure an Angular application.
    App bootstrapping is a separate concern from presenting a view.
    Mixing concerns creates difficulties down the road.
    We might launch the `AppComponent` in multiple environments with different bootstrappers.
    Testing the component is much easier if it doesn't also try to run the entire application.
    Let's make the small extra effort to do it *the right way*.

.l-main-section
  :marked
    ## Add our application selector to index.html
    
    Application component is written, bootstrapped but... How does it end on the screen? We need to use the application selector in our index.html:
    
+makeExample('real-quickstart/ts/index.html', 'my-app')
<iframe src="http://embed.plnkr.co/5bNwGABF4sGxSh0BY6MX?show=index.html" style="width:100%; height:500px" frameborder="0"></iframe>

.l-verbose-section
  :marked
    When Angular calls the `bootstrap` function in `main.#{_docsFor}`, it reads the `AppComponent`
    metadata, finds the `my-app` selector, locates an element tag named `my-app`,
    and renders our application's view between those tags.

:marked
  ## Make some changes

  Try changing the message to "My SECOND Angular 2 app".
