include ../_util-fns

.alert.is-important
  :marked
    We are still preparing style recommendations for the new NgModules feature
    introduced in RC5 and will add it to the style guide soon.

:marked
  Welcome to the Angular 2 Style Guide

  ## Purpose

  If you are looking for an opinionated style guide for syntax, conventions, and structuring Angular applications, then step right in.

  The purpose of this style guide is to provide guidance on building Angular applications by showing the conventions we use and, more importantly, why we choose them.
.l-main-section

:marked
  ## Style Vocabulary

  Each guideline describes either a good or bad practice, and all have a consistent presentation.

  The wording of each guideline indicates how strong the recommendation is.

.s-rule.do
  :marked
    **Do** is one that should always be followed.
    _Always_ might be a bit too strong of a word.
    Guidelines that literally should always be followed are extremely rare.
    On the other hand, we need a really unusual case for breaking a *Do* guideline.

.s-rule.consider
  :marked
    **Consider** guidelines should generally be followed.
    If you fully understand the meaning behind the guideline and have a good reason to deviate, then do so. Please strive to be consistent.

.s-rule.avoid
  :marked
    **Avoid** indicates something we should almost never do. Code examples to *avoid* have an unmistakeable red header.
.l-main-section

:marked
  ## File Structure Conventions

  Some code examples display a file that has one or more similarly named companion files. (e.g. hero.component.ts and hero.component.html).

  The guideline will use the shortcut `hero.component.ts|html|css|spec` to represent those various files. Using this shortcut makes this guide's file structures easier to read and more terse.

.l-main-section
a(id='toc')

:marked
  ## Table of Contents

    1. [Single Responsibility](#single-responsibility)
    1. [Naming](#naming)
    1. [Coding Conventions](#coding-conventions)
    1. [Application Structure](#application-structure)
    1. [Components](#components)
    1. [Directives](#directives)
    1. [Services](#services)
    1. [Data Services](#data-services)
    1. [Lifecycle Hooks](#lifecycle-hooks)
    1. [Appendix](#appendix)

.l-main-section
:marked
  ## Single Responsibility

  We apply the [Single Responsibility Principle](https://wikipedia.org/wiki/Single_responsibility_principle) to all Components, Services, and other symbols we create. This helps make our app cleaner, easier to read and maintain, and more testable.

  ### <a id="01-01"></a>Rule of One
  #### <a href="#01-01">Style 01-01</a>
.s-rule.do
  :marked
    **Do** define one thing (e.g. service or component) per file.

.s-rule.consider
  :marked
    **Consider** limiting files to 400 lines of code.

.s-why
  :marked
    **Why?** One component per file makes it far easier to read, maintain, and avoid collisions with teams in source control.

.s-why
  :marked
    **Why?** One component per file avoids hidden bugs that often arise when combining components in a file where they may share variables, create unwanted closures, or unwanted coupling with dependencies.

.s-why.s-why-last
  :marked
    **Why?** A single component can be the default export for its file which facilitates lazy loading with the Router.
:marked
  The key is to make the code more reusable, easier to read, and less mistake prone.

  The following *negative* example defines the `AppComponent`, bootstraps the app, defines the `Hero` model object, and loads heroes from the server ... all in the same file. *Don't do this*.

+makeExample('style-guide/ts/01-01/app/heroes/hero.component.avoid.ts', '', 'app/heroes/hero.component.ts')(avoid=1)
:marked
  Better to redistribute the component and supporting activities into their own dedicated files.

+makeTabs(
  `style-guide/ts/01-01/main.ts,
  style-guide/ts/01-01/app/app.module.ts,
  style-guide/ts/01-01/app/app.component.ts,
  style-guide/ts/01-01/app/heroes/heroes.component.ts,
  style-guide/ts/01-01/app/heroes/shared/hero.service.ts,
  style-guide/ts/01-01/app/heroes/shared/hero.model.ts,
  style-guide/ts/01-01/app/heroes/shared/mock-heroes.ts`,
  '',
  `main.ts,
  app/app.module.ts,
  app/app.component.ts,
  app/heroes/heroes.component.ts,
  app/heroes/shared/hero.service.ts,
  app/heroes/shared/hero.model.ts,
  app/heroes/shared/mock-heroes.ts`)

:marked
  As the app grows, this rule becomes even more important.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="01-02"></a>Small Functions
  #### <a href="#01-02">Style 01-02</a>
.s-rule.do
  :marked
    **Do** define small functions

.s-rule.consider
  :marked
    **Consider** limiting to no more than 75 lines.

.s-why
  :marked
    **Why?** Small functions are easier to test, especially when they do one thing and serve one purpose.

.s-why
  :marked
    **Why?** Small functions promote reuse.

.s-why
  :marked
    **Why?** Small functions are easier to read.

.s-why
  :marked
    **Why?** Small functions are easier to maintain.

.s-why.s-why-last
  :marked
    **Why?** Small functions help avoid hidden bugs that come with large functions that share variables with external scope, create unwanted closures, or unwanted coupling with dependencies.

a(href="#toc") Back to top

.l-main-section
:marked
  ## Naming

  Naming conventions are hugely important to maintainability and readability. This guide recommends naming conventions for the file name and the symbol name.

.l-main-section
:marked
  ### <a id="02-01"></a>General Naming Guidelines
  #### <a href="#02-01">Style 02-01</a>

.s-rule.do
  :marked
    **Do** use consistent names for all symbols.

.s-rule.do
  :marked
    **Do** follow a pattern that describes the symbol's feature then its type. The recommended pattern is `feature.type.ts`.

.s-why
  :marked
    **Why?** Naming conventions help provide a consistent way to find content at a glance. Consistency within the project is vital. Consistency with a team is important. Consistency across a company provides tremendous efficiency.

.s-why
  :marked
    **Why?** The naming conventions should simply help us find our code faster and make it easier to understand.

.s-why.s-why-last
  :marked
    **Why?** Names of folders and files should clearly convey their intent. For example, `app/heroes/hero-list.component.ts` may contain a component that manages a list of heroes.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="02-02"></a>Separate File Names with Dots and Dashes
  #### <a href="#02-02">Style 02-02</a>

.s-rule.do
  :marked
    **Do** use dashes to separate words in the descriptive name.

.s-rule.do
  :marked
    **Do** use dots to separate the descriptive name from the type.

.s-rule.do
  :marked
    **Do** use consistent type names for all components following a pattern that describes the component's feature then its type. A recommended pattern is `feature.type.ts`.

.s-rule.do
  :marked
    **Do** use conventional type names including `.service`, `.component`, `.pipe`. 
    Invent additional type names if you must but take care not to create too many.

.s-why
  :marked
    **Why?** Type names provide a consistent way to quickly identify what is in the file.

.s-why
  :marked
    **Why?** Make it easy to find a specific file type using an editor or IDE's fuzzy search techniques.

.s-why
  :marked
    **Why?** Unabbreviated type names such as `.service` are descriptive and unambiguous.
    Abbreviations such as `.srv`, `.svc`, and `.serv` can be confusing.

.s-why.s-why-last
  :marked
    **Why?** Provides pattern matching for any automated tasks.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="02-03"></a>Components and Directives
  #### <a href="#02-03">Style 02-03</a>

.s-rule.do
  :marked
    **Do** use consistent names for all assets named after what they represent.

.s-rule.do
  :marked
    **Do** use upper camel case for symbols. Match the name of the symbol to the naming of the file.

.s-rule.do
  :marked
    **Do** append the symbol name with the suffix that it represents.

.s-why
  :marked
    **Why?** Provides a consistent way to quickly identify and reference assets.

.s-why
  :marked
    **Why?** Upper camel case is conventional for identifying objects that can be instantiated using a constructor.

.s-why.s-why-last
  :marked
    **Why?** The `Component` suffix is more commonly used and is more explicitly descriptive.

- var top="vertical-align:top"
table(width="100%")
  col(width="50%")
  col(width="50%")
  tr
    th Symbol Name
    th File Name
  tr(style=top)
    td
      code-example.
        @Component({ ... })
        export class AppComponent {}
    td
      :marked
        app.component.ts
  tr(style=top)
    td
      code-example.
        @Component({ ... })
        export class HeroesComponent
    td
      :marked
        heroes.component.ts
  tr(style=top)
    td
      code-example.
        @Component({ ... })
        export class HeroListComponent
    td
      :marked
        hero-list.component.ts
  tr(style=top)
    td
      code-example.
        @Component({ ... })
        export class HeroDetailComponent
    td
      :marked
        hero-detail.component.ts
  tr(style=top)
    td
      code-example.
        @Directive({ ... })
        export class ValidationDirective
    td
      :marked
        validation.directive.ts
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="02-04"></a>Service Names
  #### <a href="#02-04">Style 02-04</a>

.s-rule.do
  :marked
    **Do** use consistent names for all services named after their feature.

.s-rule.do
  :marked
    **Do** use upper camel case for services.

.s-rule.do
  :marked
    **Do** suffix services with `Service` when it is not clear what they are (e.g. when they are nouns).

.s-why
  :marked
    **Why?** Provides a consistent way to quickly identify and reference services.

.s-why
  :marked
    **Why?** Clear service names such as `Logger` do not require a suffix.

.s-why.s-why-last
  :marked
    **Why?** Service names such as `Credit` are nouns and require a suffix and should be named with a suffix when it is not obvious if it is a service or something else.

- var top="vertical-align:top"
table(width="100%")
  col(width="50%")
  col(width="50%")
  tr
    th Symbol Name
    th File Name
  tr(style=top)
    td
      code-example.
        @Injectable()
        export class HeroDataService {}
    td
      :marked
        hero-data.service.ts
  tr(style=top)
    td
      code-example.
        @Injectable()
        export class CreditService {}
    td
      :marked
        credit.service.ts
  tr(style=top)
    td
      code-example.
        @Injectable()
        export class Logger {}
    td
      :marked
        logger.service.ts
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="02-05"></a>Bootstrapping
  #### <a href="#02-05">Style 02-05</a>

.s-rule.do
  :marked
    **Do** put bootstrapping and platform logic for the app in a file named `main.ts`.

.s-rule.avoid
  :marked
    **Avoid** putting app logic in the `main.ts`. Instead consider placing it in a Component or Service.

.s-why
  :marked
    **Why?** Follows a consistent convention for the startup logic of an app.

.s-why.s-why-last
  :marked
    **Why?** Follows a familiar convention from other technology platforms.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="02-06"></a>Directive Selectors
  #### <a href="#02-06">Style 02-06</a>

.s-rule.do
  :marked
    **Do** Use lower camel case for naming the selectors of our directives.

.s-why
  :marked
    **Why?** Keeps the names of the properties defined in the directives that are bound to the view consistent with the attribute names.

.s-why.s-why-last
  :marked
    **Why?** The Angular 2 HTML parser is case sensitive and will recognize lower camel case.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="02-07"></a>Custom Prefix for Components
  #### <a href="#02-07">Style 02-07</a>

.s-rule.do
  :marked
    **Do** use a custom prefix for the selector of our components. For example, the prefix `toh` represents from **T**our **o**f **H**eroes and the prefix `admin` represents an admin feature area.

.s-rule.do
  :marked
    **Do** use a prefix that identifies the feature area or the app itself.

.s-why
  :marked
    **Why?** Prevents name collisions.

.s-why
  :marked
    **Why?** Makes it easier to promote and share our feature in other apps.

.s-why.s-why-last
  :marked
    **Why?** Our Components and elements are easily identified.

+makeExample('style-guide/ts/02-07/app/heroes/hero.component.avoid.ts', 'example', 'app/heroes/hero.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/02-07/app/users/users.component.avoid.ts', 'example', 'app/users/users.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/02-07/app/heroes/hero.component.ts', 'example', 'app/heroes/hero.component.ts')
:marked

+makeExample('style-guide/ts/02-07/app/users/users.component.ts', 'example', 'app/users/users.component.ts')
:marked

:marked
  ### <a id="02-08"></a>Custom Prefix for Directives
  #### <a href="#02-08">Style 02-08</a>

.s-rule.do
  :marked
    **Do** use a custom prefix for the selector of our directives (for instance below we use the prefix `toh` from **T**our **o**f **H**eroes).

.s-why
  :marked
    **Why?** Prevents name collisions.

.s-why.s-why-last
  :marked
    **Why?** Our Directives are easily identified.

+makeExample('style-guide/ts/02-08/app/shared/validate.directive.avoid.ts', 'example', 'app/shared/validate.directive.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/02-08/app/shared/validate.directive.ts', 'example', 'app/shared/validate.directive.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="02-09"></a>Pipe Names
  #### <a href="#02-09">Style 02-09</a>

.s-rule.do
  :marked
    **Do** use consistent names for all pipes, named after their feature.

.s-why.s-why-last
  :marked
    **Why?** Provides a consistent way to quickly identify and reference pipes.

- var top="vertical-align:top"
table(width="100%")
  col(width="50%")
  col(width="50%")
  tr
    th Symbol Name
    th File Name
  tr(style=top)
    td
      code-example.
        @Pipe({ name: 'ellipsis' })
        export class EllipsisPipe implements PipeTransform { }
    td
      :marked
        ellipsis.pipe.ts
  tr(style=top)
    td
      code-example.
        @Pipe({ name: 'initCaps' })
        export class InitCapsPipe implements PipeTransform { }
    td
      :marked
        init-caps.pipe.ts
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="02-10"></a>Unit Test File Names
  #### <a href="#02-10">Style 02-10</a>

.s-rule.do
  :marked
    **Do** name test specification files the same as the component they test.

.s-rule.do
  :marked
    **Do** name test specification files with a suffix of `.spec`.

.s-why
  :marked
      **Why?** Provides a consistent way to quickly identify tests.

.s-why.s-why-last
  :marked
      **Why?** Provides pattern matching for [karma](http://karma-runner.github.io/) or other test runners.

:marked
- var top="vertical-align:top"
table(width="100%")
  col(width="50%")
  col(width="50%")
  tr
    th Symbol Name
    th File Name
  tr(style=top)
    td
      :marked
        Components
    td
      :marked
        heroes.component.spec.ts
      :marked
        hero-list.component.spec.ts
      :marked
        hero-detail.component.spec.ts
  tr(style=top)
    td
      :marked
        Services
    td
      :marked
        logger.service.spec.ts
      :marked
        hero.service.spec.ts
      :marked
        filter-text.service.spec.ts
  tr(style=top)
    td
      :marked
        Pipes
    td
      :marked
        ellipsis.pipe.spec.ts
      :marked
        init-caps.pipe.spec.ts
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="02-11"></a>End to End Test File Names
  #### <a href="#02-11">Style 02-11</a>

.s-rule.do
  :marked
    **Do** name end-to-end test specification files after the feature they test with a suffix of `.e2e-spec`.

.s-why
  :marked
    **Why?** Provides a consistent way to quickly identify end-to-end tests.

.s-why.s-why-last
  :marked
    **Why?** Provides pattern matching for test runners and build automation.

:marked
:marked
- var top="vertical-align:top"
table(width="100%")
  col(width="50%")
  col(width="50%")
  tr
    th Symbol Name
    th File Name
  tr(style=top)
    td
      :marked
        End to End Tests
    td
      :marked
        app.e2e-spec.ts
      :marked
        heroes.e2e-spec.ts
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ## Coding Conventions

  Have consistent set of coding, naming, and whitespace conventions.

.l-main-section
:marked
  ### <a id="03-01"></a>Classes
  #### <a href="#03-01">Style 03-01</a>

.s-rule.do
  :marked
    **Do** use upper camel case when naming classes.

.s-why
  :marked
    **Why?** Follows conventional thinking for class names.

.s-why.s-why-last
  :marked
    **Why?** Classes can be instantiated and construct an instance. We often use upper camel case to indicate a constructable asset.

+makeExample('style-guide/ts/03-01/app/shared/exception.service.avoid.ts', 'example', 'app/shared/exception.service.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/03-01/app/shared/exception.service.ts', 'example', 'app/shared/exception.service.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="03-02"></a>Constants
  #### <a href="#03-02">Style 03-02</a>

.s-rule.do
  :marked
    **Do** declare variables with `const` if their values should not change during the application lifetime.

.s-why
  :marked
    **Why?** Conveys to readers that the value is invariant.

.s-why.s-why-last
  :marked
    TypeScript helps enforce that intent by requiring immediate initialization and by
    preventing subsequent re-assignment.
    
.s-rule.consider
  :marked
    **Consider** spelling `const` variables in lower camel case.

.s-why
  :marked
    **Why?** lower camel case variable names (`heroRoutes`) are easier to read and understand
    than the traditional UPPER_SNAKE_CASE names (`HERO_ROUTES`).

.s-why.s-why-last
  :marked
    **Why?** The tradition of naming constants in UPPER_SNAKE_CASE reflects
    an era before the modern IDEs that quickly reveal the `const` declaration.
    TypeScript itself prevents accidental reassignment. 
    
.s-rule.do
  :marked
    **Do** tolerate _existing_ `const` variables that are spelled in UPPER_SNAKE_CASE.

.s-why.s-why-last
  :marked
    **Why?** Although we recommend creating _new_ constants in lower camel case,
    the tradition of UPPER_SNAKE_CASE remains popular and pervasive,
    especially in third party modules.

+makeExample('style-guide/ts/03-02/app/shared/data.service.ts', '', 'app/shared/data.service.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="03-03"></a>Interfaces
  #### <a href="#03-03">Style 03-03</a>

.s-rule.do
  :marked
    **Do** name an interface using upper camel case.

.s-rule.consider
  :marked
    **Consider** naming an interface without an `I` prefix.

.s-why.s-why-last
  :marked
    **Why?** When we use types, we can often simply use the class as the type.

+makeExample('style-guide/ts/03-03/app/shared/hero-collector.service.avoid.ts', 'example', 'app/shared/hero-collector.service.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/03-03/app/shared/hero-collector.service.ts', 'example', 'app/shared/hero-collector.service.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="03-04"></a>Properties and Methods
  #### <a href="#03-04">Style 03-04</a>

.s-rule.do
  :marked
    **Do** use lower camel case to name properties and methods.

.s-rule.avoid
  :marked
    **Avoid** prefixing private properties and methods with an underscore.

.s-why
  :marked
    **Why?** Follows conventional thinking for properties and methods.

.s-why
  :marked
    **Why?** JavaScript lacks a true private property or method.

.s-why.s-why-last
  :marked
    **Why?** TypeScript tooling makes it easy to identify private vs public properties and methods.

+makeExample('style-guide/ts/03-04/app/shared/toast.service.avoid.ts', 'example', 'app/shared/toast.service.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/03-04/app/shared/toast.service.ts', 'example', 'app/shared/toast.service.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="03-06"></a>Import Line Spacing
  #### <a href="#03-06">Style 03-06</a>

.s-rule.do
  :marked
    **Do** leave one empty line between third party imports and imports of code we created.

.s-rule.do
  :marked
    **Do** list import lines alphabetized by the module.

.s-rule.do
  :marked
    **Do** list destructured imported assets alphabetically.

.s-why
  :marked
    **Why?** The empty line makes it easy to read and locate imports.

.s-why.s-why-last
  :marked
    **Why?** Alphabetizing makes it easier to read and locate imports.

+makeExample('style-guide/ts/03-06/app/heroes/shared/hero.service.avoid.ts', 'example', 'app/heroes/shared/hero.service.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/03-06/app/heroes/shared/hero.service.ts', 'example', 'app/heroes/shared/hero.service.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ## Application Structure

  Have a near term view of implementation and a long term vision. Start small but keep in mind where the app is heading down the road.

  All of the app's code goes in a folder named `app`. All content is 1 feature per file. Each component, service, and pipe is in its own file. All 3rd party vendor scripts are stored in another folder and not in the `app` folder. We didn't write them and we don't want them cluttering our app. Use the naming conventions for files in this guide.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-01"></a>LIFT
  #### <a href="#04-01">Style 04-01</a>

.s-rule.do
  :marked
    **Do** structure the app such that we can `L`ocate our code quickly, `I`dentify the code at a glance, keep the `F`lattest structure we can, and `T`ry to be DRY.

.s-rule.do
  :marked
    **Do** define the structure to follow these four basic guidelines, listed in order of importance.

.s-why.s-why-last
  :marked
    **Why?** LIFT Provides a consistent structure that scales well, is modular, and makes it easier to increase developer efficiency by finding code quickly. Another way to check our app structure is to ask ourselves: How quickly can we open and work in all of the related files for a feature?

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-02"></a>Locate
  #### <a href="#04-02">Style 04-02</a>

.s-rule.do
  :marked
    **Do** make locating our code intuitive, simple and fast.

.s-why.s-why-last
  :marked
    **Why?** We find this to be super important for a project. If we cannot find the files we need to work on quickly, we will not be able to work as efficiently as possible, and the structure will need to change. We may not know the file name or where its related files are, so putting them in the most intuitive locations and near each other saves a ton of time. A descriptive folder structure can help with this.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-03"></a>Identify
  #### <a href="#04-03">Style 04-03</a>

.s-rule.do
  :marked
    **Do** name the file such that we instantly know what it contains and represents.

.s-rule.do
  :marked
    **Do** be descriptive with file names and keep the contents of the file to exactly one component.

.s-rule.avoid
  :marked
    **Avoid** files with multiple components, multiple services, or a mixture.

.s-why.s-why-last
  :marked
    **Why?** We spend less time hunting and pecking for code, and become more efficient. If this means we want longer file names, then so be it.

.l-sub-section
  :marked
    There are deviations of the 1 per file rule when we have a set of very small features that are all related to each other, as they are still easily identifiable.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-04"></a>Flat
  #### <a href="#04-04">Style 04-04</a>

.s-rule.do
  :marked
    **Do** keep a flat folder structure as long as possible.

.s-rule.consider
  :marked
    **Consider** creating folders when we get to seven or more files.

.s-why.s-why-last
  :marked
    **Why?** Nobody wants to search seven levels of folders to find a file. In a folder structure there is no hard and fast number rule, but when a folder has seven to ten files, that may be time to create subfolders. We base it on our comfort level. Use a flatter structure until there is an obvious value (to help the rest of LIFT) in creating a new folder.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-05"></a>T-DRY (Try to be DRY)
  #### <a href="#04-05">Style 04-05</a>

.s-rule.do
  :marked
    **Do** be DRY (Don't Repeat Yourself)

.s-rule.avoid
  :marked
    **Avoid** being so DRY that we sacrifice readability.

.s-why.s-why-last
  :marked
    **Why?** Being DRY is important, but not crucial if it sacrifices the others in LIFT, which is why we call it T-DRY. We don’t want to type `hero-view.component.html` for a view because, well, it’s obviously a view. If it is not obvious or by convention, then we name it.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-06"></a>Overall Structural Guidelines
  #### <a href="#04-06">Style 04-06</a>

.s-rule.do
  :marked
    **Do** start small but keep in mind where the app is heading down the road.

.s-rule.do
  :marked
    **Do** have a near term view of implementation and a long term vision.

.s-rule.do
  :marked
    **Do** put all of the app's code in a folder named `app`.

.s-rule.consider
  :marked
    **Consider** creating a folder for each component including its `.ts`, `.html`, `.css` and `.spec` file.

.s-why
  :marked
    **Why?** Helps us keep the app structure small and easy to maintain in the early stages, while being easy to evolve as the app grows.

.s-why.s-why-last
  :marked
    **Why?** Components often have four files (e.g. `*.html`, `*.css`, `*.ts`, and `*.spec.ts`) and can clutter a folder quickly.

.example-title Overall Folder and File Structure
.filetree
  .file src
  .children
    .file app
    .children
      .file heroes
      .children
        .file hero
        .children
          .file hero.component.ts|html|css|spec.ts
          .file index.ts
        .file hero-list
        .children
          .file hero-list.component.ts|html|css|spec.ts
          .file index.ts
        .file shared
        .children
          .file hero.model.ts
          .file hero.service.ts|spec.ts
          .file index.ts
        .file heroes.component.ts|html|css|spec.ts
        .file index.ts
      .file shared
      .children
        .file ...
      .file app.component.ts|html|css|spec.ts
    .file main.ts
    .file index.html
    .file ...
:marked

.l-sub-section
  :marked
    While we prefer our Components to be in their own dedicated folder, another option for small apps is to keep Components flat (not in a dedicated folder). This adds up to four files to the existing folder, but also reduces the folder nesting. Be consistent.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-07"></a>Shared Folder
  #### <a href="#04-07">Style 04-07</a>

.s-rule.do
  :marked
    **Do** put all shared files within a component feature in a `shared` folder.

.s-rule.consider
  :marked
    **Consider** creating a folder for each component including its `.ts`, `.html`, `.css` and `.spec` file.

.s-why
  :marked
    **Why?** Separates shared files from the components within a feature.

.s-why.s-why-last
  :marked
    **Why?** Makes it easier to locate shared files within a component feature.

.example-title Shared Folder
.filetree
  .file src
  .children
    .file app
    .children
      .file heroes
      .children
        .file hero
        .children
          .file ...
        .file hero-list
        .children
          .file ...
        .file shared
        .children
          .file hero-button
          .children
            .file ...
          .file hero.model.ts
          .file hero.service.ts|spec.ts
          .file index.ts
        .file heroes.component.ts|html|css|spec.ts
        .file index.ts
      .file shared
      .children
        .file exception.service.ts|spec.ts
        .file index.ts
        .file nav
        .children
          .file ...
      .file app.component.ts|html|css|spec.ts
    .file main.ts
    .file index.html
    .file ...
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-08"></a>Folders-by-Feature Structure
  #### <a href="#04-08">Style 04-08</a>

.s-rule.do
  :marked
    **Do** create folders named for the feature they represent.

.s-why
  :marked
    **Why?** A developer can locate the code, identify what each file represents at a glance, the structure is as flat as it can be, and there is no repetitive nor redundant names.

.s-why
  :marked
    **Why?** The LIFT guidelines are all covered.

.s-why
  :marked
    **Why?** Helps reduce the app from becoming cluttered through organizing the content and keeping them aligned with the LIFT guidelines.

.s-why.s-why-last
  :marked
    **Why?** When there are a lot of files (e.g. 10+) locating them is easier with a consistent folder structures and more difficult in flat structures.

:marked
  Below is an example of a small app with folders per component.

.example-title Folders per Component
.filetree
  .file src
  .children
    .file app
    .children
      .file heroes
      .children
        .file hero
        .children
          .file ...
        .file hero-list
        .children
          .file ...
        .file shared
        .children
          .file ...
        .file heroes.component.ts|html|css|spec.ts
        .file index.ts
      .file villains
      .children
        .file villain
        .children
          .file ...
        .file villain-list
        .children
          .file ...
        .file shared
        .children
          .file ...
        .file villains.component.ts|html|css|spec.ts
        .file index.ts
      .file shared
      .children
        .file nav
        .children
          .file ...
        .file ...
      .file app.component.ts|html|css|spec.ts
    .file main.ts
    .file index.html
    .file ...
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-09"></a>Layout Components
  #### <a href="#04-09">Style 04-09</a>

.s-rule.do
  :marked
    **Do** put components that define the overall layout in a `shared` folder.

.s-rule.do
  :marked
    **Do** put shared layout components in their own folder, under the `shared` folder.

.s-why
  :marked
    **Why?** We need a place to host our layout for our app. Our navigation bar, footer, and other aspects of the app that are needed for the entire app.

.s-why.s-why-last
  :marked
    **Why?** Organizes all layout in a consistent place re-used throughout the application.

.example-title Folder for Layout Components
.filetree
  .file src
  .children
    .file app
    .children
      .file heroes
      .children
        .file ...
      .file shared
      .children
        .file nav
        .children
          .file index.ts
          .file nav.component.ts|html|css|spec.ts
        .file footer
        .children
          .file index.ts
          .file footer.component.ts|html|css|spec.ts
        .file index.ts
        .file ...
      .file app.component.ts|html|css|spec.ts
    .file main.ts
    .file index.html
    .file ...
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-10"></a>Create and Import Barrels
  #### <a href="#04-10">Style 04-10</a>

.s-rule.consider
  :marked
    **Consider** creating a file that imports, aggregates, and re-exports items. We call this technique a **barrel**.

.s-rule.consider
  :marked
    **Consider** naming this barrel file `index.ts`.

.s-why
  :marked
    **Why?** A barrel aggregates many imports into a single import.

.s-why
  :marked
    **Why?** A barrel reduces the number of imports a file may need.
    
.s-why
  :marked
    **Why?** A barrel provides a consistent pattern to import everything exported in the barrel from a folder.
    
.s-why
  :marked
    **Why?** This is consistent with a pattern from Node, which imports the index.js|ts file from a folder.

.s-why.s-why-last
  :marked
    **Why?** A barrel shortens import statements.

+makeTabs(
  `style-guide/ts/04-10/app/shared/index.ts,
  style-guide/ts/04-10/app/shared/filter-text/index.ts,
  style-guide/ts/04-10/app/shared/modal/index.ts,
  style-guide/ts/04-10/app/shared/nav/index.ts,
  style-guide/ts/04-10/app/shared/spinner/index.ts,
  style-guide/ts/04-10/app/shared/toast/index.ts`,
  `example,,,,,`,
  `app/shared/index.ts,
  app/shared/filter-text/index.ts,
  app/shared/modal/index.ts,
  app/shared/nav/index.ts,
  app/shared/spinner/index.ts,
  app/shared/toast/index.ts`)
:marked

.example-title Folder Barrels
.filetree
  .file src
  .children
    .file app
    .children
      .file dashboard
      .children
        .file ...
        .file index.ts
      .file heroes
      .children
        .file ...
        .file index.ts
      .file shared
      .children
        .file nav
        .children
          .file ...
          .file index.ts
        .file search
        .children
          .file ...
          .file index.ts
        .file ...
        .file index.ts
      .file app.component.ts|html|css|spec.ts
    .file main.ts
    .file index.html
    .file ...
:marked

+makeExample('style-guide/ts/04-10/app/heroes/heroes.component.avoid.ts', 'example', 'app/heroes/heroes.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/04-10/app/heroes/heroes.component.ts', 'example', 'app/heroes/heroes.component.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-11"></a>Lazy Loaded Folders
  #### <a href="#04-11">Style 04-11</a>
  A distinct application feature or workflow may be *lazy loaded* or *loaded on demand* rather than when the application starts.

.s-rule.do
  :marked
    **Do** put the contents of lazy loaded features in a *lazy loaded folder*.
    A typical *lazy loaded folder* contains a *routing component*, its child components, and their related assets and modules.

.s-why.s-why-last
  :marked
    **Why?** The folder makes it easy to identify and isolate the feature content.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-13"></a>Never Directly Import Lazy Loaded Folders
  #### <a href="#04-13">Style 04-13</a>

.s-rule.avoid
  :marked
    **Avoid** allowing modules in sibling and parent folders to directly import a module in a *lazy loaded feature*.

.s-why.s-why-last
  :marked
    **Why?** Directly importing and using a module loads it immediately when our intention is to load it on demand.

+makeExample('style-guide/ts/04-13/app/app.component.avoid.ts', 'example', 'app/app.component.ts')(avoid=1)
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-14"></a>Lazy Loaded Folders May Import From a Parent
  #### <a href="#04-14">Style 04-14</a>

.s-rule.do
  :marked
    **Do** allow lazy loaded modules to import a module from a parent folder.

.s-why.s-why-last
  :marked
    **Why?** A parent module has already been loaded by the time the lazy loaded module imports it.

+makeExample('style-guide/ts/04-14/app/heroes/heroes.component.ts', 'example', 'app/heroes/heroes.component.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ## Components

  ### <a id="05-02"></a>Components Selector Naming
  #### <a href="#05-02">Style 05-02</a>

.s-rule.do
  :marked
    **Do** use `kebab-case` for naming the element selectors of our components.

.s-why.s-why-last
  :marked
    **Why?** Keeps the element names consistent with the specification for [Custom Elements](https://www.w3.org/TR/custom-elements/).

+makeExample('style-guide/ts/05-02/app/heroes/shared/hero-button/hero-button.component.avoid.ts', 'example', 'app/heroes/shared/hero-button/hero-button.component.ts')(avoid=1)
:marked

+makeTabs(
  `style-guide/ts/05-02/app/heroes/shared/hero-button/hero-button.component.ts,
  style-guide/ts/05-02/app/app.component.html`,
  'example,',
  `app/heroes/shared/hero-button/hero-button.component.ts,
  app/app.component.html`)
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="05-03"></a>Components as Elements
  #### <a href="#05-03">Style 05-03</a>

.s-rule.do
  :marked
    **Do** define Components as elements via the selector.

.s-why
  :marked
    **Why?** Components have templates containing HTML and optional Angular template syntax. They are most associated with putting content on a page, and thus are more closely aligned with elements.

.s-why
  :marked
    **Why?** Components are derived from Directives, and thus their selectors can be elements, attributes, or other selectors. Defining the selector as an element provides consistency for components that represent content with a template.

.s-why.s-why-last
  :marked
    **Why?** It is easier to recognize that a symbol is a component vs a directive by looking at the template's html.

+makeExample('style-guide/ts/05-03/app/heroes/shared/hero-button/hero-button.component.avoid.ts', 'example', 'app/heroes/hero-button/hero-button.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/05-03/app/app.component.avoid.html', '', 'app/app.component.html')(avoid=1)
:marked

+makeTabs(
  `style-guide/ts/05-03/app/heroes/shared/hero-button/hero-button.component.ts,
  style-guide/ts/05-03/app/app.component.html`,
  'example,',
  `app/heroes/shared/hero-button/hero-button.component.ts,
  app/app.component.html`)
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="05-04"></a>Extract Template and Styles to Their Own Files
  #### <a href="#05-04">Style 05-04</a>

.s-rule.do
  :marked
    **Do** extract templates and styles into a separate file, when more than 3 lines.

.s-rule.do
  :marked
    **Do** name the template file `[component-name].component.html`, where [component-name] is our component name.

.s-rule.do
  :marked
    **Do** name the style file `[component-name].component.css`, where [component-name] is our component name.

.s-why
  :marked
    **Why?** Syntax hints for inline templates in (*.js and *.ts) code files are not supported by some editors.

.s-why.s-why-last
  :marked
    **Why?** A component file's logic is easier to read when not mixed with inline template and styles.

+makeExample('style-guide/ts/05-04/app/heroes/heroes.component.avoid.ts', 'example', 'app/heroes/heroes.component.ts')(avoid=1)
:marked

+makeTabs(
  `style-guide/ts/05-04/app/heroes/heroes.component.ts,
  style-guide/ts/05-04/app/heroes/heroes.component.html,
  style-guide/ts/05-04/app/heroes/heroes.component.css`,
  'example,,',
  `app/heroes/heroes.component.ts,
  app/heroes/heroes.component.html,
  app/heroes/heroes.component.css`)
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="05-12"></a>Decorate Input and Output Properties Inline
  #### <a href="#05-12">Style 05-12</a>

.s-rule.do
  :marked
    **Do** use [`@Input`](https://angular.io/docs/ts/latest/api/core/index/Input-var.html) and [`@Output`](https://angular.io/docs/ts/latest/api/core/index/Output-var.html) instead of the `inputs` and `outputs` properties of the [`@Directive`](https://angular.io/docs/ts/latest/api/core/index/Directive-decorator.html) and [`@Component`](https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html) decorators:

.s-rule.do
  :marked
    **Do** place the `@Input()` or `@Output()` on the same line as the property they decorate.

.s-why
  :marked
    **Why?** It is easier and more readable to identify which properties in a class are inputs or outputs.

.s-why
  :marked
    **Why?** If we ever need to rename the property or event name associated to [`@Input`](https://angular.io/docs/ts/latest/api/core/index/Input-var.html) or [`@Output`](https://angular.io/docs/ts/latest/api/core/index/Output-var.html) we can modify it on a single place.

.s-why
  :marked
    **Why?** The metadata declaration attached to the directive is shorter and thus more readable.

.s-why.s-why-last
  :marked
    **Why?** Placing the decorator on the same line makes for shorter code and still easily identifies the property as an input or output.

+makeExample('style-guide/ts/05-12/app/heroes/shared/hero-button/hero-button.component.avoid.ts', 'example', 'app/heroes/shared/hero-button/hero-button.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/05-12/app/heroes/shared/hero-button/hero-button.component.ts', 'example', 'app/heroes/shared/hero-button/hero-button.component.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="05-13"></a>Avoid Renaming Inputs and Outputs
  #### <a href="#05-13">Style 05-13</a>

.s-rule.avoid
  :marked
    **Avoid** renaming inputs and outputs, when possible.

.s-why.s-why-last
  :marked
    **Why?** May lead to confusion when the output or the input properties of a given directive are named a given way but exported differently as a public API.

+makeExample('style-guide/ts/05-13/app/heroes/shared/hero-button/hero-button.component.avoid.ts', 'example', 'app/heroes/shared/hero-button/hero-button.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/05-13/app/app.component.avoid.html', '', 'app/app.component.html')(avoid=1)
:marked

+makeTabs(
  `style-guide/ts/05-13/app/heroes/shared/hero-button/hero-button.component.ts,
  style-guide/ts/05-13/app/app.component.html`,
  'example,',
  `app/heroes/shared/hero-button/hero-button.component.ts,
  app/app.component.html`)
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="05-14"></a>Member Sequence
  #### <a href="#05-14">Style 05-14</a>

.s-rule.do
  :marked
    **Do** place properties up top followed by methods.

.s-rule.do
  :marked
    **Do** place private members after public members, alphabetized.

.s-why.s-why-last
  :marked
    **Why?** Placing members in a consistent sequence makes it easy to read and helps we instantly identify which members of the component serve which purpose.

+makeExample('style-guide/ts/05-14/app/shared/toast/toast.component.avoid.ts', 'example', 'app/shared/toast/toast.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/05-14/app/shared/toast/toast.component.ts', 'example', 'app/shared/toast/toast.component.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="05-15"></a>Put Logic in Services
  #### <a href="#05-14">Style 05-15</a>

.s-rule.do
  :marked
    **Do** limit logic in a component to only that required for the view. All other logic should be delegated to services.

.s-rule.do
  :marked
    **Do** move reusable logic to services and keep components simple and focused on their intended purpose.

.s-why
  :marked
    **Why?** Logic may be reused by multiple components when placed within a service and exposed via a function.

.s-why
  :marked
    **Why?** Logic in a service can more easily be isolated in a unit test, while the calling logic in the component can be easily mocked.

.s-why
  :marked
    **Why?** Removes dependencies and hides implementation details from the component.

.s-why.s-why-last
  :marked
    **Why?** Keeps the component slim, trim, and focused.

+makeExample('style-guide/ts/05-15/app/heroes/hero-list/hero-list.component.avoid.ts', '', 'app/heroes/hero-list/hero-list.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/05-15/app/heroes/hero-list/hero-list.component.ts', 'example', 'app/heroes/hero-list/hero-list.component.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="05-16"></a>Don't Prefix Output Properties
  #### <a href="#05-16">Style 05-16</a>

.s-rule.do
  :marked
    **Do** name events without the prefix `on`.

.s-rule.do
  :marked
    **Do** name our event handler methods with the prefix `on` followed by the event name.

.s-why
  :marked
    **Why?** This is consistent with built-in events such as button clicks.

.s-why.s-why-last
  :marked
    **Why?** Angular allows for an [alternative syntax](https://angular.io/docs/ts/latest/guide/template-syntax.html#!#binding-syntax) `on-*`. If the event itself was prefixed with `on` this would result in an `on-onEvent` binding expression.

+makeExample('style-guide/ts/05-16/app/heroes/hero.component.avoid.ts', 'example', 'app/heroes/hero.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/05-16/app/app.component.avoid.html', '', 'app/app.component.html')(avoid=1)
:marked

+makeTabs(
  `style-guide/ts/05-16/app/heroes/hero.component.ts,
  style-guide/ts/05-16/app/app.component.html`,
  'example,',
  `app/heroes/hero.component.ts,
  app/app.component.html`)
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="05-17"></a>Put Presentation Logic in the Component Class
  #### <a href="#05-17">Style 05-17</a>

.s-rule.do
  :marked
    **Do** put presentation logic in the Component class, and not in the template.

.s-why
  :marked
    **Why?** Logic will be contained in one place (the Component class) instead of being spread in two places.

.s-why.s-why-last
  :marked
    **Why?** Keeping the component's presentation logic in the class instead of the template improves testability, maintainability, and reusability.

+makeExample('style-guide/ts/05-17/app/heroes/hero-list/hero-list.component.avoid.ts', 'example', 'app/heroes/hero-list/hero-list.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/05-17/app/heroes/hero-list/hero-list.component.ts', 'example', 'app/heroes/hero-list/hero-list.component.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ## Directives

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="06-01"></a>Use Directives to Enhance an Existing Element
  #### <a href="#06-01">Style 06-01</a>

.s-rule.do
  :marked
    **Do** use attribute directives when you have presentation logic without a template.

.s-why
  :marked
    **Why?** Attributes directives don't have an associated template.

.s-why.s-why-last
  :marked
    **Why?** An element may have more than one attribute directive applied.

+makeExample('style-guide/ts/06-01/app/shared/highlight.directive.ts', 'example', 'app/shared/highlight.directive.ts')
:marked

+makeExample('style-guide/ts/06-01/app/app.component.html', null, 'app/app.component.html')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="06-03"></a>Use HostListener and HostBinding Class Decorators
  #### <a href="#06-03">Style 06-03</a>

.s-rule.do
  :marked
    **Do** use @HostListener and @HostBinding instead of the host property of the @Directive and @Component decorators:

.s-why
  :marked
    **Why?** The property or method name associated with @HostBinding or respectively @HostListener should be modified only in a single place - in the directive's class. In contrast if we use host we need to modify both the property declaration inside the controller, and the metadata associated to the directive.

.s-why.s-why-last
  :marked
    **Why?** The metadata declaration attached to the directive is shorter and thus more readable.

+makeExample('style-guide/ts/06-03/app/shared/validator.directive.avoid.ts', 'example', 'app/shared/validator.directive.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/06-03/app/shared/validator.directive.ts', 'example', 'app/shared/validator.directive.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ## Services

  ### <a id="07-01"></a>Services are Singletons in Same Injector
  #### <a href="#07-01">Style 07-01</a>

.s-rule.do
  :marked
    **Do** use services as singletons within the same injector. Use them for sharing data and functionality.

.s-why
  :marked
    **Why?** Services are ideal for sharing methods across a feature area or an app.

.s-why.s-why-last
  :marked
    **Why?** Services are ideal for sharing stateful in-memory data.

+makeExample('style-guide/ts/07-01/app/heroes/shared/hero.service.ts', 'example', 'app/heroes/shared/hero.service.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="07-02"></a>Single Responsibility
  #### <a href="#07-02">Style 07-02</a>

.s-rule.do
  :marked
    **Do** create services with a single responsibility that is encapsulated by its context.

.s-rule.do
  :marked
    **Do** create a new service once the service begins to exceed that singular purpose.

.s-why
  :marked
    **Why?** When a service has multiple responsibilities, it becomes difficult to test.

.s-why.s-why-last
  :marked
    **Why?** When a service has multiple responsibilities, every Component or Service that injects it now carries the weight of them all.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="07-03"></a>Providing a Service
  #### <a href="#07-03">Style 07-03</a>

.s-rule.do
  :marked
    **Do** provide services to the Angular 2 injector at the top-most component where they will be shared.

.s-why
  :marked
    **Why?** The Angular 2 injector is hierarchical.

.s-why
  :marked
    **Why?** When providing the service to a top level component, that instance is shared and available to all child components of that top level component.

.s-why
  :marked
    **Why?** This is ideal when a service is sharing methods or state.

.s-why.s-why-last
  :marked
    **Why?** This is not ideal when two different components need different instances of a service. In this scenario it would be better to provide the service at the component level that needs the new and separate instance.

+makeTabs(
  `style-guide/ts/07-03/app/app.component.ts,
  style-guide/ts/07-03/app/heroes/hero-list/hero-list.component.ts`,
  '',
  `app/app.component.ts,
  app/heroes/hero-list/hero-list.component.ts`)
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="07-04"></a>Use the @Injectable() Class Decorator
  #### <a href="#07-04">Style 07-04</a>

.s-rule.do
  :marked
    **Do** use the `@Injectable` class decorator instead of the `@Inject` parameter decorator when using types as tokens for the dependencies of a service.

.s-why
  :marked
    **Why?** The Angular DI mechanism resolves all the dependencies of our services based on their types declared with the services' constructors.

.s-why.s-why-last
  :marked
    **Why?** When a service accepts only dependencies associated with type tokens, the `@Injectable()` syntax is much less verbose compared to using `@Inject()` on each individual constructor parameter.

+makeExample('style-guide/ts/07-04/app/heroes/shared/hero-arena.service.avoid.ts', 'example', 'app/heroes/shared/hero-arena.service.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/07-04/app/heroes/shared/hero-arena.service.ts', 'example', 'app/heroes/shared/hero-arena.service.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ## Data Services

  ### <a id="08-01"></a>Separate Data Calls
  #### <a href="#08-01">Style 08-01</a>

.s-rule.do
  :marked
    **Do** refactor logic for making data operations and interacting with data to a service.

.s-rule.do
  :marked
    **Do** make data services responsible for XHR calls, local storage, stashing in memory, or any other data operations.

.s-why
  :marked
    **Why?** The component's responsibility is for the presentation and gathering of information for the view. It should not care how it gets the data, just that it knows who to ask for it. Separating the data services moves the logic on how to get it to the data service, and lets the component be simpler and more focused on the view.

.s-why
  :marked
    **Why?** This makes it easier to test (mock or real) the data calls when testing a component that uses a data service.

.s-why.s-why-last
  :marked
    **Why?** Data service implementation may have very specific code to handle the data repository. This may include headers, how to talk to the data, or other services such as `Http`. Separating the logic into a data service encapsulates this logic in a single place hiding the implementation from the outside consumers (perhaps a component), also making it easier to change the implementation.

a(href="#toc") Back to top

.l-main-section
:marked
  ## Lifecycle Hooks

  Use Lifecycle Hooks to tap into important events exposed by Angular.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="09-01"></a>Implement Lifecycle Hooks Interfaces
  #### <a href="#09-01">Style 09-01</a>

.s-rule.do
  :marked
    **Do** implement the lifecycle hook interfaces.

.s-why.s-why-last
  :marked
    **Why?** We get strong typing for the method signatures.
    The compiler and editor can call our attention to misspellings.

+makeExample('style-guide/ts/09-01/app/heroes/shared/hero-button/hero-button.component.avoid.ts', 'example', 'app/heroes/shared/hero-button/hero-button.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/09-01/app/heroes/shared/hero-button/hero-button.component.ts', 'example', 'app/heroes/shared/hero-button/hero-button.component.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ## Appendix

  Useful tools and tips for Angular 2.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="A-01"></a>Codelyzer
  #### <a href="#A-01">Style A-01</a>

.s-rule.do
  :marked
    **Do** use [codelyzer](https://www.npmjs.com/package/codelyzer) to follow this guide.

.s-rule.consider
  :marked
    **Consider** adjusting the rules in codelyzer to suit your needs.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="A-02"></a>File Templates and Snippets
  #### <a href="#A-02">Style A-02</a>

.s-rule.do
  :marked
    **Do** use file templates or snippets to help follow consistent styles and patterns. Here are templates and/or snippets for some of the web development editors and IDEs.

.s-rule.consider
  :marked
    **Consider** using [snippets](https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2) for [Visual Studio Code](https://code.visualstudio.com/) that follow these styles and guidelines.

    <a href="https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2">
      <img src="https://github.com/johnpapa/vscode-angular2-snippets/raw/master/images/use-extension.gif", width="80%", alt="Use Extension">
    </a>  

    **Consider** using [snippets](https://atom.io/packages/angular-2-typescript-snippets) for [Atom](https://atom.io/) that follow these styles and guidelines.

    **Consider** using [snippets](https://github.com/orizens/sublime-angular2-snippets) for [Sublime Text](http://www.sublimetext.com/) that follow these styles and guidelines.

    **Consider** using [snippets](https://github.com/mhartington/vim-angular2-snippets) for [Vim](http://www.vim.org/) that follow these styles and guidelines.

a(href="#toc") Back to top
