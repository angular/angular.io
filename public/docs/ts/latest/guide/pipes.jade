block includes
  include ../_util-fns

:marked
  Every application starts out with what seems like a simple task: get data, transform them, and show them to users.
  Getting data could be as simple as creating a local variable or as complex as streaming data over a Websocket.

  Once data arrive, we could push their raw `toString` values directly to the view.
  That rarely makes for a good user experience.
  E.g., almost everyone prefers a simple birthday date like
  <samp>April 15, 1988</samp> to the original raw string format
  &mdash; <samp>Fri Apr 15 1988 00:00:00 GMT-0700 (Pacific Daylight Time)</samp>.

  Clearly some values benefit from a bit of massage. We soon discover that we
  desire many of the same transformations repeatedly, both within and across many applications.
  We almost think of them as styles.
  In fact, we'd like to apply them in our HTML templates as we do styles.

  Introducing Angular pipes, a way to write display-value transformations that we can declare in our HTML!
  Try the <live-example></live-example>.

.l-main-section
:marked
  ## Using Pipes

  A pipe takes in data as input and transforms it to a desired output.
  We'll illustrate by transforming a component's birthday property into
  a human-friendly date.

+makeExample('pipes/ts/src/app/hero-birthday1.component.ts', null, 'src/app/hero-birthday1.component.ts')(format='.')

:marked
  Focus on the component's template.

+makeExample('pipes/ts/src/app/app.component.html', 'hero-birthday-template')(format=".")

:marked
  Inside the interpolation expression we flow the component's `birthday` value through the
  [pipe operator](./template-syntax.html#pipe) ( | ) to the [Date pipe](../api/common/index/DatePipe-pipe.html)
  function on the right. All pipes work this way.

.l-sub-section
  :marked
    The `Date` and `Currency` pipes need the **ECMAScript Internationalization API**.
    Safari and other older browsers don't support it. We can add support with a polyfill.

  code-example(language="html").
    &lt;script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=Intl.~locale.en"&gt;&lt;/script&gt;

.l-main-section
:marked
  ## Built-in pipes
  Angular comes with a stock of pipes such as
  `DatePipe`, `UpperCasePipe`, `LowerCasePipe`, `CurrencyPipe`, and `PercentPipe`.
  They are all immediately available for use in any template.

.l-sub-section
  :marked
    Learn more about these and many other built-in pipes in the [API Reference](../api/#!?query=pipe);
    filter for entries that include the word "pipe".

    Angular doesn't have a `FilterPipe` or an `OrderByPipe` for reasons explained in an [appendix below](#no-filter-pipe).

.l-main-section
:marked
  ## Parameterizing a Pipe

  A pipe may accept any number of optional parameters to fine-tune its output.
  We add parameters to a pipe by following the pipe name with a colon ( : ) and then the parameter value
  (e.g., `currency:'EUR'`). If our pipe accepts multiple parameters, we separate the values with colons (e.g. `slice:1:5`)

  We'll modify our birthday template to give the date pipe a format parameter.
  After formatting the hero's April 15th birthday, it should render as **<samp>04/15/88</samp>**:

+makeExample('pipes/ts/src/app/app.component.html', 'format-birthday')(format=".")

:marked
  The parameter value can be any valid
  [template expression](./template-syntax.html#template-expressions)
  such as a string literal or a component property.
  In other words, we can control the format through a binding the same way we control the birthday value through a binding.

  Let's write a second component that *binds* the pipe's format parameter
  to the component's `format` property. Here's the template for that component:

+makeExample('pipes/ts/src/app/hero-birthday2.component.ts', 'template', 'src/app/hero-birthday2.component.ts (template)')(format=".")

:marked
  We also added a button to the template and bound its click event to the component's `toggleFormat()` method.
  That method toggles the component's `format` property between a short form
  (`'shortDate'`) and a longer form (`'fullDate'`).

+makeExample('pipes/ts/src/app/hero-birthday2.component.ts', 'class', 'src/app/hero-birthday2.component.ts (class)')(format='.')

:marked
  As we click the button, the displayed date alternates between
  "**<samp>04/15/1988</samp>**" and
  "**<samp>Friday, April 15, 1988</samp>**".

figure.image-display
    img(src='/resources/images/devguide/pipes/date-format-toggle-anim.gif' alt="Date Format Toggle")
:marked

.l-sub-section
  :marked
    Learn more about the `DatePipe` format options in the [API Docs](../api/common/index/DatePipe-pipe.html).

:marked
  ## Chaining pipes

  We can chain pipes together in potentially useful combinations.
  In the following example, we chain the birthday to the `DatePipe` and on to the `UpperCasePipe`
  so we can display the birthday in uppercase. The following birthday displays as
  **<samp>APR 15, 1988</samp>**.

+makeExample('pipes/ts/src/app/app.component.html', 'chained-birthday')(format=".")

:marked
  This example &mdash; which displays **<samp>FRIDAY, APRIL 15, 1988</samp>** &mdash;
  chains the same pipes as above, but passes in a parameter to `date` as well.

+makeExample('pipes/ts/src/app/app.component.html', 'chained-parameter-birthday')(format=".")

.l-main-section
:marked
  ## Custom Pipes

  We can write our own custom pipes.
  Here's a custom pipe named `ExponentialStrengthPipe` that can boost a hero's powers:

+makeExample('pipes/ts/src/app/exponential-strength.pipe.ts', null, 'src/app/exponential-strength.pipe.ts')(format=".")

:marked
  This pipe definition reveals several key points:

  * A pipe is a class decorated with pipe metadata.

  * The pipe class implements the `PipeTransform` interface's `transform` method that
  accepts an input value followed by optional parameters and returns the transformed value.

  * There will be one additional argument to the `transform` method for each parameter passed to the pipe.
  Our pipe has one such parameter: the `exponent`.

  * We tell Angular that this is a pipe by applying the
  `@Pipe` #{_decorator} which we import from the core Angular library.

  * The `@Pipe` #{_decorator} allows us to define the
     pipe name that we'll use within template expressions. It must be a valid JavaScript identifier.
     Our pipe's name is `exponentialStrength`.

.l-sub-section
  :marked
    ### The *PipeTransform* Interface

    The `transform` method is essential to a pipe.
    The `PipeTransform` *interface* defines that method and guides both tooling and the compiler.
    It is technically optional; Angular looks for and executes the `transform` method regardless.

:marked
  Now we need a component to demonstrate our pipe.
+makeExample('pipes/ts/src/app/power-booster.component.ts',null,'src/app/power-booster.component.ts')(format='.')
figure.image-display
    img(src='/resources/images/devguide/pipes/power-booster.png' alt="Power Booster")

- var _decls = _docsFor == 'dart' ? 'pipes' : 'declarations';
- var _appMod = _docsFor == 'dart' ? '@Component' : 'AppModule';
:marked
  Two things to note:

  1. We use our custom pipe the same way we use built-in pipes.
  1. We must include our pipe in the `!{_decls}` #{_array} of the `!{_appMod}`.

.callout.is-helpful
  header Remember the !{_decls} #{_array}!
  :marked
    Angular reports an error if we neglect to list our custom pipe.
    We didn't list the `DatePipe` in our previous example because all
    Angular built-in pipes are pre-registered.
    Custom pipes must be registered manually.

:marked
  If we try the <live-example></live-example>,
  we can probe its behavior by changing the value and the optional exponent in the template.

  ## Power Boost Calculator (extra-credit)

  It's not much fun updating the template to test our custom pipe.
  We could upgrade the example to a "Power Boost Calculator" that combines
  our pipe and two-way data binding with `ngModel`.

+makeExample('src/app/power-boost-calculator.component.ts')

figure.image-display
    img(src='/resources/images/devguide/pipes/power-boost-calculator-anim.gif' alt="Power Boost Calculator")

.l-main-section
a#change-detection
:marked
  ## Pipes and Change Detection

  Angular looks for changes to data-bound values through a *change detection* process that runs after every JavaScript event:
  every keystroke, mouse move, timer tick, and server response. This could be expensive.
  Angular strives to lower the cost whenever possible and appropriate.

  Angular picks a simpler, faster change detection algorithm when we use a pipe. Let's see how.

  ### No pipe

  The component in our next example uses the default, aggressive change detection strategy to monitor and update
  its display of every hero in the `heroes` #{_array}. Here's the template:

+makeExample('pipes/ts/src/app/flying-heroes.component.html', 'template-1', 'src/app/flying-heroes.component.html (v1)')(format='.')

:marked
  The companion component class provides heroes, adds new heroes into the #{_array}, and can reset the #{_array}.
+makeExample('pipes/ts/src/app/flying-heroes.component.ts', 'v1', 'src/app/flying-heroes.component.ts (v1)')(format='.')

:marked
  We can add a new hero and Angular updates the display when we do.
  The `reset` button replaces `heroes` with a new #{_array} of the original heroes and Angular updates the display when we do.
  If we added the ability to remove or change a hero, Angular would detect those changes too and update the display as well.

  ### Flying Heroes pipe

  Let's add a `FlyingHeroesPipe` to the `*ngFor` repeater that filters the list of heroes to just those heroes who can fly.
+makeExample('pipes/ts/src/app/flying-heroes.component.html', 'template-flying-heroes', 'src/app/flying-heroes.component.html (flyers)')(format='.')
:marked
  Here's the `FlyingHeroesPipe` implementation which follows the pattern for custom pipes we saw earlier.
+makeExample('pipes/ts/src/app/flying-heroes.pipe.ts', 'pure', 'src/app/flying-heroes.pipe.ts')(format='.')

:marked
  When we run the sample now we see odd behavior (try it in the <live-example></live-example>).
  Every hero we add is a flying hero but none of them are displayed.

  Although we're not getting the behavior we want, Angular isn't broken.
  It's just using a different change detection algorithm &mdash; one that ignores changes to the list or any of its items.

  Look at how we're adding a new hero:
+makeExample('pipes/ts/src/app/flying-heroes.component.ts', 'push')(format='.')
:marked
  We're adding the new hero into the `heroes` #{_array}.  The reference to the #{_array} hasn't changed.
  It's the same #{_array}. That's all Angular cares about. From its perspective, *same #{_array}, no change, no display update*.

  We can fix that. Let's create a new #{_array} with the new hero appended and assign that to `heroes`.
  This time Angular detects that the #{_array} reference has changed.
  It executes the pipe and updates the display with the new #{_array} which includes the new flying hero.

  *If we **mutate** the #{_array}, no pipe is invoked and no display updated;
  if we **replace** the #{_array}, then the pipe executes and the display is updated*.
  The *Flying Heroes* extends the
  code with checkbox switches and additional displays to help us experience these effects.

figure.image-display
    img(src='/resources/images/devguide/pipes/flying-heroes-anim.gif' alt="Flying Heroes")

:marked
  Replacing the #{_array} is an efficient way to signal to Angular that it should update the display.
  When do we replace the #{_array}? When the data change.
  That's an easy rule to follow in *this toy* example
  where the only way to change the data is by adding a new hero.

  More often we don't know when the data have changed,
  especially in applications that mutate data in many ways,
  perhaps in application locations far away.
  A component in such an application usually can't know about those changes.
  Moreover, it's unwise to distort our component design to accommodate a pipe.
  We strive as much as possible to keep the component class independent of the HTML.
  The component should be unaware of pipes.

  Perhaps we should consider a different kind of pipe for filtering flying heroes, an *impure pipe*.

.l-main-section
:marked
  ## Pure and Impure Pipes

  There are two categories of pipes: **pure** and **impure**.
  Pipes are pure by default. Every pipe we've seen so far has been pure.
  We make a pipe impure by setting its pure flag to false. We could make the `FlyingHeroesPipe`
  impure like this:

+makeExample('pipes/ts/src/app/flying-heroes.pipe.ts', 'pipe-decorator')(format='.')

:marked
  Before we do that, let's understand the difference between *pure* and *impure*, starting with a *pure* pipe.

  ### Pure pipes

block pure-change
  :marked
    Angular executes a *pure pipe* only when it detects a *pure change* to the input value.
    A ***pure change*** is *either* a change to a primitive input value (`String`, `Number`, `Boolean`, `Symbol`)
    *or* a changed object reference (`Date`, `Array`, `Function`, `Object`).

:marked
  Angular ignores changes *within* (composite) objects.
  It won't call a pure pipe if we change an input month, add to an input #{_array}, or update an input object property.

  This may seem restrictive but is is also fast.
  An object reference check is fast &mdash; much faster than a deep check for
  differences &mdash; so Angular can quickly determine if it can skip both the
  pipe execution and a view update.

  For this reason, we prefer a pure pipe if we can live with the change detection strategy.
  When we can't, we *may* turn to the impure pipe.

.l-sub-section
  :marked
    Or we might not use a pipe at all.
    It may be better to pursue the pipe's purpose with a property of the component,
    a point we take up later.
    
:marked
  ### Impure pipes

  Angular executes an *impure pipe*  during *every* component change detection cycle.
  An impure pipe will be called a lot, as often as every keystroke or mouse-move.

  With that concern in mind, we must implement an impure pipe with great care.
  An expensive, long-running pipe could destroy the user experience.

  <a id="impure-flying-heroes"></a>
  ### An impure *FlyingHeroesPipe*

  A flip of the switch turns our `FlyingHeroesPipe` into a `FlyingHeroesImpurePipe`.
  Here's the complete implementation:
+makeTabs(
  'pipes/ts/src/app/flying-heroes.pipe.ts, pipes/ts/src/app/flying-heroes.pipe.ts',
  'impure, pure',
  'FlyingHeroesImpurePipe, FlyingHeroesPipe')(format='.')

:marked
  We inherit from `FlyingHeroesPipe` to prove the point that nothing changed internally.
  The only difference is the `pure` flag in the pipe metadata.

  This is a good candidate for an impure pipe because the `transform` function is trivial and fast.

+makeExcerpt('src/app/flying-heroes.pipe.ts','filter', '')

:marked
  We can derive a `FlyingHeroesImpureComponent` from `FlyingHeroesComponent`.

- var _fnSuffix = _docsFor == 'dart' ? '.component.ts' : '-impure.component.html';
- var _region = _docsFor == 'dart' ? 'impure-component' : 'template-flying-heroes';
+makeExcerpt('src/app/flying-heroes' + _fnSuffix + ' (excerpt)', _region)

:marked
  The only substantive change is the pipe in the template.
  We can confirm in the <live-example></live-example> that the _flying heroes_
  display updates as we enter new heroes even when we mutate the `heroes` #{_array}.

- var _dollar = _docsFor === 'ts' ? '$' : '';
h3#async-pipe The impure #[i AsyncPipe]
:marked
  The Angular `AsyncPipe` is an interesting example of an impure pipe.
  The `AsyncPipe` accepts a `#{_Promise}` or `#{_Observable}` as input
  and subscribes to the input automatically, eventually returning the emitted value(s).

  It is also stateful.
  The pipe maintains a subscription to the input `#{_Observable}` and
  keeps delivering values from that `#{_Observable}` as they arrive.

  In this next example, we bind an `#{_Observable}` of message strings 
  (`message#{_dollar}`) to a view with the `async` pipe.

+makeExample('pipes/ts/src/app/hero-async-message.component.ts', null, 'src/app/hero-async-message.component.ts')

:marked
  The Async pipe saves boilerplate in the component code.
  The component doesn't have to subscribe to the async data source,
  it doesn't extract the resolved values and expose them for binding,
  and the component doesn't have to unsubscribe when it is destroyed
  (a potent source of memory leaks).

  ### An impure caching pipe

  Let's write one more impure pipe, a pipe that makes an HTTP request.

  Remember that impure pipes are called every few milliseconds.
  If we're not careful, this pipe will punish the server with requests.

  We are careful. 
  The pipe only calls the server when the request URL changes and it caches the server response.
  Here's the code<span if-docs="ts">, which uses the [Angular http](server-communication.html) client to retrieve data</span>:

+makeExample('src/app/fetch-json.pipe.ts')
:marked
  Then we demonstrate it in a harness component whose template defines two bindings to this pipe,
  both requesting the heroes from the `heroes.json` file.

+makeExample('src/app/hero-list.component.ts')  
:marked
  The component renders like this:

figure.image-display
    img(src='/resources/images/devguide/pipes/hero-list.png' alt="Hero List")

:marked
  A breakpoint on the pipe's request for data shows that
  * each binding gets its own pipe instance
  * each pipe instance caches its own url and data
  * each pipe instance only calls the server once

  ### *JsonPipe*

  The second `fetch` pipe binding above demonstrates more pipe chaining.
  It displays the same hero data in JSON format by chaining through to the built-in `JsonPipe`.

.callout.is-helpful
  header Debugging with the json pipe
  :marked
    The [JsonPipe](../api/common/index/JsonPipe-pipe.html)
    provides an easy way to diagnosis a mysteriously failing data binding or
    inspect an object for future binding.

a#pure-pipe-pure-fn
:marked
  ### Pure pipes and pure functions

  A pure pipe uses pure functions.
  Pure functions process inputs and return values without detectable side-effects.
  Given the same input they should always return the same output.

  The pipes we saw earlier in this chapter were implemented with pure functions.
  The built-in `DatePipe` is a pure pipe with a pure function implementation.
  So is our `ExponentialStrengthPipe`.
  So is our `FlyingHeroesPipe`.
  A few steps back we reviewed the `FlyingHeroesImpurePipe` &mdash; *an impure pipe with a pure function*.
  
  But a *pure pipe* must always be implemented with a *pure function*. Failure to heed this warning will bring about many a console errors regarding expressions that have changed after they were checked.

.l-main-section
:marked
  ## Next Steps

  Pipes are a great way to encapsulate and share common display-value
  transformations. We use them like styles, dropping them
  into our templates expressions to enrich the appeal and usability
  of our views.

  Explore Angular's inventory of built-in pipes in the [API Reference](../api/#!?query=pipe).
  Try writing a custom pipe and perhaps contributing it to the community.

a(id="no-filter-pipe")
.l-main-section
:marked
  ## No *FilterPipe* or *OrderByPipe*

  Angular does not ship with pipes for filtering or sorting lists.
  Developers familiar with AngularJS know these as `filter` and `orderBy`.
  There are no equivalents in Angular.

  This is not an oversight. Angular is unlikely to offer such pipes because
  (a) they perform poorly and (b) they prevent aggressive minification.
  Both `filter` and `orderBy` require parameters that reference object properties.
  We learned earlier that such pipes must be  [*impure*](#pure-and-impure-pipes) and that
  Angular calls impure pipes in almost every change detection cycle.

  Filtering and especially sorting are expensive operations.
  The user experience can degrade severely for even moderate sized lists when Angular calls these pipe methods many times per second.
  The `filter` and `orderBy` have often been abused in AngularJS apps, leading to complaints that Angular itself is slow.
  That charge is fair in the indirect sense that AngularJS prepared this performance trap
  by offering `filter` and `orderBy` in the first place.

  The minification hazard is also compelling if less obvious. Imagine a sorting pipe applied to a list of heroes.
  We might sort the list by hero `name` and `planet` of origin properties something like this:
code-example(language="html")
  &lt;!-- NOT REAL CODE! -->
  &lt;div *ngFor="let hero of heroes | orderBy:'name,planet'">&lt;/div>
:marked
  We identify the sort fields by text strings, expecting the pipe to reference a property value by indexing
  (e.g., `hero['name']`).
  Unfortunately, aggressive minification *munges* the `Hero` property names so that `Hero.name` and `Hero.planet`
  becomes something like `Hero.a` and `Hero.b`. Clearly `hero['name']` is not going to work.

  Some of us may not care to minify this aggressively. That's *our* choice.
  But the Angular product should not prevent someone else from minifying aggressively.
  Therefore, the Angular team decided that everything shipped in Angular will minify safely.

  The Angular team and many experienced Angular developers strongly recommend that you move
  filtering and sorting logic into the component itself.
  The component can expose a `filteredHeroes` or `sortedHeroes` property and take control
  over when and how often to execute the supporting logic.
  Any capabilities that you would have put in a pipe and shared across the app can be
  written in a filtering/sorting service and injected into the component.

  If these performance and minification considerations do not apply to you, you can always create your own such pipes
  (along the lines of the [FlyingHeroesPipe](#impure-flying-heroes)) or find them in the community.
