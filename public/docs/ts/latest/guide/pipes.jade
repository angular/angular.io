include ../../../../_includes/_util-fns
:marked
  Every application starts out with what seems like a simple task: get data, transform them, and show them to users.

  Getting data could be as simple as creating a local variable or as complex as streaming data over a Websocket.

  Once data arrive, we could push their raw `toString` values directly to screen.
  That rarely makes for a good user experience.
  Almost everyone prefers a simple birthday date
  (<span style="font-family:courier">April 15, 1988</span>) to the original raw string format
  ( <span style="font-family:courier">Fri Apr 15 1988 00:00:00 GMT-0700 (Pacific Daylight Time)</span> ).

  Clearly some values benefit from a bit of massage. We soon discover that we
  desire many of the same transformations repeatedly, both within and across many applications.
  We almost think of them as styles.
  In fact, we'd like to apply them in our HTML templates as we do styles.

  Welcome, Angular pipes, the simple display-value transformations that we can declare in our HTML!
  
  [Live Example](/resources/live-examples/pipes/ts/plnkr.html).

.l-main-section
:marked
  ## Using Pipes

  A pipe takes in data as input and transforms it to a desired output.
  We'll illustrate by transforming a component's birthday property into
  a human-friendly date:
+makeExample('pipes/ts/app/hero-birthday1.component.ts', null, 'app/hero-birthday1.component.ts')

:marked
  Focus on the component's template. 
+makeExample('pipes/ts/app/app.component.html', 'hero-birthday-template')(format=".")
:marked
  Inside the interpolation expression we flow the component's `birthday` value through the
  [pipe operator](./template-syntax.html#pipe) ( | ) to the [Date pipe](../api/common/DatePipe-class.html) 
  function on the right. All pipes work this way.

.l-main-section
:marked
  ## Built-in pipes
  Angular comes with a stock set of pipes such as
  `DatePipe`, `UpperCasePipe`, `LowerCasePipe`, `CurrencyPipe`, and `PercentPipe`.
  They are all immediately available for use in any template.
.l-sub-section
  :marked
    Learn more about these and many other built-in pipes in the  the [API Reference](../api/);
    filter for entries that include the word "pipe".

.l-main-section
:marked
  ## Parameterizing a Pipe
  A pipe may accept any number of optional parameters to fine-tune its output.

  We add parameters to a pipe by following the pipe name with a colon ( : ) and then the parameter value
  (e.g., `currency:'EUR'`). If our pipe accepts multiple parameters, we separate the values with colons (e.g. `slice:1:5`)

  We'll modify our birthday template to give the date pipe a format parameter.
  After formatting the hero's April 15th birthday should display as **<span style="font-family:courier">04/15/88</span>**.

+makeExample('pipes/ts/app/app.component.html', 'format-birthday')(format=".")

:marked
  The parameter value can be any valid
  [template expression](./template-expression.html#template-expressions)
  such as a string literal or a component property. 
  In other words, we can control the format through a binding the same way we control the birthday value through a binding.
  
  Let's write a second component that *binds* the pipe's format parameter
  to the component's `format` property. Here's the template for that component:
+makeExample('pipes/ts/app/hero-birthday2.component.ts', 'template', 'app/hero-birthday2.component.ts (template)')(format=".")
:marked
  We also added a button to the template and bound its click event to the component's `toggleFormat` method.
  That method toggles the component's `format` property between a short form
  ('shortDate') and a longer form ('fullDate').
+makeExample('pipes/ts/app/hero-birthday2.component.ts', 'class', 'app/hero-birthday2.component.ts (class)')
:marked
  As we click the button, the displayed date alternates between
  "**<span style="font-family:courier">04/15/1988</span>**" and
  "**<span style="font-family:courier">Friday, April 15, 1988</span>**".

figure.image-display
    img(src='/resources/images/devguide/pipes/date-format-toggle-anim.gif' alt="Date Format Toggle")
:marked

.l-sub-section
  :marked
    Learn more about the `DatePipes` format options in the [API Docs](../api/core/DatePipe-class.html).
:marked
  ## Chaining pipes
  We can chain pipes together in potentially useful combinations.
  In the following example, we chain the birthday to the `DatePipe` and on to the `UpperCasePipe`
  so we can display the birthday in uppercase. The following birthday displays as
  **<span style="font-family:courier">APR 15, 1988</span>**

+makeExample('pipes/ts/app/app.component.html', 'chained-birthday')(format=".")

:marked
  If we pass a parameter to a filter, we have to add parentheses
  to help the template compiler with the evaluation order.
  The following example displays
  **<span style="font-family:courier">FRIDAY, APRIL 15, 1988</span>**

+makeExample('pipes/ts/app/app.component.html', 'chained-parameter-birthday')(format=".")

.l-sub-section
  :marked
    We can add parentheses to alter the evaluation order or 
    to provide extra clarity:
  +makeExample('pipes/ts/app/app.component.html', 'chained-parameter-birthday-parens')(format=".")
:marked

.l-main-section
:marked
  ## Custom Pipes

  We can write our own custom pipes.

  Here's a custom pipe named `ExponentialStrengthPipe` that can boost a hero's powers:

+makeExample('pipes/ts/app/exponential-strength.pipe.ts', null, 'app/exponential-strength.pipe.ts')
:marked
  This pipe definition reveals several key points
  
  * A pipe is a class decorated with pipe metadata.
  
  * The pipe class implements the `PipeTransform` interface's `transform` method that
  takes an input value and an optional array of parameter strings and returns the transformed value.

  * There will be one item in the parameter array for each parameter passed to the pipe
  
  * We tell Angular that this is a pipe by applying the
  `@Pipe` decorator which we import from the core Angular library.
  
  * The `@Pipe` decorator takes an object with a name property whose value is the
     pipe name that we'll use within a template expression. It must be a valid JavaScript identifier.
     Our pipe's name is `exponenentialStrength`.

.l-sub-section
  :marked
    ### The *PipeTransform* Interface

    The `transform` method is essential to a pipe. 
    The `PipeTransform` interface defines that method and guides both tooling and the compiler.
    It is optional; Angular looks for and executes the `transform` method regardless.
    
:marked
  Now we need a component to demonstrate our pipe.
+makeExample('pipes/ts/app/power-booster.component.ts',null,'app/power-booster.component.ts')
figure.image-display
    img(src='/resources/images/devguide/pipes/power-booster.png' alt="Power Booster")

:marked
  Two things to note:
  1. We use our custom pipe the same way we use the built-in pipes.

  1. We must list our pipe in the @Component decorator's `pipes` array.

.callout.is-helpful
  header Remember the pipes array!
  :marked
    Angular reports an error if we neglect to list our custom pipe.
    We didn't list the `DatePipe` in our previous example because all
    Angular built-in pipes are pre-registered.
    Custom pipes must be registered manually.
:marked
  If we try the [live code](/resources/live-examples/pipes/ts/plnkr.html) example,
  we can probe its behavior by changing the value and the optional exponent in the template.

  ## Power Boost Calculator (extra-credit)
  It's not much fun updating the template to test our custom pipe.
  We could upgrade the example to a "Power Boost Calculator" that combines
  our pipe and two-way data binding with `ngModel`.

+makeExample('pipes/ts/app/power-boost-calculator.component.ts', null, '/app/power-boost-calculator.component.ts')

figure.image-display
    img(src='/resources/images/devguide/pipes/power-boost-calculator-anim.gif' alt="Power Boost Calculator")
:marked
  ### Pipes and Change Detection
  When writing pipes, it's useful to understand how they are affected by change detection, since if we misunderstand this, we can have a pipe that doesn't behave the way we want. If we misunderstand this process, it's possible to create a pipe that doesn't update the UI when the data changes. Let's look at an example to understand this better.

  Pipes can filter a list of data to a specific subset. Usually this is done on an array. We'll create a pipe that filters a list of heroes to the heroes who can fly.
+makeExample('pipes/ts/app/flying-heroes.pipe.ts', null, 'app/flying-heroes.pipe.ts')

:marked
  This pipe allows us to show only the heroes who can fly, but it's important to understand what's going on under the hood, otherwise when we change the data, the UI won't be updated. The transform function receives the original array of heroes as it's first parameter, which we've named allHeroes, and then calls the filter method on that array. The filter method doesn't change the original array, instead it creates a new array. So the view will actually be bound to an entirely new array. This works fine until you do something like change the original array. Let's assume we want to addea new hero to the master list of heroes. We will do this in the most obvious way, by pushing a new item into the array.

  ```
  this.heroes.push(newHero);
  ```

  At this point, we want our pipe to re-evaluate the master list, and if this new hero can fly, we'll want the new hero to show up in our filtered list that the pipe produces. Unfortunately this won't happen. The change detection system for pipes is reference based. Therefore a pipe is only re-evaluated when the source object is replaced by a new object. We haven't done that. Pushing a new item into an array doesn't create a new array, it simply mutates the existing array. Therefore change detection won't fire for it and the pipe won't be re-evaluated. If we want our pipe to be re-evaluated, we'll actually need to create a new array for the master list of heroes. Thankfully this is easily done just by changing how we add a new item to the array. Instead of using push, which is a mutation operation, we'll use concat, which produces a new array.

  ```
  this.heroes = this.heroes.concat([newHero]);
  ```

  This will replace heroesList with a new array instead of mutating the existing array. 

.callout.is-helpful
  header Variations in Binding Rules
  :marked
    This can be a bit confusing, since if we don't use a pipe, but just have a simple array bound using *ngFor, then using the push function to add a new item to an array works just fine, and the UI updates automatically. But the rules when using a pipe are different. The pipe is only re-evaluated when the reference to the source object is changed.

    This also isn't an issue when we simply change a property in our original array, since the change detection system will be able to detect that and the UI bindings will be updated, but we have to be aware of how this works when dealing with things like the push method on an array.
  
.l-main-section
:marked
  ## Impure Pipes

  There are two categories of pipes: **pure** and **impure**. Pipes are pure by default.
  
  Pure pipes are only evaluated when the change detection system in Angular notices a change to the input of the pipe. 
  This ONLY happens when the pipe is given a new object as input. Simply modifying the existing object won't cause the
  change detection system to fire, and therefore won't re-evaluate the pipe. Pure pipes are most often implemented
  as pure functions that simply return a value without remembering anything or causing detectable side-effects. As a result they are also stateless.
  
  When possible, pipes should be pure. The `DatePipe` in our first example is a pure pipe. So is our custom `ExponentialStrengthPipe`.

  In contrast, impure pipes are evaluated on **every** cycle in Angular. This can be as often
  as every keystroke or mousemove depending on the application. Due to this reality, impure pipes must be implemented with care.
  This also makes impure pipes able to do things that would otherwise be impossible. Let's look at an example.

  ## The impure `AsyncPipe`
  The Angular Async pipe is an interesting example of an impure pipe.
  The Async pipe can receive a Promise or Observable as input
  and subscribe to the input automatically, eventually returning the emitted value(s).

  It is also stateful because the pipe maintains a subscription to the input and its returned values depend on that subscription.

  In the next example, we bind a simple promise to a view with the async pipe.
+makeExample('pipes/ts/app/hero-async-message.component.ts', null, 'app/hero-async-message.component.ts')

:marked
  The Async pipe saves boilerplate in the component code.
  The component doesn't have to subscribe to the async data source,
  it doesn't extract the resolved values and expose them for binding,
  and (in the case of Observable stream sources like `EventEmitter`)
  the component doesn't have to unsubscribe when it is destroyed
  (a potent source of memory leaks).

  ### Implementing an Impure Pipe
  We must declare a pipe to be impure
  by setting the `pure` property of the `@Pipe` decorator to `false`.
  This setting tells Angular’s change detection system to
  check the output of this pipe each cycle, whether its input has changed or not.

  Here's how we'll decorate our new impure `FetchJsonPipe` that
  makes an HTTP `fetch` request and (eventually) displays the data in the server's response:
+makeExample('pipes/ts/app/fetch-json.pipe.ts', 'pipe-metadata','app/fetch-json.pipe.ts (metadata)')
:marked
  Immediately below we have the finished pipe. Its input value is an url to an endpoint that returns a JSON file.
  The pipe makes a one-time async request to the server and eventually receives the JSON response.
+makeExample('pipes/ts/app/fetch-json.pipe.ts', null, 'app/fetch-json.pipe.ts')
:marked
  Next we demonstrate this pipe in a test component whose template defines two bindings
+makeExample('pipes/ts/app/hero-list.component.ts', 'template', 'app/hero-list.component.ts (template)')
:marked
  The component renders like this:
figure.image-display
    img(src='/resources/images/devguide/pipes/hero-list.png' alt="Hero List")
:marked
  The first binding is straight forward. An `ngFor` repeater displays the hero names fetched from a json source file.
  We're piping the literal file name, "heroes.json", through to the custom `fetch` pipe.

  ### JsonPipe
  The second binding uses more pipe chaining.
  We take the same fetched results and display the raw hero data in JSON format 
  by piping to the built-in `JsonPipe`.
  
.callout.is-helpful
  header Debugging with the json pipe
  :marked
    The [JsonPipe](https://angular.io/docs/ts/latest/api/common/JsonPipe-class.html) 
    is an easy way to diagnosis a mysteriously failing data binding.
:marked
  Here's the complete component implementation:
+makeExample('pipes/ts/app/hero-list.component.ts', null, 'app/hero-list.component.ts')
.callout.is-helpful
  header Performance Implications of Impure Pipes
  :marked
    As mentioned previously, impure pipes are run on every cycle, this means that if they do much work, they can quickly bog down our system, as change detection can run as often as every keystroke, or even on mouse movement. Therefore we want them to be as performant as possible. In general they should return quickly if they detect that nothing has changed, as is the case with our FetchJsonPipe. In that example, the first line of code in the transform method checks to see if this.fetchPromise is undefined. If it is then the work is done. That will happen the very first time the pipe is ran. Once that is done, then this.fetchPromise will always be a defined value, so no matter how many times this pipe is evaluated after that, the only code that is run is the if statement which is a very quick check, so it's fine that it will run every time change detection is fired.
    
.l-main-section
:marked
  ## Next Steps

  Pipes are a great way to encapsulate and share common display-value
  transformations. We use them like styles, dropping them
  into our templates expressions to enrich the appeal and usability
  of our views.

  Explore Angular's inventory of built-in pipes in the [API Reference](../api/).
  Try writing a custom pipe and perhaps contributing it to the community.
