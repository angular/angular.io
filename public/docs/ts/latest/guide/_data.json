{
  "_listtype": "ordered",

  "index": {
    "title": "Documentation Overview"
  },

  "architecture": {
    "title": "Architecture Overview",
    "intro": "The basic building blocks of Angular 2 applications"
  },

  "displaying-data": {
    "title": "Displaying Data",
    "intro": "Interpolation and other forms of property binding help us show app data in the UI."
  },

  "user-input": {
    "title": "User Input",
    "intro": "User input triggers DOM events. We listen to those events with event bindings that funnel updated values back into our components and models."
  },

  "forms": {
    "title": "Forms",
    "intro": "A form creates a cohesive, effective, and compelling data entry experience. An Angular form coordinates a set of data-bound user controls, tracks changes, validates input, and presents errors."
  },

  "dependency-injection": {
    "title": "Dependency Injection",
    "intro": "Angular's dependency injection system creates and delivers dependent services \"just-in-time\"."
  },

  "template-syntax": {
    "title": "Template Syntax",
    "intro": "Learn how to write templates that display data and consume user events with the help of data binding."
  },

  "attribute-directives": {
    "title": "Attribute Directives",
    "intro": "Attribute directives attach behavior to elements."
  },

  "hierarchical-dependency-injection": {
    "title": "Hierarchical Injectors",
    "intro": "Angular's hierarchical dependency injection system supports nested injectors in parallel with the component tree."
  },

  "server-communication": {
    "title": "Http Client",
    "intro": "Talk to a remote server with the Angular Http Client."
  },

  "lifecycle-hooks": {
    "title": "Lifecycle Hooks",
    "intro": "Angular calls lifecycle hook methods on directives and components as it creates, changes, and destroys them."
  },

  "npm-packages": {
    "title": "Npm Packages",
    "intro": "Details of the recommended npm packages and the different kinds of package dependencies"
  },

  "pipes": {
    "title": "Pipes",
    "intro": "Pipes transform displayed values within a template."
  },

  "router": {
    "title": "Routing & Navigation",
    "intro": "Discover the basics of screen navigation with the Angular 2 router."
  },

  "structural-directives": {
    "title": "Structural Directives",
    "intro": "Angular has a powerful template engine that lets us easily manipulate the DOM structure of our elements."
  },

  "testing": {
    "title": "Testing",
    "intro": "Techniques and practices for testing an Angular 2 app"
  },

  "upgrade": {
    "title": "Upgrading from 1.x",
    "intro": "Angular 1 applications can be incrementally upgraded to Angular 2."
  },

  "typescript-configuration": {
    "title": "TypeScript Configuration",
    "intro": "TypeScript configuration for Angular 2 developers"
  },

  "glossary": {
    "title": "Glossary",
    "intro": "Brief definitions of the most important words in the Angular 2 vocabulary"
  }
}
