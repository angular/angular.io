block includes
  include ../_util-fns
// https://gist.github.com/StephenFluin/672b85faef772b8102457f4fe5dd02ce
:marked
  In very simple applications, we pile all of the files into one folder. 
  Soon we have too many files to manage this way. 
  We reorganize the files into separate folders by _feature_.
  We come to regard the top level folders as _application modules_. 
  
  Our application modules start to evolve independently, 
  each with its own requirements, development schedule, maybe its own engineering team.
  
  Angular ***App Modules*** help us formalize this independence. 
  Each _App Module_ is its own unit of compilation.
  It can be loaded separately, at application launch, on demand, or only for authorized users.
  We can share _App Modules_ across projects. We can publish them for others to include in _their_ projects.

  Angular itself is organized as a collection of _App Modules_. 
  Angular Forms, HTTP, and Router are examples of optional _App Modules_ that we can add to our application.
  Third Parties such as Firebase and Material Design make their capabilities available as Angular _App Modules_.

  This chapter explains how to **create** _App Modules_ and how to load them, 
  either immediately when **bootstrapping** the application or on-demand via the Router.

## TOPICS
* Every application has a root *AppModule*
* The QuickStart `bootstrap` and its implicit root *AppModule*
* Creating an explict root *AppModule* that loads other modules
* Bootstrapping an explicit root *AppModule*
* Adding custom providers: why and how
* Specifying "ambient" directives and pipes.
* Booting precompiled modules and the `precompile` array
* Creating our own _App Modules_
* Loading _App Modules_ asynchronously with the Router.
