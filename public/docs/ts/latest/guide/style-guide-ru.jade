include ../_util-fns

:marked
  Добро пожаловать в руководство по стилю кода Angular

  ## Цель руководства

  Ищете качественное руководство по синтаусису, структуре приложений и всевозможным соглашениям принятым в Angular?
  Их есть у нас!
  Это "Руководство по стилю" показывает то, какие соглашениями мы считаем предпочтительными, и объясняем почему.
.l-main-section

:marked
  ## Словарь Стиля

  Каждая часть руководства описывает хорошие или плохие практикии все они имеют однотипный стиль представления.

  Формулировка каждой части руководства показывает насколько тот или иной совет рекомендуем на практике (или нет).

.s-rule.do
  :marked
    **Рекомендовано** это одна из тех практик, которых всегда нужно придерживаться.
    _Всегда,_ возможно, не самое подходящее слово, однако таких рекомендаций не так уж и много, как и ситуаций, в которых их можно нарушать.

.s-rule.consider
  :marked
    Рекомендациям **Попробуйте вот так**, как правило, нужно следовать.
    Если вы полностью понимаете смысл рекоменлации и у вас есть веские основания отклониться от нее, тогда вперёд!. Пожалуйста, стремитесь быть последовательными в отклонениях от рекомендаций.

.s-rule.avoid
  :marked
    **Остерегайтесь** это тип рекомендаций указывает на то, что вы почти никогда не должны делать	. Примеры кода, которого стоит *избегать* помечены красной плашкой.
.l-main-section

:marked
  ## Файловая структура

  Некоторые примеры кода показывают файл, у которого есть один или несколько файлов-компаньонов с похожими именами. (например, hero.component.ts и hero.component.html).

  В этом руководстве мы будем использовать ярлыки `hero.component.ts | HTML | CSS | spec` для представления различных файлов. При помощи этих ярлыков мы упростим читаемость и сделаем лаконичнее представления файловых структур в этом руководстве

.l-main-section
a(id='toc')

:marked
  ## Оглавление

    1. [Единственная Обязанность](#single-responsibility)
    1. [Наименование](#naming)
    1. [Coding Conventions](#coding-conventions)
    1. [App Structure and Angular Modules](#app-structure-and-angular-modules)
    1. [Компоненты](#components)
    1. [Директивы](#directives)
    1. [Сервисы](#services)
    1. [Data Services](#data-services)
    1. [Lifecycle Hooks](#lifecycle-hooks)
    1. [Приложение](#appendix)

.l-main-section
:marked
  ## Single Responsibility

  Применяйте [Принцип Единственной Обязанности](https://wikipedia.org/wiki/Single_responsibility_principle) ко всем компонентам, сервисами другим символам. 
  Это поможет сдеать код приложения чище, упростит его читаемость и поддержку, а кроме того, поможет проще его тестировать.

  ### <a id="01-01"></a>Rule of One
  #### <a href="#01-01">Style 01-01</a>
.s-rule.do
  :marked
    **Рекомендуется** определять один компонент в одном файле.

.s-rule.consider
  :marked
    **Попробуйте** ограничить размер файлов до 400 строк кода.

.s-why
  :marked
    **Почему?** Рекомендация относительно разделения одного компонента на один файл улучшает читабельность и облегчает поддержку, а кроме того, помогает избежать непоняток между командами в системах управления версиями исходного кода.

.s-why
  :marked
    **Почему?** Один компонент в одном файле позволяет избежать скрытых ошибок, которые часто возникают при объединении нескольких компонентов в один файл, где они могут использовать одни и те же переменные, создавать нежелательные замыкания или связи с зависимостями.

.s-why.s-why-last
  :marked
    **Почему?** Один компонент может быть экспортом по умолчанию в его же файл, что упростит lazy loading с роутингом.
:marked
  Суть в том, чтобы упростить повторное использование кода, сделать его читабельным и менее подверженным к ошибкам.

  В следующем *плохом* примере определяется `AppComponent`, загружается приложение, определяется объектная модель `Hero`, и загружаются герои с сервера ... и все это в одном файле. *Не делайте так :(*.

+makeExample('style-guide/ts/01-01/app/heroes/hero.component.avoid.ts', '', 'app/heroes/hero.component.ts')(avoid=1)
:marked
  Лучше перераспределить сам компонент и вспомогательную деятельность в отдельные файлы.

+makeTabs(
  `style-guide/ts/01-01/main.ts,
  style-guide/ts/01-01/app/app.module.ts,
  style-guide/ts/01-01/app/app.component.ts,
  style-guide/ts/01-01/app/heroes/heroes.component.ts,
  style-guide/ts/01-01/app/heroes/shared/hero.service.ts,
  style-guide/ts/01-01/app/heroes/shared/hero.model.ts,
  style-guide/ts/01-01/app/heroes/shared/mock-heroes.ts`,
  '',
  `main.ts,
  app/app.module.ts,
  app/app.component.ts,
  app/heroes/heroes.component.ts,
  app/heroes/shared/hero.service.ts,
  app/heroes/shared/hero.model.ts,
  app/heroes/shared/mock-heroes.ts`)

:marked
  С ростом приложения это правило становится только важнее.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="01-02"></a>Небольшие Функции
  #### <a href="#01-02">Style 01-02</a>
.s-rule.do
  :marked
    **Рекомендуется** определять маленькие функции

.s-rule.consider
  :marked
    **Попробуйте** ограничить размер функции до 75 строк.

.s-why
  :marked
    **Почему?** Небольшие функции проще тестировать, особенно когда они выполняют одну функцию и служат для одной цели.

.s-why
  :marked
    **Почему?** Небольшие функции упрощают повторное использование кода.

.s-why
  :marked
    **Почему?** Небольшие фунции проще читать.

.s-why
  :marked
    **Почему?** Небольише функции проще поддерживать.

.s-why.s-why-last
  :marked
    **Почему?** Небольшие функции помогают избежать скрытых ошибок, которые возникают у больших функций, которые разделяют переменные с внешней зоной видимости, создаются нежелательные замыкания или нежелательные связи с зависимостями.

a(href="#toc") Вернуться наверх

.l-main-section
:marked
  ## Присвоение имён

  Соглашения о наименовании очень важны для поддержки и чатабельности кода. Это руководство советует как правильно присваивать имена файлам и сиволам.

.l-main-section
:marked
  ### <a id="02-01"></a>Общие инструкции по присвоению имен
  #### <a href="#02-01">Style 02-01</a>

.s-rule.do
  :marked
    **Рекомендуется** использовать однотипные имена для всех символов.

.s-rule.do
  :marked
    **Рекомендуется** следовать определенной схеме, которая описывает сначала возможности сивола, а потом его тип. Рекомендуемая схема наименования: `feature.type.ts`.

.s-why
  :marked
    **Почему?** Соглашения об именовании помогают ускорить поиск информации. Согласованность в рамках проекта очень важно. Согласованность с командой также имеет важное значение. Согласованность во всей компании плвышает общую эффективность.

.s-why
  :marked
    **Почему?** Эти правила именования просто должны  помочь найти нужный код быстрее и сделать его более понятным.

.s-why.s-why-last
  :marked
    **Почему?** Имена папок и файлов должны четко показывать, что в них содержится и для чего они нужны. Например, `app/heroes/hero-list.component.ts` может содержать компонент, который управляет списком героев.

a(href="#toc") Вернуться наверх

.l-main-section
:marked
  ### <a id="02-02"></a>Разделяйте имена файлов точками и дефисами
  #### <a href="#02-02">Style 02-02</a>

.s-rule.do
  :marked
    **Рекомендуется** использовать дефисы для разделения слов в описательном имени.

.s-rule.do
  :marked
    **Рекомендуется** использовать точки для разделения описательного имени от типа файла.

.s-rule.do
  :marked
    **Рекомендуется** использовать однотипные имена файлов для всех компонентов по одному шаблону, который описаывает сначала возможности компонента, а потом его тип. Рекомендованый шаблон `feature.type.ts`.

.s-rule.do
  :marked
    **Рекомендуется** использовать привычные имена типов, включая `.service`, `.component`, `.pipe`, `.module`, `.directive`. 
    Придумывайте дополнительные имена типов, если необходимо, но будьте осторожны, не создавайте слишком много.

.s-why
  :marked
    **Почему?** Имена типов предоставляют единый метод быстрого определения того, что находится в файле.

.s-why
  :marked
    **Почему?** Это упростит нахождение определенного типа файлов с помощью текстового редактора или встроенного в IDE поиска..

.s-why
  :marked
    **Почему** Несокращённые имена типов, такие как `.service` описательны и недвусмысленны.
    Сокращения, такие как `.srv`,` .svc`, и `.services` могут сбивать с толку.

.s-why.s-why-last
  :marked
    **Почему?** Это обеспечит соответствие шаблону для любых автоматизированных задач..

a(href="#toc") Вернуться наверх

.l-main-section
:marked
  ### <a id="02-03"></a>Элементы и Имена Файлов
  #### <a href="#02-03">Style 02-03</a>

.s-rule.do
  :marked
    **Рекомендуется** использовать однотипные имена  для всех ресурсов, в зависимости от того, что в них содержится.

.s-rule.do
  :marked
    **Рекомендуется** использовать верхний регистр для имен классов. Согласуйте имя элемента с именем файла.

.s-rule.do
  :marked
    **Рекомендуется** добавлять имя элемента с традиционным суффиксом к элементам соответствующего типа.
    (например, `Component`, `Directive`, `Module`, `Pipe`, `Service`).

.s-rule.do
  :marked
    **Рекомендуется** давать имени файла традиционный суффикс для файлов данного типа.
    (например, `.component.ts`, `.directive.ts`, `.module.ts`, `.pipe.ts`, `.service.ts`).
.s-why
  :marked
    **Почему?** Это предоставляет логичный способ для быстрого определения и учета ресурсов.

.s-why.s-why-last
  :marked
    **Почему?** Верхний регистр является традиционным для идентификации объектов, которые могут быть инстанцированы с помощью конструктора.

- var top="vertical-align:top"
table(width="100%")
  col(width="50%")
  col(width="50%")
  tr
    th Symbol Name
    th File Name
  tr(style=top)
    td
      code-example.
        @Component({ ... })
        export class AppComponent { }
    td
      :marked
        app.component.ts
  tr(style=top)
    td
      code-example.
        @Component({ ... })
        export class HeroesComponent { }
    td
      :marked
        heroes.component.ts
  tr(style=top)
    td
      code-example.
        @Component({ ... })
        export class HeroListComponent { }
    td
      :marked
        hero-list.component.ts
  tr(style=top)
    td
      code-example.
        @Component({ ... })
        export class HeroDetailComponent { }
    td
      :marked
        hero-detail.component.ts
  tr(style=top)
    td
      code-example.
        @Directive({ ... })
        export class ValidationDirective { }
    td
      :marked
        validation.directive.ts
  tr(style=top)
    td
      code-example.
        @NgModule({ ... })
        export class AppModule
    td
      :marked
        app.module.ts
  tr(style=top)
    td
      code-example.
        @Pipe({ name: 'initCaps' })
        export class InitCapsPipe implements PipeTransform { }
    td
      :marked
        init-caps.pipe.ts
  tr(style=top)
    td
      code-example.
        @Injectable()
        export class UserProfileService { }
    td
      :marked
        user-profile.service.ts
:marked

a(href="#toc") Вернуться наверх

.l-main-section
:marked
  ### <a id="02-04"></a>Наименование Сервисов
  #### <a href="#02-04">Style 02-04</a>

.s-rule.do
  :marked
    **Рекомендуется** использовать однотипные имена для всех сервисов в соответствии с их функционалом.

.s-rule.do
  :marked
    **Рекомендуется** использовать верхний регистр при именовании сервисов.

.s-rule.do
  :marked
    **Рекомендуется** добавлять суффиксы `Service` к сервисам, когда не ясно, какую функцию они выполняют (например, когда в названии используются существительные).

.s-why
  :marked
    **Почему?** Это предоставляет логичный способ для быстрого определения и учета сервисов.

.s-why
  :marked
    **Почему?** Очевидные имена сервисов, такие как `Logger` не требуют дополнительных суффиксов.

.s-why.s-why-last
  :marked
    **Почему?** Имена сервисов, такие как `Credit` - существительные и требуют добавления суффикса. Это необходимо, если не очевидно, сервис это или что-то другое.

- var top="vertical-align:top"
table(width="100%")
  col(width="50%")
  col(width="50%")
  tr
    th Symbol Name
    th File Name
  tr(style=top)
    td
      code-example.
        @Injectable()
        export class HeroDataService { }
    td
      :marked
        hero-data.service.ts
  tr(style=top)
    td
      code-example.
        @Injectable()
        export class CreditService { }
    td
      :marked
        credit.service.ts
  tr(style=top)
    td
      code-example.
        @Injectable()
        export class Logger { }
    td
      :marked
        logger.service.ts
:marked

a(href="#toc") Вернуться наверх

.l-main-section
:marked
  ### <a id="02-05"></a>Бутстрэппинг
  #### <a href="#02-05">Style 02-05</a>

.s-rule.do
  :marked
    **Рекомендуется** поместить всю логику приложения и начальную инициализации в файл `main.ts`.

.s-rule.do
  :marked
    **Рекомендуется** включать обработчик ошибок в логику инициализации.

.s-rule.avoid
  :marked
    **НЕ** помещайте логику самого приложения в `main.ts`. Вместо этого, поместите её в компонент или сервис.

.s-why
  :marked
    **Почему?** Это помогает организовывать однотипную логику запуска приложения.

.s-why.s-why-last
  :marked
    **Почему?** Это помогает следовать знакомым правилам, которые используются в других технологиях.

+makeExample('style-guide/ts/02-05/main.ts', '', 'main.ts')
:marked

a(href="#toc") Вернуться наверх

.l-main-section
:marked
  ### <a id="02-06"></a>Селекторы директив
  #### <a href="#02-06">Style 02-06</a>

.s-rule.do
  :marked
    **Рекомендуется** использовать нижний регистр для именования селекторов директив.

.s-why
  :marked
    **Почему?** Это помогает сохранить имена свойств, определенных в директивах, которые привязаны к представлению в соответствии с именами атрибутов.

.s-why.s-why-last
  :marked
    **Почему?** HTML парсер в Angular чувствителен к регистру, поэтому он будет распознавать нижний регистр.

a(href="#toc") Вернуться наверх

.l-main-section
:marked
  ### <a id="02-07"></a>Пользовательский префикс для компонентов
  #### <a href="#02-07">Style 02-07</a>

.s-rule.do
  :marked
    **Рекомендуется** использовать дефис и значения элемента селектора в нижнем регистре (например `admin-users`). 
    

.s-rule.do
  :marked
    **Рекомендуется** использовать пользовательский префикс для компонента селектора. 
    Например, префикс `toh` означает  **T**our **o**f **H**eroes а префикс`admin` соответственно означает администратора области функционала.

.s-rule.do
  :marked
    **Рекомендуется** использовать префикс, который указывает на область функции или само приложение.

.s-why
  :marked
    **Почему?** Это помогает избежать конфликта имён элементов с компонентами в других приложениях и с нативными HTML элементами.

.s-why
  :marked
    **Почему?** Это упрощает использование компонента в других приложениях.

.s-why.s-why-last
  :marked
    **Почему?** Компоненты становится легко отличить в DOM.

+makeExample('style-guide/ts/02-07/app/heroes/hero.component.avoid.ts', 'example', 'app/heroes/hero.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/02-07/app/users/users.component.avoid.ts', 'example', 'app/users/users.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/02-07/app/heroes/hero.component.ts', 'example', 'app/heroes/hero.component.ts')
:marked

+makeExample('style-guide/ts/02-07/app/users/users.component.ts', 'example', 'app/users/users.component.ts')
:marked

:marked
  ### <a id="02-08"></a>Пользовательский префикс для директив
  #### <a href="#02-08">Style 02-08</a>

.s-rule.do
  :marked
    **Do** use a custom prefix for the selector of directives (e.g, the prefix `toh` from **T**our **o**f **H**eroes).

.s-rule.do
  :marked
    **Do** spell non-element selectors in lower camel case unless the selector is meant to match a native HTML attribute.

.s-why
  :marked
    **Why?** Prevents name collisions.

.s-why.s-why-last
  :marked
    **Why?** Directives are easily identified.

+makeExample('style-guide/ts/02-08/app/shared/validate.directive.avoid.ts', 'example', 'app/shared/validate.directive.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/02-08/app/shared/validate.directive.ts', 'example', 'app/shared/validate.directive.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="02-09"></a>Pipe Names
  #### <a href="#02-09">Style 02-09</a>

.s-rule.do
  :marked
    **Do** use consistent names for all pipes, named after their feature.

.s-why.s-why-last
  :marked
    **Why?** Provides a consistent way to quickly identify and reference pipes.

- var top="vertical-align:top"
table(width="100%")
  col(width="50%")
  col(width="50%")
  tr
    th Symbol Name
    th File Name
  tr(style=top)
    td
      code-example.
        @Pipe({ name: 'ellipsis' })
        export class EllipsisPipe implements PipeTransform { }
    td
      :marked
        ellipsis.pipe.ts
  tr(style=top)
    td
      code-example.
        @Pipe({ name: 'initCaps' })
        export class InitCapsPipe implements PipeTransform { }
    td
      :marked
        init-caps.pipe.ts
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="02-10"></a>Unit Test File Names
  #### <a href="#02-10">Style 02-10</a>

.s-rule.do
  :marked
    **Do** name test specification files the same as the component they test.

.s-rule.do
  :marked
    **Do** name test specification files with a suffix of `.spec`.

.s-why
  :marked
      **Why?** Provides a consistent way to quickly identify tests.

.s-why.s-why-last
  :marked
      **Why?** Provides pattern matching for [karma](http://karma-runner.github.io/) or other test runners.

:marked
- var top="vertical-align:top"
table(width="100%")
  col(width="50%")
  col(width="50%")
  tr
    th Symbol Name
    th File Name
  tr(style=top)
    td
      :marked
        Components
    td
      :marked
        heroes.component.spec.ts
      :marked
        hero-list.component.spec.ts
      :marked
        hero-detail.component.spec.ts
  tr(style=top)
    td
      :marked
        Services
    td
      :marked
        logger.service.spec.ts
      :marked
        hero.service.spec.ts
      :marked
        filter-text.service.spec.ts
  tr(style=top)
    td
      :marked
        Pipes
    td
      :marked
        ellipsis.pipe.spec.ts
      :marked
        init-caps.pipe.spec.ts
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="02-11"></a>End to End Test File Names
  #### <a href="#02-11">Style 02-11</a>

.s-rule.do
  :marked
    **Do** name end-to-end test specification files after the feature they test with a suffix of `.e2e-spec`.

.s-why
  :marked
    **Why?** Provides a consistent way to quickly identify end-to-end tests.

.s-why.s-why-last
  :marked
    **Why?** Provides pattern matching for test runners and build automation.

:marked
:marked
- var top="vertical-align:top"
table(width="100%")
  col(width="50%")
  col(width="50%")
  tr
    th Symbol Name
    th File Name
  tr(style=top)
    td
      :marked
        End to End Tests
    td
      :marked
        app.e2e-spec.ts
      :marked
        heroes.e2e-spec.ts
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="02-12"></a>Angular NgModule Names
  #### <a href="#02-12">Style 02-12</a>

.s-rule.do
  :marked
    **Do** append the symbol name with the suffix `Module`.

.s-rule.do
  :marked
    **Do** give the file name the `.module.ts` extension.

.s-rule.do
  :marked
    **Do** name the module after the feature and folder it resides in.

.s-why
  :marked
    **Why?** Provides a consistent way to quickly identify and reference modules.

.s-why
  :marked
    **Why?** Upper camel case is conventional for identifying objects that can be instantiated using a constructor.

.s-why.s-why-last
  :marked
    **Why?** Easily identifies the module as the root of the same named feature.

.s-rule.do
  :marked
    **Do** suffix a _RoutingModule_ class name with `RoutingModule`.

.s-rule.do
  :marked
    **Do** end the filename of a _RoutingModule_ with `-routing.module.ts`.

.s-why.s-why-last
  :marked
    **Why?** A `RoutingModule` is a module dedicated exclusively to configuring the Angular router.
    A consistent class and file name convention make these modules easy to spot and verify.
- var top="vertical-align:top"
table(width="100%")
  col(width="50%")
  col(width="50%")
  tr
    th Symbol Name
    th File Name
  tr(style=top)
    td
      code-example.
        @NgModule({ ... })
        export class AppModule { }
    td
      :marked
        app.module.ts
  tr(style=top)
    td
      code-example.
        @NgModule({ ... })
        export class HeroesModule { }
    td
      :marked
        heroes.module.ts
  tr(style=top)
    td
      code-example.
        @NgModule({ ... })
        export class VillainsModule { }
    td
      :marked
        villains.module.ts
  tr(style=top)
    td
      code-example.
        @NgModule({ ... })
        export class AppRoutingModule { }
    td
      :marked
        app-routing.module.ts
  tr(style=top)
    td
      code-example.
        @NgModule({ ... })
        export class HeroesRoutingModule { }
    td
      :marked
        heroes-routing.module.ts        
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ## Coding Conventions

  Have consistent set of coding, naming, and whitespace conventions.

.l-main-section
:marked
  ### <a id="03-01"></a>Classes
  #### <a href="#03-01">Style 03-01</a>

.s-rule.do
  :marked
    **Do** use upper camel case when naming classes.

.s-why
  :marked
    **Why?** Follows conventional thinking for class names.

.s-why.s-why-last
  :marked
    **Why?** Classes can be instantiated and construct an instance. 
    By convention, upper camel case indicates a constructable asset.

+makeExample('style-guide/ts/03-01/app/core/exception.service.avoid.ts', 'example', 'app/shared/exception.service.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/03-01/app/core/exception.service.ts', 'example', 'app/shared/exception.service.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="03-02"></a>Constants
  #### <a href="#03-02">Style 03-02</a>

.s-rule.do
  :marked
    **Do** declare variables with `const` if their values should not change during the application lifetime.

.s-why
  :marked
    **Why?** Conveys to readers that the value is invariant.

.s-why.s-why-last
  :marked
    **Why?** TypeScript helps enforce that intent by requiring immediate initialization and by
    preventing subsequent re-assignment.
    
.s-rule.consider
  :marked
    **Consider** spelling `const` variables in lower camel case.

.s-why
  :marked
    **Why?** lower camel case variable names (`heroRoutes`) are easier to read and understand
    than the traditional UPPER_SNAKE_CASE names (`HERO_ROUTES`).

.s-why.s-why-last
  :marked
    **Why?** The tradition of naming constants in UPPER_SNAKE_CASE reflects
    an era before the modern IDEs that quickly reveal the `const` declaration.
    TypeScript itself prevents accidental reassignment. 
    
.s-rule.do
  :marked
    **Do** tolerate _existing_ `const` variables that are spelled in UPPER_SNAKE_CASE.

.s-why.s-why-last
  :marked
    **Why?** The tradition of UPPER_SNAKE_CASE remains popular and pervasive,
    especially in third party modules.
    It is rarely worth the effort to change them or the risk of breaking existing code and documentation.

+makeExample('style-guide/ts/03-02/app/core/data.service.ts', '', 'app/shared/data.service.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="03-03"></a>Interfaces
  #### <a href="#03-03">Style 03-03</a>

.s-rule.do
  :marked
    **Do** name an interface using upper camel case.

.s-rule.consider
  :marked
    **Consider** naming an interface without an `I` prefix.

.s-rule.consider
  :marked
    **Consider** using a class instead of an interface. 

.s-why
  :marked
    **Why?** <a href="https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines" target="_blank">TypeScript guidelines</a> 
    discourage the "I" prefix.

.s-why
  :marked
    **Why?** A class alone is less code than a _class-plus-interface_.

.s-why
  :marked
    **Why?** A class can act as an interface (use `implements` instead of `extends`).

.s-why.s-why-last
  :marked
    **Why?** An interface-class can be a provider lookup token in Angular dependency injection.

+makeExample('style-guide/ts/03-03/app/core/hero-collector.service.avoid.ts', 'example', 'app/shared/hero-collector.service.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/03-03/app/core/hero-collector.service.ts', 'example', 'app/shared/hero-collector.service.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="03-04"></a>Properties and Methods
  #### <a href="#03-04">Style 03-04</a>

.s-rule.do
  :marked
    **Do** use lower camel case to name properties and methods.

.s-rule.avoid
  :marked
    **Avoid** prefixing private properties and methods with an underscore.

.s-why
  :marked
    **Why?** Follows conventional thinking for properties and methods.

.s-why
  :marked
    **Why?** JavaScript lacks a true private property or method.

.s-why.s-why-last
  :marked
    **Why?** TypeScript tooling makes it easy to identify private vs public properties and methods.

+makeExample('style-guide/ts/03-04/app/core/toast.service.avoid.ts', 'example', 'app/shared/toast.service.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/03-04/app/core/toast.service.ts', 'example', 'app/shared/toast.service.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="03-06"></a>Import Line Spacing
  #### <a href="#03-06">Style 03-06</a>

.s-rule.consider
  :marked
    **Consider** leaving one empty line between third party imports and application imports.

.s-rule.consider
  :marked
    **Consider** listing import lines alphabetized by the module.

.s-rule.consider
  :marked
    **Consider** listing destructured imported assets alphabetically.

.s-why
  :marked
    **Why?** The empty line makes it easy to read and locate imports.

.s-why.s-why-last
  :marked
    **Why?** Alphabetizing makes it easier to read and locate imports.

+makeExample('style-guide/ts/03-06/app/heroes/shared/hero.service.avoid.ts', 'example', 'app/heroes/shared/hero.service.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/03-06/app/heroes/shared/hero.service.ts', 'example', 'app/heroes/shared/hero.service.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ## App Structure and Angular Modules

  Have a near-term view of implementation and a long-term vision. Start small but keep in mind where the app is heading down the road.

  All of the app's code goes in a folder named `app`. 
  All feature areas are in their own folder, with their own Angular module. 
  
  All content is 1 asset per file. Each component, service, and pipe is in its own file. 
  All 3rd party vendor scripts are stored in another folder and not in the `app` folder. 
  You didn't write them and you don't want them cluttering app. 
  Use the naming conventions for files in this guide.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-01"></a>LIFT
  #### <a href="#04-01">Style 04-01</a>

.s-rule.do
  :marked
    **Do** structure the app such that you can `L`ocate code quickly, 
    `I`dentify the code at a glance, 
    keep the `F`lattest structure you can, and 
    `T`ry to be DRY.

.s-rule.do
  :marked
    **Do** define the structure to follow these four basic guidelines, listed in order of importance.

.s-why.s-why-last
  :marked
    **Why?** LIFT Provides a consistent structure that scales well, is modular, and makes it easier to increase developer efficiency by finding code quickly. 
    To confirm your intuition about a particular structure, ask: 
    _can I quickly open and start work in all of the related files for this feature_?

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-02"></a>Locate
  #### <a href="#04-02">Style 04-02</a>

.s-rule.do
  :marked
    **Do** make locating code intuitive, simple and fast.

.s-why.s-why-last
  :marked
    **Why?**  
    To work efficiently you must be able to find files quickly, 
    especially when you do not know (or do not remember) the file _names_. 
    Keeping related files near each other in an intuitive location saves time. 
    A descriptive folder structure makes a world of difference to you and the people who come after you.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-03"></a>Identify
  #### <a href="#04-03">Style 04-03</a>

.s-rule.do
  :marked
    **Do** name the file such that you instantly know what it contains and represents.

.s-rule.do
  :marked
    **Do** be descriptive with file names and keep the contents of the file to exactly one component.

.s-rule.avoid
  :marked
    **Avoid** files with multiple components, multiple services, or a mixture.

.s-why.s-why-last
  :marked
    **Why?** Spend less time hunting and pecking for code, and become more efficient. 
    Longer file names are far better than _short-but-obscure_ abbreviated names.

.l-sub-section
  :marked
    It may be advantageous to deviate from the _one-thing-per-file_ rule when 
    you have a set of small, closely-related features that are better discovered and understood
    in a single file than as multiple files. Be wary of this loophole.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-04"></a>Flat
  #### <a href="#04-04">Style 04-04</a>

.s-rule.do
  :marked
    **Do** keep a flat folder structure as long as possible.

.s-rule.consider
  :marked
    **Consider** creating sub-folders when a folder reaches seven or more files.

.s-rule.consider
  :marked
    **Consider** configuring the IDE to hide distracting, irrelevant files such as generated `.js` and `.js.map` files.

s-why.s-why-last
  :marked
    **Why?** No one wants to search for a file through seven levels of folders. 
    A flat structure is easy to scan.
    
    On the other hand,
    <a href="https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two" target="_blank">psychologists believe</a>
    that humans start to struggle when the number of adjacent interesting things exceeds nine.
    So when a folder has ten or more files, it may be time to create subfolders. 
    
    Base your decision on your comfort level. 
    Use a flatter structure until there is an obvious value to creating a new folder.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-05"></a>T-DRY (Try to be DRY)
  #### <a href="#04-05">Style 04-05</a>

.s-rule.do
  :marked
    **Do** be DRY (Don't Repeat Yourself)

.s-rule.avoid
  :marked
    **Avoid** being so DRY that you sacrifice readability.

.s-why.s-why-last
  :marked
    **Why?** Being DRY is important, but not crucial if it sacrifices the other elements of LIFT.
    That's why its calle _T-DRY_. 
    For example, it's redundant to name a component, `hero-view.component.html` because a component is obviously a view. 
    But if something is not obvious or departs from a convention, then spell it out.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-06"></a>Overall Structural Guidelines
  #### <a href="#04-06">Style 04-06</a>

.s-rule.do
  :marked
    **Do** start small but keep in mind where the app is heading down the road.

.s-rule.do
  :marked
    **Do** have a near term view of implementation and a long term vision.

.s-rule.do
  :marked
    **Do** put all of the app's code in a folder named `app`.

.s-rule.consider
  :marked
    **Consider** creating a folder for a component when is has multiple accompanying files (`.ts`, `.html`, `.css` and `.spec`).

.s-why
  :marked
    **Why?** Helps keep the app structure small and easy to maintain in the early stages, while being easy to evolve as the app grows.

.s-why.s-why-last
  :marked
    **Why?** Components often have four files (e.g. `*.html`, `*.css`, `*.ts`, and `*.spec.ts`) and can clutter a folder quickly.

a(id='file-tree')
:marked
  Here is a compliant folder and file structure

.filetree
  .file &lt;project root&gt;
  .children
    .file app
    .children
      .file core
      .children
        .file core.module.ts
        .file exception.service.ts|spec.ts
        .file user-profile.service.ts|spec.ts
      .file heroes
      .children
        .file hero
        .children
          .file hero.component.ts|html|css|spec.ts
        .file hero-list
        .children
          .file hero-list.component.ts|html|css|spec.ts
        .file shared
        .children
          .file hero-button.component.ts|html|css|spec.ts
          .file hero.model.ts
          .file hero.service.ts|spec.ts
        .file heroes.component.ts|html|css|spec.ts
        .file heroes.module.ts
        .file heroes-routing.module.ts
      .file shared
      .children
        .file shared.module.ts
        .file init-caps.pipe.ts|spec.ts
        .file text-filter.component.ts|spec.ts
        .file text-filter.service.ts|spec.ts
      .file villains
      .children
        .file villain
        .children
          .file ...
        .file villain-list
        .children
          .file ...
        .file shared
        .children
          .file ...
        .file villains.component.ts|html|css|spec.ts
        .file villains.module.ts
        .file villains-routing.module.ts
      .file app.component.ts|html|css|spec.ts
      .file app.module.ts
      .file app-routing.module.ts
    .file main.ts
    .file index.html
    .file ...
:marked

.l-sub-section
  :marked
    While components in dedicated folder are widely preferred, 
    another option for small apps is to keep components flat (not in a dedicated folder). 
    This adds up to four files to the existing folder, but also reduces the folder nesting. 
    Whatever you choose, be consistent.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-07"></a>Folders-by-Feature Structure
  #### <a href="#04-07">Style 04-07</a>

.s-rule.do
  :marked
    **Do** create folders named for the feature area they represent.

.s-why
  :marked
    **Why?** A developer can locate the code, identify what each file represents at a glance, the structure is as flat as it can be, and there is no repetitive nor redundant names.

.s-why
  :marked
    **Why?** The LIFT guidelines are all covered.

.s-why
  :marked
    **Why?** Helps reduce the app from becoming cluttered through organizing the content and keeping them aligned with the LIFT guidelines.

.s-why
  :marked
    **Why?** When there are a lot of files (e.g. 10+), locating them is easier with a consistent folder structure and more difficult in a flat structure.

.s-rule.do
  :marked
    **Do** create an Angular module for each feature area.

.s-why
  :marked
    **Why?** Angular modules make it easy to lazy load routable features.

.s-why.s-why-last
  :marked
    **Why?** Angular modules make it easier to isolate, test, and re-use features.

.file-tree-reference
  a(href="#file-tree") Refer here to this Folder and File Structure example

a(href="#toc") Back to top
  :marked

.l-main-section
:marked
  ### <a id="04-08"></a>App Root Module
  #### <a href="#04-08">Style 04-08</a>

.s-rule.do
  :marked
    **Do** create an Angular module in the app's root folder (e.g., in `/app`).

.s-why
  :marked
    **Why?** Every app requires at least one root Angular module.

.s-rule.consider
  :marked
    **Consider** naming the root module `app.module.ts`.

.s-why.s-why-last
  :marked
    **Why?** Makes it easier to locate and identify the root module.

+makeExample('style-guide/ts/04-08/app/app.module.ts', 'example', 'app/app.module.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-09"></a>Feature Modules
  #### <a href="#04-09">Style 04-09</a>
.s-rule.do

  :marked
    **Do** create an Angular module for all distinct features in an application (e.g. `Heroes` feature).

.s-rule.do
  :marked
    **Do** place the feature module in the same named folder as the feature area (.e.g `app/heroes`).

.s-rule.do
  :marked
    **Do** name the feature module file reflecting the name of the feature area and folder (e.g. `app/heroes/heroes.module.ts`)

.s-rule.do
  :marked
    **Do** name the feature module symbol reflecting the name of the feature area, folder, and file (e.g. `app/heroes/heroes.module.ts` defines `HeroesModule`)

.s-why
  :marked
    **Why?** A feature module can expose or hide its implementation from other modules.

.s-why
  :marked
    **Why?** A feature module identifies distinct sets of related components that comprise the feature area. 

.s-why
  :marked
    **Why?** A feature module can easily be routed to both eagerly and lazily. 

.s-why
  :marked
    **Why?** A feature module defines clear boundaries between specific functionality and other application features. 

.s-why
  :marked
    **Why?** A feature module helps clarify and make it easier to assign development responsibilities to different teams.

.s-why.s-why-last
  :marked
    **Why?** A feature module can easily be isolated for testing.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-10"></a>Shared Feature Module
  #### <a href="#04-10">Style 04-10</a>

.s-rule.do
  :marked
    **Do** create a feature module named `SharedModule` in a `shared` folder (e.g. `app/shared/shared.module.ts` defines `SharedModule`).

.s-rule.do
  :marked
    **Do** put common components, directives and pipes that will be used throughout the application by other feature modules in the `SharedModule`, where those assets are expected to share a new instance of themselves (not singletons).

.s-rule.do
  :marked
    **Do** import all modules required by the assets in the `SharedModule` (e.g. `CommonModule` and `FormsModule`).

.s-why
  :marked
    **Why?** `SharedModule` will contain components, directives and pipes that may need features from another common module (e.g. `ngFor` in `CommonModule`).

.s-rule.do
  :marked
    **Do** declare all components, directives, and pipes in the `SharedModule`.

.s-rule.do
  :marked
    **Do** export all symbols from the `SharedModule` that other feature modules need to use.  

.s-why
  :marked
    **Why?** `SharedModule` exists to make commonly used components, directives and pipes available for use in the templates of components in many other modules.

.s-rule.avoid
  :marked
    **Avoid** specifying app-wide singleton providers in a `SharedModule`. Intentional singletons are OK. Take care.

.s-why
  :marked
    **Why?** A lazy loaded feature module that imports that shared module will make its own copy of the service and likely have undesireable results.

.s-why.s-why-last
  :marked
    **Why?** You don't want each module to have its own separate instance of singleton services. 
    Yet there is a real danger of that happening if the `SharedModule` provides a service.

.filetree
  .file src
  .children
    .file app
    .children
      .file shared
      .children
        .file shared.module.ts
        .file init-caps.pipe.ts|spec.ts
        .file text-filter.component.ts|spec.ts
        .file text-filter.service.ts|spec.ts
      .file app.component.ts|html|css|spec.ts
    .file app.module.ts
    .file app-routing.module.ts
    .file main.ts
    .file index.html
    .file ...
:marked

+makeTabs(
  `style-guide/ts/04-10/app/shared/shared.module.ts,
  style-guide/ts/04-10/app/shared/init-caps.pipe.ts,
  style-guide/ts/04-10/app/shared/filter-text/filter-text.component.ts,
  style-guide/ts/04-10/app/shared/filter-text/filter-text.service.ts,
  style-guide/ts/04-10/app/heroes/heroes.component.ts,
  style-guide/ts/04-10/app/heroes/heroes.component.html
  `,
  `,,,`,
  `app/shared/shared.module.ts,
  app/shared/init-caps.pipe.ts,
  app/shared/filter-text/filter-text.component.ts,
  app/shared/filter-text/filter-text.service.ts,
  app/heroes/heroes.component.ts,
  app/heroes/heroes.component.html
  `)
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-11"></a>Core Feature Module
  #### <a href="#04-11">Style 04-11</a>

.s-rule.do
  :marked
    **Do** collect single-use classes and hiding their gory details inside `CoreModule`. A simplified root `AppModule` imports `CoreModule` in its capacity as orchestrator of the application as a whole.

.s-rule.do
  :marked
    **Do** create a feature module named `CoreModule` in a `core` folder (e.g. `app/core/core.module.ts` defines `CoreModule`).

.s-rule.do
  :marked
    **Do** put a singleton service whose instance wil be shared throughout the application in the `CoreModule` (e.g. `ExceptionService` and `LoggerService`).

.s-rule.do
  :marked
    **Do** import all modules required by the assets in the `CoreModule` (e.g. `CommonModule` and `FormsModule`).

.s-why
  :marked
    **Why?** `CoreModule` provides one or more singleton services. Angular registers the providers with the app root injector, making a singleton instance of each service available to any component that needs them, whether that component is eagerly or lazily loaded.

.s-why
  :marked
    **Why?** `CoreModule` will contain singleton services. When a lazy loaded module imports these, it will get a new instance and not the intended app-wide singleton.

.s-rule.do
  :marked
    **Do** gather application-wide, single use components in the `CoreModule`.
    Import it once (in the `AppModule`) when the app starts and never import it anywhere else. (e.g. `NavComponent` and `SpinnerComponent`).

.s-why
  :marked
    **Why?** Real world apps can have several single-use components (e.g., spinners, message toasts, and modal dialogs) that appear only in the `AppComponent` template. 
    They are not imported elsewhere so they're not shared in that sense. 
    Yet they're too big and messy to leave loose in the root folder.

.s-rule.avoid
  :marked
    **Avoid** importing the `CoreModule` anywhere except in the `AppModule`.

.s-why
  :marked
    **Why?** A lazily loaded feature module that directly imports the `CoreModule` will make its own copy of services and likely have undesireable results.

.s-why
  :marked
    **Why?** An eagerly loaded feature module already has access to the `AppModule`'s injector, and thus the `CoreModule`'s services. 

.s-rule.do
  :marked
    **Do** export all symbols that from the `CoreModule` that the `AppModule` will import and make available for other feature modules to use.  

.s-why
  :marked
    **Why?** `CoreModule` exists to make commonly used singleton services available for use in the many other modules.

.s-why.s-why-last
  :marked
    **Why?** You want the entire app to use the one, singleton instance.
    You don't want each module to have its own separate instance of singleton services. 
    Yet there is a real danger of that happening accidentally if the `CoreModule` provides a service.


.filetree
  .file src
  .children
    .file app
    .children
      .file core
      .children
        .file core.module.ts
        .file logger.service.ts|spec.ts
        .file nav
        .children
          .file nav.component.ts|html|css|spec.ts
        .file spinner
        .children
          .file spinner.component.ts|html|css|spec.ts
          .file spinner.service.ts|spec.ts
      .file app.component.ts|html|css|spec.ts
    .file app.module.ts
    .file app-routing.module.ts
    .file main.ts
    .file index.html
    .file ...
:marked

+makeTabs(
  `
  style-guide/ts/04-11/app/app.module.ts,
  style-guide/ts/04-11/app/core/core.module.ts,
  style-guide/ts/04-11/app/core/logger.service.ts,
  style-guide/ts/04-11/app/core/nav/nav.component.ts,
  style-guide/ts/04-11/app/core/nav/nav.component.html,
  style-guide/ts/04-11/app/core/spinner/spinner.component.ts,
  style-guide/ts/04-11/app/core/spinner/spinner.component.html,
  style-guide/ts/04-11/app/core/spinner/spinner.service.ts
  `,
  `example,,,,,,,`,
  `
  app/app.module.ts,
  app/core/core.module.ts,
  app/core/logger.service.ts,
  app/core/nav/nav.component.ts,
  app/core/nav/nav.component.html,
  app/core/spinner/spinner.component.ts,
  app/core/spinner/spinner.component.html,
  app/core/spinner/spinner.service.ts
  `)
:marked

.l-sub-section
  :marked
    `AppModule` is a little smaller because many app/root classes have moved to other modules. 
    `AppModule` is stable because you will add future components and providers to other modules, not this one. 
    `AppModule` delegates to imported modules rather than doing work. 
    `AppModule` is focused on its main task, orchestrating the app as a whole.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-12"></a>Prevent Reimport of Core Module
  #### <a href="#04-12">Style 04-12</a>
  Only the root `AppModule` should import the `CoreModule`. 

.s-rule.do
  :marked
    **Do** guard against reimporting of `CoreModule` and fail fast by adding guard logic.

.s-why.s-why
  :marked
    **Why?** Guards against reimporting of the `CoreModule`.

.s-why.s-why-last
  :marked
    **Why?** Guards against creating multiple instances of assets intended to be singletons.
    
+makeTabs(
  `
  style-guide/ts/04-12/app/core/module-import-guard.ts,
  style-guide/ts/04-12/app/core/core.module.ts
  `,
  `,`,
  `
  app/core/module-import-guard.ts,
  app/core/core.module.ts
  `)
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-13"></a>Lazy Loaded Folders
  #### <a href="#04-13">Style 04-13</a>
  A distinct application feature or workflow may be *lazy loaded* or *loaded on demand* rather than when the application starts.

.s-rule.do
  :marked
    **Do** put the contents of lazy loaded features in a *lazy loaded folder*.
    A typical *lazy loaded folder* contains a *routing component*, its child components, and their related assets and modules.

.s-why.s-why-last
  :marked
    **Why?** The folder makes it easy to identify and isolate the feature content.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="04-14"></a>Never Directly Import Lazy Loaded Folders
  #### <a href="#04-14">Style 04-14</a>

.s-rule.avoid
  :marked
    **Avoid** allowing modules in sibling and parent folders to directly import a module in a *lazy loaded feature*.

.s-why.s-why-last
  :marked
    **Why?** Directly importing and using a module will load it immediately when the intention is to load it on demand.

a(href="#toc") Back to top

.l-main-section
:marked
  ## Components

  ### <a id="05-02"></a>Component Selector Naming
  #### <a href="#05-02">Style 05-02</a>

.s-rule.do
  :marked
    **Do** use _dashed-case_ or _kebab-case_ for naming the element selectors of components.

.s-why.s-why-last
  :marked
    **Why?** Keeps the element names consistent with the specification for [Custom Elements](https://www.w3.org/TR/custom-elements/).

+makeExample('style-guide/ts/05-02/app/heroes/shared/hero-button/hero-button.component.avoid.ts', 'example', 'app/heroes/shared/hero-button/hero-button.component.ts')(avoid=1)
:marked

+makeTabs(
  `style-guide/ts/05-02/app/heroes/shared/hero-button/hero-button.component.ts,
  style-guide/ts/05-02/app/app.component.html`,
  'example,',
  `app/heroes/shared/hero-button/hero-button.component.ts,
  app/app.component.html`)
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="05-03"></a>Components as Elements
  #### <a href="#05-03">Style 05-03</a>

.s-rule.do
  :marked
    **Do** define components as elements via the selector.

.s-why
  :marked
    **Why?** components have templates containing HTML and optional Angular template syntax. They are most associated with putting content on a page, and thus are more closely aligned with elements.

.s-why
  :marked
    **Why?** A component represents a visual element on the page.
    Defining the selector as an HTML element tag is consistent with native HTML elements and WebComponents.

.s-why.s-why-last
  :marked
    **Why?** It is easier to recognize that a symbol is a component vs a directive by looking at the template's html.

+makeExample('style-guide/ts/05-03/app/heroes/shared/hero-button/hero-button.component.avoid.ts', 'example', 'app/heroes/hero-button/hero-button.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/05-03/app/app.component.avoid.html', '', 'app/app.component.html')(avoid=1)
:marked

+makeTabs(
  `style-guide/ts/05-03/app/heroes/shared/hero-button/hero-button.component.ts,
  style-guide/ts/05-03/app/app.component.html`,
  'example,',
  `app/heroes/shared/hero-button/hero-button.component.ts,
  app/app.component.html`)
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="05-04"></a>Extract Template and Styles to Their Own Files
  #### <a href="#05-04">Style 05-04</a>

.s-rule.do
  :marked
    **Do** extract templates and styles into a separate file, when more than 3 lines.

.s-rule.do
  :marked
    **Do** name the template file `[component-name].component.html`, where [component-name] is the component name.

.s-rule.do
  :marked
    **Do** name the style file `[component-name].component.css`, where [component-name] is the component name.

.s-why
  :marked
    **Why?** Syntax hints for inline templates in (*.js and *.ts) code files are not supported by some editors.

.s-why.s-why-last
  :marked
    **Why?** A component file's logic is easier to read when not mixed with inline template and styles.

+makeExample('style-guide/ts/05-04/app/heroes/heroes.component.avoid.ts', 'example', 'app/heroes/heroes.component.ts')(avoid=1)
:marked

+makeTabs(
  `style-guide/ts/05-04/app/heroes/heroes.component.ts,
  style-guide/ts/05-04/app/heroes/heroes.component.html,
  style-guide/ts/05-04/app/heroes/heroes.component.css`,
  'example,,',
  `app/heroes/heroes.component.ts,
  app/heroes/heroes.component.html,
  app/heroes/heroes.component.css`)
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="05-12"></a>Decorate Input and Output Properties Inline
  #### <a href="#05-12">Style 05-12</a>

.s-rule.do
  :marked
    **Do** use `@Input` and `@Output` instead of the `inputs` and `outputs` properties of the 
    `@Directive and `@Component` decorators:

.s-rule.do
  :marked
    **Do** place the `@Input()` or `@Output()` on the same line as the property they decorate.

.s-why
  :marked
    **Why?** It is easier and more readable to identify which properties in a class are inputs or outputs.

.s-why
  :marked
    **Why?** If you ever need to rename the property or event name associated with 
    `@Input` or `@Output`, you can modify it a single place.

.s-why
  :marked
    **Why?** The metadata declaration attached to the directive is shorter and thus more readable.

.s-why.s-why-last
  :marked
    **Why?** Placing the decorator on the same line makes for shorter code and still easily identifies the property as an input or output.

+makeExample('style-guide/ts/05-12/app/heroes/shared/hero-button/hero-button.component.avoid.ts', 'example', 'app/heroes/shared/hero-button/hero-button.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/05-12/app/heroes/shared/hero-button/hero-button.component.ts', 'example', 'app/heroes/shared/hero-button/hero-button.component.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="05-13"></a>Avoid Renaming Inputs and Outputs
  #### <a href="#05-13">Style 05-13</a>

.s-rule.avoid
  :marked
    **Avoid** renaming inputs and outputs, when possible.

.s-why.s-why-last
  :marked
    **Why?** May lead to confusion when the output or the input properties of a given directive are named a given way but exported differently as a public API.

+makeExample('style-guide/ts/05-13/app/heroes/shared/hero-button/hero-button.component.avoid.ts', 'example', 'app/heroes/shared/hero-button/hero-button.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/05-13/app/app.component.avoid.html', '', 'app/app.component.html')(avoid=1)
:marked

+makeTabs(
  `style-guide/ts/05-13/app/heroes/shared/hero-button/hero-button.component.ts,
  style-guide/ts/05-13/app/app.component.html`,
  'example,',
  `app/heroes/shared/hero-button/hero-button.component.ts,
  app/app.component.html`)
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="05-14"></a>Member Sequence
  #### <a href="#05-14">Style 05-14</a>

.s-rule.do
  :marked
    **Do** place properties up top followed by methods.

.s-rule.do
  :marked
    **Do** place private members after public members, alphabetized.

.s-why.s-why-last
  :marked
    **Why?** Placing members in a consistent sequence makes it easy to read and 
    helps instantly identify which members of the component serve which purpose.

+makeExample('style-guide/ts/05-14/app/shared/toast/toast.component.avoid.ts', 'example', 'app/shared/toast/toast.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/05-14/app/shared/toast/toast.component.ts', 'example', 'app/shared/toast/toast.component.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="05-15"></a>Put Logic in Services
  #### <a href="#05-14">Style 05-15</a>

.s-rule.do
  :marked
    **Do** limit logic in a component to only that required for the view. All other logic should be delegated to services.

.s-rule.do
  :marked
    **Do** move reusable logic to services and keep components simple and focused on their intended purpose.

.s-why
  :marked
    **Why?** Logic may be reused by multiple components when placed within a service and exposed via a function.

.s-why
  :marked
    **Why?** Logic in a service can more easily be isolated in a unit test, while the calling logic in the component can be easily mocked.

.s-why
  :marked
    **Why?** Removes dependencies and hides implementation details from the component.

.s-why.s-why-last
  :marked
    **Why?** Keeps the component slim, trim, and focused.

+makeExample('style-guide/ts/05-15/app/heroes/hero-list/hero-list.component.avoid.ts', '', 'app/heroes/hero-list/hero-list.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/05-15/app/heroes/hero-list/hero-list.component.ts', 'example', 'app/heroes/hero-list/hero-list.component.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="05-16"></a>Don't Prefix Output Properties
  #### <a href="#05-16">Style 05-16</a>

.s-rule.do
  :marked
    **Do** name events without the prefix `on`.

.s-rule.do
  :marked
    **Do** name event handler methods with the prefix `on` followed by the event name.

.s-why
  :marked
    **Why?** This is consistent with built-in events such as button clicks.

.s-why.s-why-last
  :marked
    **Why?** Angular allows for an [alternative syntax](template-syntax.html#binding-syntax) `on-*`. If the event itself was prefixed with `on` this would result in an `on-onEvent` binding expression.

+makeExample('style-guide/ts/05-16/app/heroes/hero.component.avoid.ts', 'example', 'app/heroes/hero.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/05-16/app/app.component.avoid.html', '', 'app/app.component.html')(avoid=1)
:marked

+makeTabs(
  `style-guide/ts/05-16/app/heroes/hero.component.ts,
  style-guide/ts/05-16/app/app.component.html`,
  'example,',
  `app/heroes/hero.component.ts,
  app/app.component.html`)
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="05-17"></a>Put Presentation Logic in the Component Class
  #### <a href="#05-17">Style 05-17</a>

.s-rule.do
  :marked
    **Do** put presentation logic in the component class, and not in the template.

.s-why
  :marked
    **Why?** Logic will be contained in one place (the component class) instead of being spread in two places.

.s-why.s-why-last
  :marked
    **Why?** Keeping the component's presentation logic in the class instead of the template improves testability, maintainability, and reusability.

+makeExample('style-guide/ts/05-17/app/heroes/hero-list/hero-list.component.avoid.ts', 'example', 'app/heroes/hero-list/hero-list.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/05-17/app/heroes/hero-list/hero-list.component.ts', 'example', 'app/heroes/hero-list/hero-list.component.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ## Directives

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="06-01"></a>Use Directives to Enhance an Existing Element
  #### <a href="#06-01">Style 06-01</a>

.s-rule.do
  :marked
    **Do** use attribute directives when you have presentation logic without a template.

.s-why
  :marked
    **Why?** Attributes directives don't have an associated template.

.s-why.s-why-last
  :marked
    **Why?** An element may have more than one attribute directive applied.

+makeExample('style-guide/ts/06-01/app/shared/highlight.directive.ts', 'example', 'app/shared/highlight.directive.ts')
:marked

+makeExample('style-guide/ts/06-01/app/app.component.html', null, 'app/app.component.html')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="06-03"></a>Use HostListener and HostBinding Class Decorators
  #### <a href="#06-03">Style 06-03</a>

.s-rule.consider
  :marked
    **Consider** preferring the `@HostListener` and `@HostBinding` to the 
    `host` property of the `@Directive` and `@Component` decorators.

.s-rule.do
  :marked
    **Do** be consistent in your choice.

.s-why.s-why-last
  :marked
    **Why?** The property associated with `@HostBinding` or the method associated with `@HostListener` 
    can be modified only in a single place - in the directive's class. 
    If you use the `host` metadata property, you must modify both the property declaration inside the controller, 
    and the metadata associated with the directive.

+makeExample('style-guide/ts/06-03/app/shared/validator.directive.ts', '', 'app/shared/validator.directive.ts')
:marked
  Compare with the less preferred `host` metadata alternative.

.s-why.s-why-last
  :marked
    **Why?** The `host` metadata is only one term to remember and doesn't require extra ES imports.

+makeExample('style-guide/ts/06-03/app/shared/validator2.directive.ts', '', 'app/shared/validator2.directive.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ## Services

  ### <a id="07-01"></a>Services are Singletons within an Injector
  #### <a href="#07-01">Style 07-01</a>

.s-rule.do
  :marked
    **Do** use services as singletons within the same injector. Use them for sharing data and functionality.

.s-why
  :marked
    **Why?** Services are ideal for sharing methods across a feature area or an app.

.s-why.s-why-last
  :marked
    **Why?** Services are ideal for sharing stateful in-memory data.

+makeExample('style-guide/ts/07-01/app/heroes/shared/hero.service.ts', 'example', 'app/heroes/shared/hero.service.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="07-02"></a>Single Responsibility
  #### <a href="#07-02">Style 07-02</a>

.s-rule.do
  :marked
    **Do** create services with a single responsibility that is encapsulated by its context.

.s-rule.do
  :marked
    **Do** create a new service once the service begins to exceed that singular purpose.

.s-why
  :marked
    **Why?** When a service has multiple responsibilities, it becomes difficult to test.

.s-why.s-why-last
  :marked
    **Why?** When a service has multiple responsibilities, every component or service that injects it now carries the weight of them all.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="07-03"></a>Providing a Service
  #### <a href="#07-03">Style 07-03</a>

.s-rule.do
  :marked
    **Do** provide services to the Angular injector at the top-most component where they will be shared.

.s-why
  :marked
    **Why?** The Angular injector is hierarchical.

.s-why
  :marked
    **Why?** When providing the service to a top level component, that instance is shared and available to all child components of that top level component.

.s-why
  :marked
    **Why?** This is ideal when a service is sharing methods or state.

.s-why.s-why-last
  :marked
    **Why?** This is not ideal when two different components need different instances of a service. In this scenario it would be better to provide the service at the component level that needs the new and separate instance.

+makeTabs(
  `style-guide/ts/07-03/app/app.component.ts,
  style-guide/ts/07-03/app/heroes/hero-list/hero-list.component.ts`,
  '',
  `app/app.component.ts,
  app/heroes/hero-list/hero-list.component.ts`)
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="07-04"></a>Use the @Injectable() Class Decorator
  #### <a href="#07-04">Style 07-04</a>

.s-rule.do
  :marked
    **Do** use the `@Injectable` class decorator instead of the `@Inject` parameter decorator when using types as tokens for the dependencies of a service.

.s-why
  :marked
    **Why?** The Angular DI mechanism resolves all dependencies of services based on their types declared with the services' constructors.

.s-why.s-why-last
  :marked
    **Why?** When a service accepts only dependencies associated with type tokens, the `@Injectable()` syntax is much less verbose compared to using `@Inject()` on each individual constructor parameter.

+makeExample('style-guide/ts/07-04/app/heroes/shared/hero-arena.service.avoid.ts', 'example', 'app/heroes/shared/hero-arena.service.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/07-04/app/heroes/shared/hero-arena.service.ts', 'example', 'app/heroes/shared/hero-arena.service.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ## Data Services

  ### <a id="08-01"></a>Separate Data Calls
  #### <a href="#08-01">Style 08-01</a>

.s-rule.do
  :marked
    **Do** refactor logic for making data operations and interacting with data to a service.

.s-rule.do
  :marked
    **Do** make data services responsible for XHR calls, local storage, stashing in memory, or any other data operations.

.s-why
  :marked
    **Why?** The component's responsibility is for the presentation and gathering of information for the view. It should not care how it gets the data, just that it knows who to ask for it. Separating the data services moves the logic on how to get it to the data service, and lets the component be simpler and more focused on the view.

.s-why
  :marked
    **Why?** This makes it easier to test (mock or real) the data calls when testing a component that uses a data service.

.s-why.s-why-last
  :marked
    **Why?** Data service implementation may have very specific code to handle the data repository. This may include headers, how to talk to the data, or other services such as `Http`. Separating the logic into a data service encapsulates this logic in a single place hiding the implementation from the outside consumers (perhaps a component), also making it easier to change the implementation.

a(href="#toc") Back to top

.l-main-section
:marked
  ## Lifecycle Hooks

  Use Lifecycle Hooks to tap into important events exposed by Angular.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="09-01"></a>Implement Lifecycle Hooks Interfaces
  #### <a href="#09-01">Style 09-01</a>

.s-rule.do
  :marked
    **Do** implement the lifecycle hook interfaces.

.s-why.s-why-last
  :marked
    **Why?** Strongly-typed method signatures.
    The compiler and editor can call out misspellings.

+makeExample('style-guide/ts/09-01/app/heroes/shared/hero-button/hero-button.component.avoid.ts', 'example', 'app/heroes/shared/hero-button/hero-button.component.ts')(avoid=1)
:marked

+makeExample('style-guide/ts/09-01/app/heroes/shared/hero-button/hero-button.component.ts', 'example', 'app/heroes/shared/hero-button/hero-button.component.ts')
:marked

a(href="#toc") Back to top

.l-main-section
:marked
  ## Appendix

  Useful tools and tips for Angular.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="A-01"></a>Codelyzer
  #### <a href="#A-01">Style A-01</a>

.s-rule.do
  :marked
    **Do** use [codelyzer](https://www.npmjs.com/package/codelyzer) to follow this guide.

.s-rule.consider
  :marked
    **Consider** adjusting the rules in codelyzer to suit your needs.

a(href="#toc") Back to top

.l-main-section
:marked
  ### <a id="A-02"></a>File Templates and Snippets
  #### <a href="#A-02">Style A-02</a>

.s-rule.do
  :marked
    **Do** use file templates or snippets to help follow consistent styles and patterns. Here are templates and/or snippets for some of the web development editors and IDEs.

.s-rule.consider
  :marked
    **Consider** using [snippets](https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2) for [Visual Studio Code](https://code.visualstudio.com/) that follow these styles and guidelines.

    <a href="https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2">
      <img src="https://github.com/johnpapa/vscode-angular2-snippets/raw/master/images/use-extension.gif" width="80%" alt="Use Extension">
    </a>  

    **Consider** using [snippets](https://atom.io/packages/angular-2-typescript-snippets) for [Atom](https://atom.io/) that follow these styles and guidelines.

    **Consider** using [snippets](https://github.com/orizens/sublime-angular2-snippets) for [Sublime Text](http://www.sublimetext.com/) that follow these styles and guidelines.

    **Consider** using [snippets](https://github.com/mhartington/vim-angular2-snippets) for [Vim](http://www.vim.org/) that follow these styles and guidelines.

a(href="#toc") Back to top
