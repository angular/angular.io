include ../../../../_includes/_util-fns

figure
img(src="/resources/images/devguide/intro/people.png" alt="Us" align="left" style="width:200px; margin-left:-40px;margin-right:10px" )
:marked
  The Developer Guide is a practical guide to Angular for experienced programmers who
  are building client applications in HTML and JavaScript.
:marked
  In this guide, we will go on a journey together to understand how Angular works and, more importantly,
  how to make it work for us. We'll look at many typical application requirements and how Angular
  provides us solutions, such as:
  <br clear="all">

  * What are the essential Angular building blocks and how do they help?
  * How do we get data onto the screen and handle user interactions, such as click events or forms?
  * How do we organize our code into manageable, cohesive chunks of functionality that work together?
  * How do we minimize routine, mechanical coding in favor of declarative, higher level constructs without losing control?

  This guide is a collaborative effort by members of the Angular community, and is still in development. We've done
  our best to make this a useful guide and to cover everything, but there may be some gaps or some missing details.
  If you have any feedback, you can submit it by clicking on the feedback button in the top right or collaborating with
  this documentation on the GitHub repository at https://github.com/angular/angular.io.

  Before we go on this journey, let's look at how this guide is setup and how you can get the most out of it.

<a id="how-to-read"></a>
:marked
  # How to Read this Guide
  There is a structure to this guide to provide a linear learning path, but you are free to jump around
  or skip sections.

  ## Chapters

  The guide consists of chapters devoted to the challenges of building an application and
  how to use Angular to solve problems.

  A few early chapters are written as tutorials and are clearly marked as such.
  Most chapters are *not* tutorials and do not explain every step necessary to build the accompanying sample.
  These chapters highlight key points in code but generally focus only on the pieces relevant to the chapter topic.

  ## Code Samples

  Every chapter includes some code samples. These snippets are standalone snippets to highlight a particular concept and
  excerpts from a running sample application that accompanies the chapter. Most chapters have an example that illustrates
  the concepts found in the chapter. In those cases, you can find a link to a live version of that sample near the top of
  the chapter that looks like this example that shows a basic Angular app.

  [Live Example](/resources/live-examples/architecture/ts/plnkr.html)

  This link opens in a browser and runs the sample code supporting this chapter's architecture overview.
  They use Plunkr, a service which allows you to live view, modify, save, and download the code.

  ## Learning Path
  This guide can be read straight through, or used more like a reference. However, there is a recommended learning path for those who are new to Angular.

  1. Read the [Architecture Overview](architecture.html) to get the big picture about how Angular is structured and
  how about the various entities that comprise an Angular app.

  1. Step *outside* the guide and try the [QuickStart](../quickstart.html). The QuickStart is the "Hello, World" of Angular 2.
  It shows how to setup the libraries and tools needed to write *any* Angular app.

  1. Follow the [Tutorial](../tutorial). The "Tour of Heroes" tutorial provides a step-by-step approach to building a sample
  example from where QuickStart leaves off. It may appear simple, but it has the essential characteristics of a professional application such as
  a sensible project structure, data binding, master/detail, services, dependency injection, navigation, and remote data access.

    The final iteration of the "[Tour of Heroes](#toh)" is a positive answer to that most important question:
  ***can we build an Angular 2 application that does what we need it to do?***

    Return from the tutorial to the basic chapters of this Developers Guide.

  1. [Displaying Data](displaying-data.html) explains how to get information on to the screen.

  1. [User Input](user-input.html) covers the basics of responding to user behavior.

  1. [Forms](forms.html) handle user data entry and validation within the UI.

  1. [Dependency Injection](dependency-injection.html) is the way we build large, maintainable applications
  from small, single purpose parts.

  1. [Template Syntax](template-syntax.html) is a comprehensive study of Angular template HTML.

  With this foundation, we can read and understand any chapter in the guide.

  ## Other Resources
  There are other resources that are useful, particularly for referencing specific details.

  1. The "[Cheat Sheet](cheatsheet.html)" has a quick list of the syntax for most of the primary use cases.

  1. The [API Guide](../api/) is the authority on every public-facing member of the Angular libraries.


<a id="toh"></a>
.l-main-section
:marked
  # About the examples: The Hero Staffing Agency
  There's a backstory to the "Tour of Heroes" and every sample in this guide. Most examples are
  based around this common story and the tutorial application, even if they diverge slightly.
  The following is the underlying premise of The Hero Staffing Agency.

  > The world is full of crises large and small.
  > Fortunately, there are courageous heroes prepared to take on every challenge.
  > The shadowy "Hero Staffing Agency" matches crises to heroes.

  > We are contract developers, hired by The Agency to build an Angular application to manage their operations.
  > The Agency maintains a list of heroes with special powers.
  > Ordinary humans call the agency, looking for help with their personal or global crises.
  > The Agency triages the crises and turns them into job requests.
  > The heroes on staff then bid to take a job and The Agency assigns each job accordingly.

  The application will handle every detail of recruiting, tracking and job assignment, and along
  the way teaches about the majority of Angular's concepts.
