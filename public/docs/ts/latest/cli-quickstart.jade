include _util-fns
  
:marked
  Good tools make application development quicker and easier to maintain than
  if we did everything by hand.
  
  The [**Angular-CLI**](https://cli.angular.io/) is a **_command line interface_** tool
  that can create a project, add files, and perform a variety of on-going development tasks such 
  as testing, bundling, and deployment.
  
  Our goal in this CLI QuickStart chapter is to build and run a super-simple Angular 2 
  application in TypeScript, using Angular-CLI 
  while adhering to the [Style Guide](./guide/style-guide.html) recommendations that
  benefit _every_ Angular 2 project.
  
  By the end of the chapter, we'll have a basic understanding of development with the CLI
  and a foundation for both these documentation samples and our real world applications.

  We'll pursue these ends in the following high-level steps:
  
  - [Set up](#devenv) the development environment
  - [Create](#create-proj) a new project
  - [Serve and test](#serve-and-test) the app
  - [Edit](#edit) the app
  - [Push](#github-pages) this demo app live to GitHub Pages


.l-main-section
h2#devenv Development Environment
:marked
  We need to set up our development environment before we can do anything.
   
  Install **[Node.js® and npm](https://nodejs.org/en/download/)**
  if they are not already on your machine.
.l-sub-section
  :marked
    **Verify that you are running node `v5.x.x` and npm `3.x.x`**
    by running `node -v` and `npm -v` in a terminal/console window.
    Older and newer versions produce errors.
:marked
  Then **install the [Angular-CLI](https://github.com/angular/angular-cli)** 
  
code-example(format="").
  npm install -g angular-cli
  
.l-main-section
h2#create-project Create a new project
:marked
  Open a terminal window.
  
.alert.is-important
  :marked
    _Windows Developers_: open a console window opened _as an **administrator**_.
    The Angular-CLI build steps later in this tutorial 
    create <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa365680(v=vs.85).aspx" target="_blank"><i>symbolic links</i></a> 
    to various directories. These so-called _symlinks_ save time and space.
    But it takes administrator rights under Windows to create them.

:marked
  Generate a new project by running the following commands:

code-example(format="").
  ng new angular2-cli-quickstart

.l-sub-section
  :marked
    Patience please. 
    It takes time to set up a new project, most of it spent installing npm packages.
:marked
  **Let's serve our app.**

a(id="serve-and-test")
.l-main-section
:marked
  ## Serve & test

  Go to the project directory and launch the server.
code-example(format="").
  cd angular2-cli-quickstart
  ng serve
:marked
  The `ng serve` command launches the server, watches our files, 
  and rebuilds the app as we make changes to the files.
  
  Open a browser on `http://localhost:4200/`; the app greets us with a message:
  
figure.image-display
  img(src='/resources/images/devguide/cli-quickstart/app-works.png' alt="Our app works!")
:marked
  Now we're ready to write some code... or are we? We certainly could start writing code right now, but our tests would break.
  
:marked
  ### Tests?
  
  What tests? The Angular-CLI created tests for our initial project! 
  They are configured to run on [Google Chrome](https://www.google.com/chrome/) so make sure it is installed before running them.
  
  Open a new terminal (or console) window and run the *end-to-end (e2e)* tests with the command: `ng e2e`.
  Look for the following output after a few console messages:
code-example(format="").
  Spec started
  
    angular2-cli-quickstart App
      ✓ should display message saying app works
  
  Executed 1 of 1 spec SUCCESS in 2 secs.
  
:marked
  Looks all green and good. Always a good sign. 
  
  Keep the server running in the original window and run the *unit tests* with the command: `ng test --build=false --watch=false`. 
  After more console output, we should see a message like this:
  
code-example(format="").
  Chrome 49.0.2623 (Windows 10 0.0.0): Executed 2 of 2 SUCCESS (0.016 secs / 0.009 secs)
  
:marked
  It's a good idea to run tests before and after making changes to confirm that our app behaves as we expect it to.

  *At last* we are ready to write some code.
      
a(id="edit")
.l-main-section
:marked
  ## Edit the app
  
  We open the `angular2-cli-quickstart` projecd folder in our favourite editor.
  
  The root component is named after the project. We created the project with the name `angular2-cli-quickstart`, 
  so our root component is `Angular2CliQuickstartApp` and can be found in `src/app/angular2-cli-quickstart.component.ts`
  
  Open it and update the title:
  
+makeExample('cli-quickstart/ts/src/app/angular2-cli-quickstart.component.ts', 'title', 'src/app/angular2-cli-quickstart.component.ts')(format=".")
  
:marked
  The browser reloads automatically and we see the revised title. That's nice, but we can make look better.
  
  Open `src/app/angular2-cli-quickstart.component.css` and give the app some style 

+makeExample('cli-quickstart/ts/src/app/angular2-cli-quickstart.component.css', null, 'src/app/angular2-cli-quickstart.component.css')(format=".")
  
:marked
  Looking good!
  
figure.image-display
  img(src='/resources/images/devguide/cli-quickstart/my-first-app.png' alt="Output of QuickStart app")

:marked
  ### Re-test and fix
  
  We've made a few changes that we should commit to source control.
  
  Before we do, let's run our tests again. 
  While `ng serve` continues to run in the original window, 
  enter `ng e2e` again. This time the *e2e* test fails.
  
code-example(format="").
  1) angular2-cli-quickstart App should display message saying app works
    - Expected 'My First Angular 2 App' to equal 'angular2-cli-quickstart works!'.

  Executed 1 of 1 spec (1 FAILED) in 1 sec.

:marked
  Run the unit tests again: `ng test --build=false --watch=false`. They fail too.
code-example(format="").
  Chrome 49.0.2623 (Windows 10 0.0.0) App: Angular2CliQuickstart should have as title 'angular2-cli-quickstart works!' FAILED
          Expected 'My First Angular 2 App' to equal 'angular2-cli-quickstart works!'.
  ...
  Chrome 49.0.2623 (Windows 10 0.0.0): Executed 2 of 2 (1 FAILED) (0.038 secs / 0.022 secs)
  
:marked
  Our tests broke - as they should. We changed the title of our app, and our tests are looking for the original title.
  
  Fix the expected *title* text in both tests:
  
+makeTabs(
  'cli-quickstart/ts/e2e/app.e2e.ts, cli-quickstart/ts/src/app/angular2-cli-quickstart.component.spec.ts', 
  'title, title', 
  'e2e/app.e2e.ts, src/app/angular2-cli-quickstart.component.spec.ts')(format=".")
  
:marked
  Run our tests again and... all green! We are back in business.
  
  Our project is again in a stable state.
  
h2#git Commit with git
.l-main-section
  The CLI created our project as a local **git** repository.
  This is a good moment to commit our changes.
  
code-example(format="").
  git commit -a -m "Change root component title"
  
a(id="github-pages")
.l-main-section
:marked
  ## Push to production (Optional)
  
  Next stop: the production environment. 
  
  Angular-CLI has a nifty command that helps us push our app onto [GitHub Pages](https://pages.github.com/) hosting.

.l-sub-section
  :marked
    [Create a free GitHub Account](https://github.com/join) if you don't have one. 
    [Setup SSH keys](https://help.github.com/articles/generating-an-ssh-key/) 
    if you haven't done that yet.
:marked
  Close all windows/processes (like `ng serve`!) that are using the app files and folders.
  
  Run `ng github-pages:deploy`.
  
.alert.is-important
  :marked
    The `ng github-pages:deploy` command performs a series of git operations that add and remove files. 
    It can fail if those files are held by another process.

    If the command fails, we might be left in the `gh-pages` branch instead of the `master` branch.
    
    Run `git branch` and look for the _starred_ branch name. 
    If it isn't `master`, run `git checkout master`, 
    close open windows that might be using these files, and try `ng github-pages:deploy` again.

:marked
  This command creates a new github repository the first time we run it. 
  Subsequent calls use this existing repo.
  
  The command prompts us for a github token that will allow the CLI to create a repo for us.
  Don't worry, the token is used only once and we can safely delete it after the repo is created. 
  Deleting the token invalidates it.
  
  ### Get a token
  Go to [https://github.com/settings/tokens](https://github.com/settings/tokens), and click *Generate new token*.
    
figure.image-display
  img(src='/resources/images/devguide/cli-quickstart/gh-token-1.png' alt="Generate new token")
  
:marked
  We must login again and then choose a description and scope for the token.
  
  Name the token `angular-cli`, chose as scope *public_repo*, and then click *Generate token* at the bottom.
figure.image-display
  img(src='/resources/images/devguide/cli-quickstart/gh-token-2.png' alt="Description and scope")
    
:marked
  On the next screen, copy the token, paste it in the console window that asked us for the token, and press enter.
  
  Keep this page open so we can delete the token when we're done.
figure.image-display
  img(src='/resources/images/devguide/cli-quickstart/gh-token-3.png' alt="Copy and delete")
    
:marked
  The command prompts for our github username. Then it creates the repository, builds the app, and deploys it as a Github Page.
  The entire process we just described looks like this:

code-example(format="." language="").
  $ ng github-pages:deploy
  Built project successfully. Stored in "dist/".

  In order to deploy this project via GitHub Pages, we must first create a repository for it.
  It's safer to use a token than to use a password, so you will need to create one.

  Go to the following page and click 'Generate new token'.
  https://github.com/settings/tokens

  Choose 'public_repo' as scope and then click 'Generate token'.

  ? Please enter GitHub token you just created (used only once to create the repo): YOUR_TOKEN_HERE
  ? and your GitHub user name: YOUR_USERNAME_HERE
  Deployed! Visit https://YOUR_USERNAME_HERE.github.io/angular2-cli-quickstart/
  Github pages might take a few minutes to show the deployed site.
  
:marked
  We can now delete the github token under the name of `angular-cli`, as it won't be needed anymore.
  
  Now all we have to do is visit [https://YOUR_USERNAME_HERE.github.io/angular2-cli-quickstart/](https://YOUR_USERNAME_HERE.github.io/angular2-cli-quickstart/) and check out our new web app!
  
  We can continue to develop it locally and deploy it whenever we want. The repo creation step only happens on the first time, so next times there is no need to get a token.
    
.l-main-section
:marked
  ## Wrap Up
  Our first application doesn't do much. It's basically "Hello, World" for Angular 2.

  We kept it simple in our first pass: we generated a project, edited a page, 
  fixed some tests and finally pushed it live. That's about all we'd expect to 
  do for a "Hello, World" app.

  **We have greater ambitions.**

  The good news is that the overhead of setup is (mostly) behind us. 
  We'll probably only touch the `package.json` to update libraries.
  We'll likely open `system-config.ts` only if we need to add a library.
  
  Angular-CLI will help us do the rest, and we can push it online at any time.
