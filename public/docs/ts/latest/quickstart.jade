block includes
  include _util-fns
  - var _Install = 'Install'
  - var _prereq = 'Node.js and npm'
  - var _angular_browser_uri = '@angular/platform-browser-dynamic'
  - var _angular_core_uri = '@angular/core'
  - var _stepInit = 4 // Step # after NgModule step
  - var _quickstartSrcURL='https://github.com/angular/quickstart/blob/master/README.md'

//- TS/Dart shared step counter
- var step = _stepInit

:marked
  This QuickStart guide demonstrates how to build and run a simple Angular 2 application in #{_Lang}.
  It also establishes a common development environment used throughout the code examples in these
  guides.

.callout.is-helpful
  header Don't want #{_Lang}?
  p.
    Although you're getting started in #{_Lang}, you can also write Angular 2 applications
    in JavaScript and #{_docsFor == 'ts' ? 'Dart' : 'TypeScript'}. Use the language selector in the
    banner to switch development languages for this guide.
.l-main-section
h1 Overview

aside.is-right
  :marked
    The live example link opens the finished application <span if-docs="ts"> in
    <a href="http://plnkr.co/" title="Plunker" target="_blank">Plunker</a> so that you can interact
    with the code. You'll find live examples at the start of most sections.

:marked
  The QuickStart application has the structure of a real-world Angular application and
  displays the simple message:

figure.image-display
  img(src='/resources/images/devguide/quickstart/my-first-app.png' alt="Output of QuickStart app")

:marked
  **Try it out**. Here's a link to a <live-example></live-example>.

  You can also <a href="https://github .com/angular/quickstart/blob/master/README.md" target="_blank">
  clone the entire QuickStart application</a> from GitHub.

h2 Build this application!

:marked
  - [Prerequisite](#prereq): Install #{_prereq}.
  - [Step 1](#create-and-configure): Create and configure the project.
  - [Step 2](#root-component): Create the applicationâ€™s root component.
  <li if-docs="ts">[Step 3](#ngmodule): Create the application's root module</li>
  - [Step !{step++}](#main): Add <span ngio-ex>main.ts</span> to identify the root component to Angular.
  - [Step !{step++}](#index): Add `index.html` to define the web page that hosts the application.
  - [Step !{step++}](#build-and-run): Build and run the app
  - [Step !{step++}](#make-some-changes): Make some changes to the app
  - [Wrap up and Next Steps](#wrap-up)

- var step = _stepInit // reinitialize step counter for headers to come

.l-main-section#prereq
h1 Prerequisite: Install #{_prereq}

block setup-tooling
  :marked
    If Node.js and npm aren't already on your machine, <a href="http://blog.npmjs.org/post/85484771375/how-to-install-npm"
    target="_blank">install them</a>. Our examples require node **v5.x.x** or higher and
    npm **3.x.x** or higher. To check which version you are using, run `node -v` and `npm -v`
    in a terminal window.

aside.is-right
  :marked
    To easily copy text from a code example, click the *Copy to Clipboard* icon (<i
    class="material-icons" style="font-size: 100%">content_copy </i>) in the upper right corner of
    the example box.

.l-main-section
h1#create-and-configure Step 1: Create and configure the project

- var _package_and_config_files = _docsFor == 'dart' ? 'pubspec.yaml' : 'configuration files'

:marked
  In this step you will:
  * [Create the project folder](#create-the-project-folder)
  * [Create #{_package_and_config_files}](#add-config-files)
  * [#{_Install} packages](#install-packages)

h2 Create the project folder
:marked
  Using a terminal window, create a directory for the project, and change into this
  directory.

- var _ = _docsFor == 'dart' ? '_' : '-';
code-example(language="sh").
  mkdir angular2!{_}quickstart
  cd    angular2!{_}quickstart

h2#add-config-files Create #{_package_and_config_files}
block package-and-config-files
  - var _tsconfigUri = 'guide/typescript-configuration.html#tsconfig'

  p Our typical Angular project needs several configuration files:
  ul
    li.
      #[b package.json] identifies npm package dependencies for the project.
    li.
      #[b tsconfig.json] defines how the TypeScript compiler generates JavaScript from the project's
      files.
    li.
      #[b typings.json] provides additional definition files for libraries that the TypeScript
      compiler doesn't natively recognize.
    li.
      #[b systemjs.config.js] provides information to a module loader about where to find
      application modules, and registers all the necessary packages. It also
      contains other packages that will be needed by later documentation examples.

  p.
    Create each of these files in your project directory. Populate them by pasting in text from
    the tabs in the example box below.

  a#config-files
  +makeTabs(`
      quickstart/ts/package.1.json,
      quickstart/ts/tsconfig.1.json,
      quickstart/ts/typings.1.json,
      quickstart/ts/systemjs.config.1.js
    `, '', `
      package.json,
      tsconfig.json,
      typings.json,
      systemjs.config.js
    `)

  p.
    Learn more about these configuration files in the
    #[a(href="guide/npm-packages.html") Npm Package Configuration] guide and the
    #[a(href="#{_tsconfigUri}") TypeScript Configuration] guide.
    A detailed discussion of module loading is beyond the scope of this guide.

  .callout.is-helpful
    header SystemJS or Webpack?
    p.
      Although we use SystemJS for illustrative purposes here, it's only one option for loading
      modules. Use the module loader that you prefer. For Webpack and Angular, see <a
      href="guide/webpack.html" >
      Webpack: an Introduction</a>. Or, learn more about SystemJS configuration in general <a href="https://github.com/systemjs/systemjs/blob/master/docs/config-api.md" target="_blank">here</a>.


  h2#install-packages #{_Install} packages
block install-packages
  :marked
    Using npm from the command line, install the packages listed in `package.json` with the command:

  code-example(language="sh").
    npm install

  :marked
    Error messages&mdash;in red&mdash;might appear during the install, and you might see `npm WARN` messages. As long as there are no `npm ERR!` messages at the end, you can assume success.

  :marked
    You should now have the following structure:

  .filetree
    .file angular2-quickstart
    .children
      .file node_modules ...
      .file typings ...
      .file package.json
      .file systemjs.config.js
      .file tsconfig.json
      .file typings.json


  :marked
    If the `typings` folder doesn't show up after running `npm install`, you'll need to install it manually with the command:

  code-example(language="sh").
      npm run typings install

:marked
  You're now ready to write some code!

.l-main-section
h1#root-component Step 2: Create the application's root component
:marked
  **Create #{_an} #{_appDir} subfolder** off the project root directory:

code-example.
  mkdir #{_appDir}

a#app-component
p.
  #[b Create the component file]
  #[code #[+adjExPath('app/app.component.ts')]] (in this newly created directory) with the following content:

+makeExample('app/app.component.ts')

:marked
  Components are the basic building blocks of Angular applications. A component controls a portion
  of the screen&mdash;a *view*&mdash;through its associated template.

  Every Angular app has at least one *root component*, conventionally named `AppComponent`, that
  hosts the client user experience.

  The QuickStart application has the same essential structure as any other Angular component:

    * **An import statement**. Importing gives your component access to
    Angular's core [`@Component` decorator function](../latest/api/core/index/Component-decorator
    .html).
    * **A @Component #{_decorator}** that associates *metadata* with the
        `AppComponent` component class:

        - a *selector* that specifies a simple CSS selector for an HTML element that represents
          the component
        - a *template* that tells Angular how to render the component's view.
    * **A component class** that controls the appearance and behavior of a view
    through its template. Here, we only have the root component, `AppComponent`.

  The `AppComponent` class is the root of the application. Since you don't need any
  application logic in the simple QuickStart example, it's empty. In a real application, the
  component class would define properties and application logic.

  You *export* the `AppComponent` class so that you can *import* it elsewhere in your
  application.


+ifDocsFor('ts')
  .l-main-section
  h1#ngmodule Step 3: Create the application's root module
  :marked
    You compose Angular applications into closely related blocks of functionality with [Angular
    Modules](guide/ngmodule.html). Angular itself is split into separate Angular Modules. This
    makes it possible for you to keep payload size small by only importing the parts of Angular
    that your application needs.

    Every application requires at least one module: the _root module_, named `AppModule` by convention.

    Create the file `app/app.module.ts` with the following content:

  +makeExample('app/app.module.ts')(format='.')

  :marked
    You're passing metadata to the `NgModule` decorator function:

    * `imports` - the _other_ modules that export things that we need in _this_ module.

    * `declarations` - components and directives that belong to _this_ module.

    * `bootstrap` - the _root component_ that Angular should _bootstrap_ when it
    starts the application.

    This module definition imports the application's single component, `app.component.ts`, and
    adds it to both the `declarations` and `bootstrap` arrays.

    Since the QuickStart application is a web application that runs in a browser, your root module
    needs to import the
    [`BrowserModule`](../latest/api/platform-browser/index/BrowserModule-class.html)
    from `@angular/platform-browser` to the `imports` array.

    This is the smallest amount of Angular that is needed for a minimal application to run in the
    browser.

    The QuickStart application doesn't do anything else, so you don't need any other modules. In a real
    application, you'd likely import [`FormsModule`](../latest/api/forms/index/FormsModule-class
    .html) as well as [`RouterModule`](../latest/api/router/index/RouterModule-class.html) and
    [`HttpModule`](../latest/api/http/index/HttpModule-class.html). These are introduced in the
    [Tour of Heroes Tutorial](../tutorial/).

.l-main-section
h1#main Step !{step++}: Add #[code #[+adjExPath('main.ts')]]

block create-main
  :marked
    Now we need something to tell Angular to load the app module.
    Create the file `app/main.ts` with the following content:

+makeExample('app/main.ts')

- var _pBD_bootstrapModule = _docsFor == 'dart' ? _bootstrapModule : 'platformBrowserDynamic().bootstrapModule'
.l-verbose-section
  :marked
    We import the two things we need to launch the application:

    1. Angular's browser `!{_platformBrowserDynamicVsBootStrap}` function
    1. The application !{_moduleVsRootComp}, `!{_AppModuleVsAppComp}`.

    Then we call `!{_pBD_bootstrapModule}` with `!{_AppModuleVsAppComp}`.

    ### Bootstrapping is platform-specific

    Notice that we import the `!{_platformBrowserDynamicVsBootStrap}` function 
    from `#{_angular_browser_uri}`, not `#{_angular_core_uri}`.
    Bootstrapping isn't core because there isn't a single way to bootstrap the app.
    True, most applications that run in a browser call the bootstrap function from
    this library.

    But it is possible to load a !{_moduleVsComp} in a different environment.
    We might load it on a mobile device with [Apache Cordova](https://cordova.apache.org/) or [NativeScript](https://www.nativescript.org/).
    We might wish to render the first page of our application on the server
    to improve launch performance or facilitate
    [SEO](http://www.google.com/webmasters/docs/search-engine-optimization-starter-guide.pdf).
    These targets require a different kind of bootstrap function that we'd import from a different library.

    ### Why create separate *<span ngio-ex>main.ts</span>*<span if-docs="ts">, app module</span> and app component files?

    Then <span ngio-ex>main.ts</span><span if-docs="ts">, app module</span>
    and the app component files are tiny.
    This is just a QuickStart.
    We could have merged these files into one and spared ourselves some complexity.

    We'd rather demonstrate the proper way to structure an Angular application.
    App bootstrapping is a separate concern from<span if-docs="ts"> creating a module or</span>
    presenting a view.
    Mixing concerns creates difficulties down the road.
    We might launch the `!{_AppModuleVsAppComp}` in multiple environments with different bootstrappers.
    Testing the component is much easier if it doesn't also try to run the entire application.
    Let's make the small extra effort to do it *the right way*.

.l-main-section
h1#index Step !{step++}: Add #[code index.html]
:marked
  In the *#{_indexHtmlDir}* folder
  create an `index.html` file and paste the following lines into it:

+makeExample('index.html')

.l-verbose-section
  :marked
    The `index.html` file defines the web page that hosts the application.

  +ifDocsFor('ts')
    :marked
      The noteworthy sections of HTML are:

      1. The JavaScript [libraries](#libraries)
      2. Configuration file for [SystemJS](#systemjs), and a script
         where we import and run the `app` module which refers to the `main` file that we just wrote.
      3. The [`<my-app>`](#my-app) tag in the `<body>` which is *where our app lives!*

    :marked
      ### Libraries
      We loaded the following scripts
    +makeExcerpt('index.html', 'libraries')
    :marked
      We begin with `core-js`'s ES2015/ES6 shim which monkey patches the global context (window) with essential features of ES2015 (ES6).
      Next are the polyfills for Angular2, `zone.js` and `reflect-metadata`.
      Then the [SystemJS](#systemjs) library for module loading.

      We'll make different choices as we gain experience and
      become more concerned about production qualities such as
      load times and memory footprint.

:marked
  ### Add some style
  Styles aren't essential but they're nice, and `index.html` assumes we have
  a stylesheet called `styles.css`.

  Create a `styles.css` file in the *#{_indexHtmlDir}* folder and start styling,
  perhaps with the minimal styles shown below.

+makeExcerpt('styles.css (excerpt)', 'quickstart')

.callout.is-helpful
  :marked
    For the full set of master styles used by the documentation samples,
    see [styles.css](https://github.com/angular/angular.io/blob/master/public/docs/_examples/styles.css).

.l-main-section#build-and-run
h1 Step !{step++}: Build and run the app!
block run-app
  :marked
    Open a terminal window and enter this command:
  code-example.
    npm start
  :marked
    That command runs two parallel node processes
    1. The TypeScript compiler in watch mode
    1. A static server called **lite-server** that loads `index.html` in a browser
    and refreshes the browser when application files change

    In a few moments, a browser tab should open and display

figure.image-display
  img(src='/resources/images/devguide/quickstart/my-first-app.png' alt="Output of QuickStart app")

:marked
  **Great job!**

block build-app
  //- Nothing for ts.

:marked
  ## Make some changes

  Try changing the message to "My SECOND Angular 2 app".
block server-watching
  :marked
    The TypeScript compiler and `lite-server` are watching.
    They should detect the change, recompile the TypeScript into JavaScript,
    refresh the browser, and display the revised message.
    It's a nifty way to develop an application!

    We close the terminal window when we're done to terminate both the compiler and the server.

.l-main-section
:marked
  # Wrap up

  Our final project folder structure looks like this:
block project-file-structure
  .filetree
    .file angular2-quickstart
    .children
      .file app
      .children
        .file app.component.ts
        .file app.module.ts
        .file main.ts
      .file node_modules ...
      .file typings ...
      .file index.html
      .file package.json
      .file styles.css
      .file systemjs.config.js
      .file tsconfig.json
      .file typings.json
:marked
  Here are the file contents:

block project-files
  +makeTabs(`
      quickstart/ts/app/app.component.ts,
      quickstart/ts/app/app.module.ts,
      quickstart/ts/app/main.ts,
      quickstart/ts/index.html,
      quickstart/ts/package.1.json,
      quickstart/ts/tsconfig.1.json,
      quickstart/ts/typings.1.json,
      quickstart/ts/styles.css,
      quickstart/ts/systemjs.config.1.js`
    ,
    ',,,,,,, quickstart,',
    `app/app.component.ts,
    app/app.module.ts,
    app/main.ts,
    index.html,
    package.json,
    tsconfig.json,
    typings.json,
    styles.css (excerpt),
    systemjs.config.js`)

.l-main-section
:marked
  ## What next?
  Our first application doesn't do much. It's basically "Hello, World" for Angular 2.

  We kept it simple in our first pass: we wrote a little Angular component,
  created a simple `index.html`, and launched with a
  static file server. That's about all we'd expect to do for a "Hello, World" app.

  **We have greater ambitions!**
+ifDocsFor('ts')
  :marked
    The good news is that the overhead of setup is (mostly) behind us.
    We'll probably only touch the `package.json` to update libraries.
    We'll likely open `index.html` only if we need to add a library or some css stylesheets.
:marked
  We're about to take the next step and build a small application that
  demonstrates the great things we can build with Angular 2.

  Join us on the [Tour of Heroes Tutorial](./tutorial)!
