include ../../../_includes/_util-fns

:marked
  Let's start from zero and build a super simple Angular 2 application in TypeScript.

.callout.is-helpful
  header Don't want TypeScript?
  :marked
    Although we're getting started in TypeScript, you can also write Angular 2 apps
    in JavaScript and Dart by selecting either of those languages from the combo-box in the banner.

.l-main-section
:marked
  ## See It Run!

  Running the [live example](/resources/live-examples/quickstart/ts/plnkr.html)
  is the quickest way to see an Angular 2 app come to life.
  
  Clicking that link fires up a browser, loads the sample in [plunker](http://plnkr.co/ "Plunker"),
  and displays a simple message:

figure.image-display
  img(src='/resources/images/devguide/quickstart/my-first-app.png' alt="Output of quickstart app")
:marked
  Here is the file structure:
.filetree
  .file angular2-quickstart
  .children
    .file app
    .children
      .file app.component.ts
      .file main.ts
    .file index.html
    .file license.md
:marked
  Functionally, it's an `index.html` and two TypeScript files in an `app/` folder.
  We can handle that!
  
  Of course we won't build  many apps that only run in plunker. 
  Let's follow a process that's closer to what we'd do in real life.
  
  1. Set up our development environment
  1. Write the Angular root component for our app
  1. Bootstrap it to take control of the main web page
  1. Write the main page (`index.html`)
  
.l-sub-section
  :marked
    We really can build the QuickStart from scratch in five minutes 
    if we follow the instructions and ignore the commentary.
    
    Most of us will be interested in the "why" as well as the "how" and that will take longer.
:marked

.l-main-section
:marked
  ## Development Environment
  
  We'll need a place to stand (the application project folder), some libraries, 
  some TypeScript configuration and the TypeScript-aware editor of your choice.

  ### Create a new project folder
  
code-example(format="").
  mkdir angular2-quickstart
  cd    angular2-quickstart
:marked
  ### Add the libraries we need
  
  We recommend the **npm** package manager for acquiring and managing our development libraries.

.l-sub-section
  :marked
    Don't have npm?
    [Get it now](https://docs.npmjs.com/getting-started/installing-node "Installing Node.js and updating npm")
    because we're going to use it now and repeatedly throughout this documentation.
:marked
  Add a **package.json** file to the project folder and copy/paste the following:
+makeJson('quickstart/ts/package.1.json', null, 'package.json')(format=".")  

.l-sub-section
  :marked
    Itching to know the details? We explain in the [appendix below](#package-json)  
:marked
  Install these packages. Open a terminal window (command window in Windows) and
  run this npm command.
code-example(format="").
  npm install
:marked
.l-sub-section
  :marked
    Scary <span style="color:red; font-weight: bold">error messages in red</span> may appear **during** install. 
    Ignore them. The install will succeed. See the [appendix below](#npm-errors) for more information.
:marked
  ### Configure TypeScript

  We must guide the TypeScript compiler with very specific settings.
  
  Add a **tsconfig.json** file to the project folder and copy/paste the following:
+makeJson('quickstart/ts/tsconfig.1.json', null, 'tsconfig.json')(format=".")
.l-sub-section
  :marked
   We explore the `tsconfig.json` in an [appendix below](#tsconfig)
:marked
  **We're all set.** Let's write some code.

.l-main-section
:marked
  ## Our First Angular Component
  
  The *Component* is the most fundamental of Angular concepts. 
  A component manages a view - a piece of the web page where we display information
  to the user and respond to user feedback.
  
  Technically, a component is a class that controls a view template.
  We'll write a lot of them as we build Angular apps. This is our first attempt
  so we'll keep it ridiculously simple.
  
  ### Create an application source sub-folder
  
  We like to keep our application code in a sub-folder off the root called `app/`.
  Execute the following command in the console window.
code-example(format="").
  mkdir app
  cd    app
:marked
  ### Add the component file
  Now add a file named **app.component.ts** and paste the following lines:
+makeExample('quickstart/ts/app/app.component.ts', null, 'app/app.component.ts')(format=".")
:marked
  Let's review this file in detail, starting at the bottom where we define a class.

  ### The Component class
  At the bottom of the file is an empty, do-nothing class named `AppComponent`.
  When we're ready to build a substantive application, 
  we can expand this class with properties and application logic. 
  Our `AppComponent` class is empty because we don't need it to do anything in this QuickStart.
  
  ### Modules
  Angular apps are modular. They consist of many files each dedicated to a purpose.
  
  Most application files *export* one thing such as a component.
  Our `app.component` file exports the `AppComponent`.
+makeExample('quickstart/ts/app/app.component.ts', 'export', 'app/app.component.ts (export)')(format=".")
:marked
  The act of exporting turns the file into a module.
  The name of the file (without extension) is usually the name of the module. 
  Accordingly, '*app.component*' is the name of our first module.

  A more sophisticated application would have child components that descended from
  `AppComponent` in a visual tree. 
  A more sophisticated app would have more files and modules, at least as many as it had components.
  
  This Quickstart isn't sophisticated; one component is all we need.
  Yet modules play a fundamental organizational role in even this small app.
  
  Modules rely on other modules. In TypeScript Angular apps, when we need something
  provided by another module, we import it. 
  When another module needs to refer to `AppComponent`, it imports the `AppComponent` *symbol* like this:
+makeExample('quickstart/ts/app/main.ts', 'app-component','app/main.ts (import)')(format=".")
:marked
  Angular is also modular. It is a collection of library modules. 
  Each library is itself a module made up of several, related feature modules.
  
  When we need something from Angular, we import it from an Angular library module.
  We need something from Angular right now to help us define metadata about our component.
  
  ### Component Metadata
  A class becomes an Angular component when we give it metadata.
  Angular needs the metadata to understand how to construct the view
  and how the component interacts with other parts of the application.
  
  We define a component's metadata with the Angular `Component` function.
  We access that function by importing it from the primary Angular library,`angular2/core`.
+makeExample('quickstart/ts/app/app.component.ts', 'import', 'app/app.component.ts (import)')(format=".")
:marked
  In TypeScript we apply that function to the class as a *decorator* 
  by prefixing it with the **@** symbol and invoking it
  just above the component class:
+makeExample('quickstart/ts/app/app.component.ts', 'metadata', 'app/app.component.ts (metadata)')
:marked
  `@Component` tells Angular that this class *is an Angular component*.
  The configuration object passed to the `@Component` method has two
  fields, a `selector` and a `template`.

  The `selector` specifies a simple CSS selector for a host HTML element named `my-app`.
  Angular creates and displays an instance of our `AppComponent`
  wherever it encounters a `my-app` element in the host HTML.
  
.alert.is-helpful
  :marked
    Remember the `my-app` selector! We'll need that information when we write our `index.html`
:marked
  The `template` property holds the component's companion template.
  A template is a form of HTML that tells Angular how to render a view.
  Our template is a single line of HTML announcing "My First Angular App".
  
  Now we need something to tell Angular to load this component.

  ### Bootstrap it
  
  Add a new file , `main.ts`, to the `app/` folder as follows:
+makeExample('quickstart/ts/app/main.ts', null, 'app/main.ts')(format=".")
:marked
  We need two things to launch the application:
  1. Angular's browser `bootstrap` function
  1. The application root component that we just wrote.
  
  We import both. Then we call `bootstrap`, passing in the **root component type**, 
  `AppComponent`.
 
.l-sub-section
  :marked
    Learn why we import `bootstrap` from `angular2/platform/browser`
    and why we create a separate *main.ts* file in the [appendix below](#main).
:marked
  We've asked Angular to launch the app in a browser with our component at the root.
  Where will Angular put it? 

.l-main-section
:marked
  ## Add the `index.html`
  
  Angular displays our application in a specific location on our `index.html`.
  It's time to create that file.

  We won't put our `index.html` in the `app/` folder. 
  We'll locate it **up one level, in the project root folder**.
  
code-example(format="").
  cd ..
:marked
  Now create the`index.html` file and paste the following lines:
+makeExample('quickstart/ts/index.html', null, 'index.html')(format=".")
:marked
  There are three noteworthy sections of HTML:

  1. We load the JavaScript libraries we need; learn about them [below](#libraries). 

  2. We configure something called `System` and ask it to import the
  `main` file we just wrote.

  3. We add the `<my-app>` tag in the `<body>`. **This is where our app lives!**
  
  Something has to find and load our application modules. We're using **SystemJS** to do that.
  There are other choices and we're not saying SystemJS is the best. We like it and it works.
  
  The specifics of SystemJS configuration are out of bounds. 
  We'll briefly describe this particular configuration in the [appendix below](#systemjs).
  
  When Angular calls the `bootstrap` function in `main.ts`, it reads the `AppComponent`
  metadata, finds the `my-app` selector, locates an element tag named `my-app`,
  and loads our application between those tags.

.l-main-section
:marked
  ## Compile and run!
  
  Open a terminal window and enter this command:
code-example(format="").
  npm start
:marked
  That command runs two parallel node processes
  1. The TypeScript compiler in watch mode
  1. A static server called **lite-server** that loads `index.html` in a browser
  and refreshes the browser when application files change

  In a few moments, a browser tab should open and display

figure.image-display
  img(src='/resources/images/devguide/quickstart/my-first-app.png' alt="Output of quickstart app")

:marked
  Congratulations!  We are in business.

  ### Make some changes
  
  Try changing the message to "My SECOND Angular 2 app".
  
  The TypeScript compiler and `lite-server` are watching.
  They should detect the change, recompile the TypeScript into JavaScript,
  refresh the browser, and display the revised message.

  It's a nifty way to develop an application!
  
  We close the terminal window when we're done to terminate both the compiler and the server.

.l-main-section
:marked
  ## Final structure
  Our final project folder structure looks like this:
.filetree
  .file angular2-quickstart
  .children
    .file node_modules
    .file app
    .children
      .file app.component.ts
      .file main.ts
    .file index.html
    .file package.json
    .file tsconfig.json
:marked
  And here are the files:
+makeTabs(`
    quickstart/ts/app/app.component.ts,
    quickstart/ts/app/main.ts,
    quickstart/ts/index.html,
    quickstart/ts/package.1.json,
    quickstart/ts/tsconfig.1.json
  `,null,
  `app/app.component.ts, app/main.ts, index.html,package.json, tsconfig.json`)
:marked

.l-main-section
:marked
  ## Wrap Up
  Our first application doesn't do much. It's basically "Hello, World" for Angular 2.

  We kept it simple in our first pass: we wrote a little Angular component,
  we added some JavaScript libraries to `index.html`, and launched with a
  static file server. That's about all we'd expect to do for a "Hello, World" app.

  **We have greater ambitions.**

  The good news is that the overhead of setup is (mostly) behind us. 
  We'll probably only touch the `package.json` to update libraries.
  We'll likely open `index.html` only if we need to add a library or some css stylesheets.

  We're about to take the next step and build a small application that 
  demonstrates the great things we can build with Angular 2.

  Join us on the [Tour of Heroes Tutorial](./tutorial)!


.l-main-section
:marked
  ## Appendices
  The balance of this chapter is a set of appendices that
  elaborate on some of the points we covered quickly above.
  
  There is no essential material here. Continued reading is for the curious.

<a id="ie-polyfills"></a>
<a id="es6support"></a>
<a id="libraries"></a>
.l-main-section
:marked
  ### Appendix: Libraries
  We loaded the following scripts
+makeExample('quickstart/ts/index.html', 'libraries', 'index.html')(format=".")
:marked
  We began with Internet Explorer polyfills. 
  IE requires polyfills to run
  an application that relies on ES2015 promises and dynamic module loading.
  Most applications need those capabilities and most applications
  should run in Internet Explorer.
.l-sub-section
  :marked
    We can substitute the following libraries from a CDN:
  +makeExample('router/ts/index.1.html','ie-cdn-polyfills')(format=".")
:marked
  Next are the polyfills for Angular2, `angular2-polyfills.js`.
  Then the [SystemJS library](#systemjs) for module loading,
  followed by the Reactive Extensions RxJS library.
.l-sub-section
  :marked
    Our QuickStart doesn't use the Reactive Extensions 
    but any substantial application will want them
    when working with observables.
    We added the library here in QuickStart so we don't forget later.
:marked
  Finally, we loaded the web development version of Angular 2 itself.

  We'll make different choices as we gain experience and
  become more concerned about production qualities such as
  load times and memory footprint.

.l-main-section
:marked
  <a id="package-json"></a>
  ### Appendix: package.json

  [npm](https://docs.npmjs.com/) is a popular package manager and Angular application developers rely on it
  to acquire and manage the libraries their apps require.
  
  We specify the packages we need in an npm [package.json](https://docs.npmjs.com/files/package.json) file.
  
  The Angular team suggests the packages listed in the `dependencies` and `devDependencies`
  sections listed in this file:

+makeJson('quickstart/ts/package.1.json',{ paths: 'dependencies, devDependencies'}, 'package.json (dependencies)')(format=".") 
:marked
.l-sub-section
  :marked
    There are other possible package choices. 
    We're recommending this particular set that we know work well together. 
    Play along with us for now. 
    Feel free to make substitutions later to suit your tastes and experience.
:marked
  A `package.json` has an optional **scripts** section where we can define helpful
  commands to perform development and build tasks. 
  We've included a number of such scripts in our suggested `package.json`:
+makeJson('quickstart/ts/package.1.json',{ paths: 'scripts'}, 'package.json (scripts)')(format=".") 
:marked
  We've seen how we can run the compiler and a server at the same time with this command:
code-example(format="").
  npm start
:marked
  We execute npm scripts in that manner: `npm run` + *script-name*. Here's what these scripts do:
  
  * `npm run tsc` - run the TypeScript compiler once
  
  * `npm run tsc:w` - run the TypeScript compiler in watch mode; 
  the process keeps running, awaiting changes to TypeScript files and re-compiling when it sees them.
  
  * `npm run lite` - run the [lite-server](https://www.npmjs.com/package/lite-server), 
  a light-weight, static file server, written and maintained by [John Papa](http://johnpapa.net/) 
  with excellent support for Angular apps that use routing.


.l-main-section
:marked
  <a id="npm-errors"></a>
  ### Appendix: Npm errors and warnings
  
  All is well if there are no console messages starting with `npm ERR!` *at the end* of **npm install**. 
  There might be a few `npm WARN` messages along the way &mdash; and that is perfectly fine.
  
  We often see an `npm WARN` message after a series of `gyp ERR!` messages. 
  Ignore them. A package may try to re-compile itself using `node-gyp`.
  If the re-compile fails, the package recovers (typically with a pre-built version)
  and everything works.
  
  Just make sure there are no `npm ERR!` messages at the very end of `npm install`.
  
<!-- Move this to the Style Guide when we have one -->
.l-main-section
:marked
  <a id="tsconfig"></a>
  ### Appendix: TypeScript configuration
  We added a TypeScript configuration file (`tsconfig.json`) to our project to
  guide the compiler as it generates JavaScript files.
  Get details about `tsconfig.json` from the official
  [TypeScript wiki](https://github.com/Microsoft/TypeScript/wiki/tsconfig.json).

  The options and flags in the file we provided are essential.
  
  We'd like a moment to discuss the `noImplicitAny` flag.
  TypeScript developers disagree about whether it should be `true` or `false`.
  There is no correct answer and we can change the flag later.
  But our choice now can make a difference in larger projects so it merits
  discussion.

  When the `noImplicitAny` flag is `false`,
  the compiler silently defaults the type of a variable to `any` if it cannot infer
  the type based on how the variable is used. That's what we mean by "implicitly `any`".

  When the `noImplicitAny` flag is `true` and the TypeScript compiler cannot infer
  the type, it still generates the JavaScript files but
  it also reports an error.

  In this QuickStart and many of the other samples in this Developer Guide
  we set the `noImplicitAny` flag to `false`.
  
  Developers who prefer stricter type checking should set the `noImplicitAny` flag to `true`.
  We can still set a variable's type to `any` if
  that seems like the best choice. We'd be doing so explicitly after
  giving the matter some thought.

  If we set the `noImplicitAny` flag to `true`, we may get implicit index errors as well.
  If we feel these are more annoying than helpful,
  we can suppress them with the following additional flag.
  ```
  "suppressImplicitAnyIndexErrors":true
  ```

.l-main-section
:marked
  <a id="systemjs"></a>
  ### Appendix: SystemJS Configuration
  
  The QuickStart uses [SystemJS](https://github.com/systemjs/systemjs) to load application
  and library modules. 
  There are alternatives that work just fine including the well-regarded [webpack](https://webpack.github.io/).
  SystemJS happens to be a good choice but we want to be clear that it was a choice and not a preference.
  
  All module loaders require configuration and all loader configuration 
  becomes complicated rather quickly as soon as the file structure diversifies and
  we start thinking about building for production and performance.
  
  We suggest becoming well-versed in the loader of your choice.
.l-sub-section
  :marked
    Learn more about SystemJS configuration [here](https://github.com/systemjs/systemjs/blob/master/docs/config-api.md).
:marked
  With those cautions in mind, what are we doing here?
+makeExample('quickstart/ts/index.html', 'systemjs', 'index.html (System configuration)')(format=".")
:marked
  The `packages` node tells SystemJS what to do when it sees a request for a 
  module from the `app/` folder. 
  
  Our QuickStart makes such requests when one of its
  application TypeScript files has an import statement like this:
+makeExample('quickstart/ts/app/main.ts', 'app-component', 'main.ts (excerpt)')(format=".")
:marked
  Notice that the module name (after `from`) does not mention a filename extension. 
  The `packages:` configuration tells SystemJS to default the extension to 'js', a JavaScript file.
  
  That makes sense because we transpile TypeScript to JavaScript
  *before* running the application.
  
.l-sub-section
  :marked
    In the live example on plunker we transpile (AKA compile) to JavaScript in the browser
    on the fly. That's fine for a demo. That's not our preference for development or production.
    
    We recommend transpiling (AKA compiling) to JavaScript during a build phase 
    before running the application for several reasons including:
    
    * We see compiler warnings and errors that are hidden from us in the browser.
    
    * Pre-compilation simpifies the module loading process and 
    it's much easier to diagnose problem when this is a separate, external step.
       
    * Pre-compilation means a faster user experience because the browser doesn't waste time compiling.
    
    * We iterate development faster because we only re-compile changed files.
    We notice the difference as soon as the app grows beyond a handful of files.
    
    * Pre-compilation fits into a continuous integration process of build, test, deploy.
:marked
  The `System.import` call tells SystemJS to import the `main` file 
  (`main.js` ... after transpiling `main.ts`, remember?).
  `main` is where we tell Angular to launch the application.
  We also catch and log launch errors to the console. 
  
  All other modules are loaded upon request
  either by an import statement or by Angular itself.
  
.l-main-section
:marked
  <a id="main"></a>
  ### Appendix: ***main.ts***

  #### Bootstrapping is platform-specific
  We import the `bootstrap` function from `angular2/platform/browser`,
  not `angular2/core`. There's a good reason.
  
  We only call "core" those capabilities that are the same across all platform targets.
  True, most Angular applications run only in a browser and we'll call the bootstrap function from
  this library most of the time. It's pretty "core" if we're always writing for a browser.
    
  But it is possible to load a component in a different enviroment. 

  We might load it on a mobile device with [Apache Cordova](https://cordova.apache.org/) or [NativeScript](https://www.nativescript.org/).

  We might wish to render the first page of our application on the server
  to improve launch performance or facilitate 
  [SEO](http://static.googleusercontent.com/media/www.google.com/en//webmasters/docs/search-engine-optimization-starter-guide.pdf).

  These targets require a different kind of bootstrap function that we'd import from a different library.
 
  #### Why do we create a separate ***main.ts*** file?
  
  The *main.ts* file is tiny. This is just a QuickStart.
  We could have folded its few lines into the `app.component` file
  and spared ourselves some complexity.
  
  We didn't for what we believe to be good reasons:
  1. Doing it right is easy
  1. Testability
  1. Reusability
  1. Separation of concerns
  1. We learned about import and export
  
  #### It's easy
  Sure it's an extra step and an extra file. How hard is that in the scheme of things?
  
  We'll see that a separate `main.ts` is beneficial for *most* apps 
  even if it isn't critical for the QuickStart.
  Let's develop good habits now while the cost is low.
  
  #### Testability
  We should be thinking about testability from the beginning
  even if we know we'll never test the QuickStart. 
  
  It is difficult to unit test a component when there is a call to `bootstrap` in the same file.
  As soon as we load the component file to test the component, 
  the `bootstrap` function tries to load the application in the browser.
  It throws an error because we're not expecting to run the entire application, 
  just test the component. 
  
  Relocating the `bootstrap` function to `main.ts` eliminates this spurious error
  and leaves us with a clean component module file.
  
  #### Reusability
  We refactor, rename, and relocate files as our application evolves.
  We can't do any of those things while the file calls `bootstrap`.
  We can't move it. 
  We can't reuse the component in another application. 
  We can't pre-render the component on the server for better performance.
  
  #### Separation of concerns
  A component's responsibility is to present and manage a view.
  
  Launching the application has nothing to do with view management.
  That's a separate concern. The friction we're encountering in testing and reuse
  stems from this unnecessary mix of responsibilities.
  
  #### Import/Export
  
  While writing a separate `main.ts` file we learned an essential Angular skill:
  how to export from one module and import into another. 
  We'll do a lot of that as we learn more Angular.
