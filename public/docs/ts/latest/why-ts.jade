include _util-fns

:marked
  # Why Typescript?

  TypeScript is the preferred language for Angular application development.
  The documentation examples are written in TypeScript. 
  The guides and cookbooks teach concepts and techniques in TypeScript.
  Community resources &mdash; blog posts, workshops, webinars, video courses, technical support &mdash; are in TypeScript. 
  If you're uncomfortable with TypeScript, you might feel left out.

  Did you know?

  * [You can write Angular applications in plain JavaScript](#in-js).
  * [A little TypeScript goes a long way](#add-gradually).
  * [TypeScript + Tooling = Productivity + Fewer Errors](#productivity).
  * [TypeScript is easy to learn](#learn).
//  * [Angular tools lightup with TypeScript](#ng-tools). MOVE UP ONE

a#in-js
:marked
  ## Write Angular in JavaScript

  You _can_ write Angular applications in any version of JavaScript 
  from [ES5](guide/glossary.html#es5) to [ES7](guide/glossary.html#es6).
  The "**[TypeScript to JavaScript](cookbook/ts-to-js.html)**" cookbook 
  shows how to turn TypeScript samples into the JavaScript dialect you prefer.

a#example
:marked
  In the following `HeroComponent` variations, notice the common concepts and similar syntax.
  There's hardly a difference between the TypeScript and _ES6-with-Decorators_ versions.

+makeTabs(`
  cb-ts-to-js/ts/app/hero-di.component.ts,
  cb-ts-to-js/js-es6-decorators/app/hero-di.component.es6,
  cb-ts-to-js/js-es6/app/hero-di.component.es6,
  cb-ts-to-js/js/app/hero-di.component.js,
  cb-ts-to-js/js/app/hero-di.component.js
`,
',,,,dsl',
` TypeScript,
  ES6 with Decorators,
  ES6,
  ES5,
  ES5 with Angular DSL
`)

a#add-gradually
:marked
  ## Add TypeScript gradually

  TypeScript _is_ JavaScript.
  Any valid JavaScript file is a valid TypeScript file.

  Static typing and forward-looking features distinguish TypeScript from ordinary JavaScript.
  TypeScript automatically
  <a href="https://www.typescriptlang.org/docs/handbook/type-inference.html" target="_blank" title="TypeScript Type Inference">infers types</a>
  based on its reading of your code. 
  You _don't have_ to add more type information. 
  You will find yourself doing so, at your own pace, in order to clarify intent, reveal latent errors,
  and benefit from tools.

  Angular needs metadata to understand your classes. 
  In TypeScript, you add metadata to classes with decorators (functions preceded by `@`).
  Decorators are like the annotations in other languages.
  Decorators aren't a TypeScript invention.
  They are a
  <a href="https://github.com/wycats/javascript-decorators/blob/master/README.md" target="_blank">proposed feature of JavaScript</a>
  with broad industry backing. 
  If that status seems too tenuous,
  you can skip decorators and attach metadata directly to classes (as seen in the _ES6_ and _ES6_ examples [above](#example)).
  
  You need the TypeScript _compiler_ to turn TypeScript into JavaScript that runs in a browser.
  Many JavaScript developers are already using language compilers as they move to ES6 and beyond.
  Everyone depends on build tools, such as pre-compilers, minifiers, bundlers, and minifiers,
  to process source files for development, testing and production. 
  The TypeScript compiler fits neatly into that pipeline and produces high-quality, readable JavaScript.

  You don't have to convert an existing JavaScript code base to TypeScript.
  You can mix TypeScript and JavaScript files in the same project.

a#productivity
:marked
  ## Productivity

  TypeScript and a good IDE help you produce 
  <a 
  href="http://macbeth.cs.ucdavis.edu/lang_study.pdf" target="_blank" 
  title="A Large Scale Study of Programming Languages and Code Quality in Github">better, clearer code</a>,
  more quickly than if you wrote in plain JavaScript.

  * The compiler and IDE catch spelling and type errors _as you make them_.
  * Type information tells you and your team what to expect from a class, property, or method.
  * Mouse-over _Intellisense_ reveals essential API information, in context, so you don't have to look it up.
  * Code completion saves time and reduces mistakes.
  * Navigate the code base with _go-to-definition_ and _find all references_.
  * Refactor across the project. Unlike text _search-and-replace_, only the right names are renamed. 

//
  a#ng-tools
  :marked
    ## Angular tools

a#learn
:marked
  ## Learn TypeScript

  * <a href="https://www.typescriptlang.org/" target="_blank" title="The TypeScript Language Home Page">TypeScript janguage home page</a> 
  is the official source for TypeScript documentation.
  
  * <a href="https://www.typescriptlang.org/play/index.html" target="_blank" title="TypeScript Playground">The TypeScript playground</a>
  is a great place to experiment with TypeScript in a live-coding environment.

  * "[The TypeScript to JavaScript](cookbook/ts-to-js.html "TypeScript to Angular Cookbook")" cookbook shows how Angular in TypeScript can become Angular in JavaScript.

  * <a href="https://vsavkin.com/writing-angular-2-in-typescript-1fa77c78d8e8#.frmcwqgkv" target="_blank" 
  title="Savkin: Angular 2: Why TypeScript?"><i>Why Angular itself is written in TypeScript</i></a> 
  according to Victor Savkin, a former Angular core team member.

  * <a href="http://staltz.com/all-js-libraries-should-be-authored-in-typescript.html" target="_blank" 
  title="Staltz: All JS Libraries should be authored in TypeScript"><i>All JS Libraries should be authored in TypeScript</i></a>
  says Andr√© Staltz, author of the
  <a href="https://cycle.js.org/" target="_blank" title="Cycle.js">Cycle.js</a> reactive framework.
