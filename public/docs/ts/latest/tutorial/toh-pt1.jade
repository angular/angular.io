include ../_util-fns

:marked
  ## Setup to develop locally
  Follow the [setup](../guide/setup.html) instructions for creating a new project
  named <ngio-ex path="angular-tour-of-heroes"></ngio-ex>.
  <!-- CF: TO DO: Ward commented: if you only followed the current setup instructions, there would be many more files.
  I just added a section to the Setup guide for deleting non-essential files. We should refer to that too.
  See #3079 which will merge soon. The link to it would be:
  [_Deleting non-essential files_](../guide/setup.html#non-essential "Setup: Deleting non-essential files") -->
  The file structure should look like this:

.filetree
  .file angular-tour-of-heroes
  .children
    .file app
    .children
      .file app.component.ts
      .file app.module.ts
      .file main.ts
    .file node_modules ... 
    .file index.html
    .file package.json
    .file styles.css
    .file systemjs.config.js
    .file tsconfig.json
:marked
  When you're done with this page, the app should look like this <live-example></live-example>.

  ## Keep the app transpiling and running
  Enter the following command in the terminal window:

code-example(language="sh" class="code-shell").
  npm start

:marked
  This command runs the TypeScript compiler in "watch mode", recompiling automatically when the code changes.
  The command simultaneously launches the app in a browser and refreshes the browser when the code changes.
  
  You can keep building the Tour of Heroes without pausing to recompile or refresh the browser.

.l-main-section
  :marked
    ## Show the hero
    Add two properties to the `AppComponent`: a `title` property for the app name and a `hero` property
    for a hero named "Windstorm."

  +makeExample('toh-1/ts-snippets/app.component.snippets.pt1.ts', 'app-component-1', 'app.component.ts (AppComponent class)')(format=".")

  :marked
    Now update the template in the `@Component` decoration with data bindings to these new properties.

  +makeExample('toh-1/ts-snippets/app.component.snippets.pt1.ts', 'show-hero')

  :marked
    The browser refreshes and displays the title and hero name.

    The double curly braces are Angular's *interpolation binding* syntax.
    These interpolation bindings present the component's `title` and `hero` property values,
    as strings, inside the HTML header tags.

.l-sub-section
  :marked
    Read more about interpolation in the [Displaying Data](../guide/displaying-data.html) page.

:marked
  ### Hero object

  The hero needs more properties.
  Convert the `hero` from a literal string to a class.

  Create a `Hero` class with `id` and `name` properties.
  Add these properties near the top of the `app.component.ts` file, just below the import statement.

+makeExample('toh-1/ts/app/app.component.ts', 'hero-class-1', 'app.component.ts (Hero class)')(format=".")

:marked
  In the `Hero` class, refactor the component's `hero` property to be of type `Hero`,
  then initialize it with an id of `1` and the name `Windstorm`.

+makeExample('toh-1/ts/app/app.component.ts', 'hero-property-1', 'app.component.ts (hero property)')(format=".")

:marked
  Because you changed the hero from a string to an object,
  update the binding in the template to refer to the hero's `name` property.

+makeExample('toh-1/ts-snippets/app.component.snippets.pt1.ts', 'show-hero-2')
:marked
  The browser refreshes and continues to display the hero's name.

  ### Adding HTML with multi-line template strings

  To show all of the hero's properties,
  add a `<div>` for the hero's `id` property and another `<div>` for the hero's `name`.
  To keep the template readable, place each `<div>` on its own line.

  The backticks around the component template let you put the `<h1>`, `<h2>`, and `<div>` elements on their own lines, 
  thanks to the <i>template literals</i> feature in ES2015 and TypeScript. For more information, see 
  <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank" title="template literal">Template literals</a>.

+makeExample('toh-1/ts-snippets/app.component.snippets.pt1.ts', 'multi-line-strings', 'app.component.ts (AppComponent\'s template)')

.l-main-section
:marked
  ## Edit the hero name

  Users should be able to edit the hero name in a textbox.

  Refactor the hero name `<label>` with `<label>` and `<input>` elements.

+makeExample('toh-1/ts-snippets/app.component.snippets.pt1.ts', 'editing-Hero', 'app.component.ts (input element)')
:marked
  The hero's name now appears in the `<input>` textbox,
  but if you change the name, the change
  isn't reflected in the `<h2>`. To get the desired behavior,
  you can implement two-way binding.

  ### Two-way binding

  When users change the name of the hero in the `<input>`,
  the changes should appear in any place where the hero's name is bound.
  This is known as two-way data binding.

  Before using two-way data binding for *form inputs*, import the `FormsModule`
  package in the Angular module. Add the `FormsModule` to the `NgModule` decorator's `imports` array, which contains the list
  of external modules that the app uses.
  Now you have included the forms package that includes `ngModel`.

+makeExample('toh-1/ts/app/app.module.ts', '', 'app.module.ts (FormsModule import)')

.l-sub-section
  :marked
    Read more about `FormsModule` and `ngModel` in the
    [Two-way data binding with ngModel](../guide/forms.html#ngModel) section of the
    [Forms](../guide/forms.html) page and the
    [Two-way binding with NgModel](../guide/template-syntax.html#ngModel) section of the
    [Template Syntax](../guide/template-syntax.html)
    page.


:marked
  Update the template to use the  `ngModel` built-in directive for two-way binding.
  In app.component.ts, replace the `<input>` with the following HTML:

code-example(language="html").
  &lt;input [(ngModel)]="hero.name" placeholder="name">

:marked
  When the browser refreshes, you can edit the hero's name and
  see the changes reflected immediately in the `<h2>`.

.l-main-section
:marked
  ## The road you've travelled
  Take stock of what you've built.

  * The Tour of Heroes app uses the double curly braces of interpolation (a type of one-way data binding)
  to display the app title and properties of a `Hero` object.
  * You wrote a multi-line template using ES2015's template strings to make the template readable.
  * You added a two-way data binding to the `<input>` element
  using the built-in `ngModel` directive. This binding both displays the hero's name and allows users to change it.
  * The `ngModel` directive propagates changes to every other binding of the `hero.name`.

  Your app should look like this <live-example></live-example>.

  Here's the complete `app.component.ts` as it stands now:

+makeExample('toh-1/ts/app/app.component.ts', 'pt1', 'app.component.ts')

.l-main-section
:marked
  ## The road ahead
  In the [next tutorial page](./toh-pt2.html), you'll build on the Tour of Heroes app to display a list of heroes.
  You'll also allow the user to select heroes and display their details.
  You'll learn more about how to retrieve lists and bind them to the template.
