include ../_util-fns

:marked
  # Once Upon a Time
  
  Every story starts somewhere. 
  Our story starts where the [QuickStart](../quickstart.html) ends.

  **Try it out**. Here's a link to a <live-example></live-example>.

  Create a folder called `angular-tour-of-heroes` and follow the [QuickStart](../quickstart.html) steps,
  which provide the prerequisites, folder structure, and core files for the Tour of Heroes.

include ../_quickstart_repo
:marked
  You should have the following structure:

.filetree
  .file angular-tour-of-heroes
  .children
    .file app
    .children
      .file app.component.ts
      .file app.module.ts
      .file main.ts
    .file node_modules ... 
    .file index.html
    .file package.json
    .file styles.css
    .file systemjs.config.js
    .file tsconfig.json
:marked
  ## Keep the app transpiling and running
  To start the TypeScript compiler in watch mode and start the server, type the following:
  

code-example(language="bash").
  npm start

:marked
  This command launches the app in a browser
  and keeps the app running while you build the Tour of Heroes.

.l-main-section
  :marked
    ## Show your hero
    To display hero data in the app,
    add two properties to the `AppComponent`: a `title` property for the app name and a `hero` property
    for a hero named "Windstorm."

  +makeExample('toh-1/ts-snippets/app.component.snippets.pt1.ts', 'app-component-1', 'app.component.ts (AppComponent class)')(format=".")

  :marked
    Now update the template in the `@Component` decoration with data bindings to these new properties.

  +makeExample('toh-1/ts-snippets/app.component.snippets.pt1.ts', 'show-hero')

  :marked
    The browser refreshes and display the title and hero name.

    The double curly braces instruct the app to read the `title` and `hero` properties from the component and render them.
    This is the "interpolation" form of one-way data binding.
.l-sub-section
  :marked
    Learn more about interpolation in the [Displaying Data page](../guide/displaying-data.html).
:marked
  ### Hero object

  Our hero needs more properties.
  Let's convert the `hero` from a literal string to a class.

  Create a `Hero` class with `id` and `name` properties.
  Add these properties near the top of the `app.component.ts` file, just below the import statement.

+makeExample('toh-1/ts/app/app.component.ts', 'hero-class-1', 'app.component.ts (Hero class)')(format=".")

:marked
  Now in your `Hero` class, refactor the component's `hero` property to be of type `Hero`,
  then initialize it with an id of `1` and the name "Windstorm."

+makeExample('toh-1/ts/app/app.component.ts', 'hero-property-1', 'app.component.ts (hero property)')(format=".")

:marked
  Because you changed the hero from a string to an object,
  update the binding in the template to refer to the hero's `name` property.

+makeExample('toh-1/ts-snippets/app.component.snippets.pt1.ts', 'show-hero-2')
:marked
  The browser refreshes and continues to display the hero's name.

  ### Adding HTML with multi-line template strings

  Displaying a name is good, but we want to see all of the hero's properties.
  For this update, you'll add a `<div>` for the hero's `id` property and another `<div>` for the hero's `name`.
  To keep the template readable, you'll make some additional changes using the template strings feature
  in ES2015 and TypeScript:
  change the quotes around the template to backticks
  and put the `<h1>`, `<h2>`, and `<div>` elements on their own lines.

+makeExample('toh-1/ts-snippets/app.component.snippets.pt1.ts', 'multi-line-strings', 'app.component.ts (AppComponent\'s template)')

// CF: I removed the note about backticks. It wasn't appearing in the browser and Naomi didn't think it was necessary.

.l-main-section
:marked
  ## Editing the hero name

  We want to be able to edit the hero name in a textbox.

  Refactor the hero name `<label>` with `<label>` and `<input>` elements as shown:

+makeExample('toh-1/ts-snippets/app.component.snippets.pt1.ts', 'editing-Hero', 'app.component.ts (input element)')
:marked
  The hero's name now appears in the `<input>` textbox.
  But if you change the name, you'll notice that your change
  isn't reflected in the `<h2>`. To get the desired behavior,
  you'll implement two-way binding to `<input>`.

  ### Two-way binding

  We intend to display the name of the hero in the `<input>`, change it,
  and see those changes wherever we bind to the hero's name.
  This is known as two-way data binding.

  Before using two-way data binding for **form inputs**, import the `FormsModule`
  package in your Angular module. Add the `FormsModule` to the `NgModule` decorator's `imports` array, which contains the list
  of external modules that the app uses.
  Now you have included the forms package that includes `ngModel`.

+makeExample('toh-1/ts/app/app.module.ts', '', 'app.module.ts (FormsModule import)')

.l-sub-section
  :marked
    Learn more about the `FormsModule` and `ngModel` in the
    [Forms](../guide/forms.html#ngModel) and
    [Template Syntax](../guide/template-syntax.html#ngModel) pages.

:marked
  Now update the template to use the  **`ngModel`** built-in directive for two-way binding.
  In app.component.ts, replace the `<input>` with the following HTML:

code-example(language="html").
  &lt;input [(ngModel)]="hero.name" placeholder="name">

:marked
  The browser refreshes. Now you can edit the hero's name and
  see the changes reflected immediately in the `<h2>`.

.l-main-section
:marked
  ## The road you've travelled
  Let's take stock of what you've built.

  * The Tour of Heroes app uses the double curly braces of interpolation (a type of one-way data binding)
  to display the app title and properties of a `Hero` object.
  * You wrote a multi-line template using ES2015's template strings to make the template readable.
  * You added a two-way data binding to the `<input>` element
  using the built-in `ngModel` directive. This binding both displays the hero's name and allows users to change it.
  * The `ngModel` directive propagates changes to every other binding of the `hero.name`.

  **Try it out**. Here's a link to a <live-example></live-example>.
 
  Here's the complete `app.component.ts` as it stands now:

+makeExample('toh-1/ts/app/app.component.ts', 'pt1', 'app.component.ts')

.l-main-section
:marked
  ## The road ahead
  In the [next tutorial page](./toh-pt2.html), you'll build on the Tour of Heroes app to display a list of heroes.
  You'll also allow the user to select heroes and display their details.
  You'll learn more about how to retrieve lists, bind them to the
  template, and allow a user to select a hero.
