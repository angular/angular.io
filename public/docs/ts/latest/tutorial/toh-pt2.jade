include ../_util-fns

:marked
  # It Takes Many Heroes
  Our story needs more heroes.
  In this page, you'll expand the Tour of Heroes app to display a list of heroes,
  allow the user to select a hero, and display the hero's details.

  **Try it out**. Here's a link to a <live-example></live-example>.
  
  
.l-main-section
:marked
  ## Where you left off
  Before you continue with Part 2 of the Tour of Heroes,
  verify that you have the following structure after [Part 1](./toh-pt1.html).
  If not, you'll need to go back to Part 1 and figure out what you missed.
// CF: In the left nav bar, "Part 1" is numbered "2" and "Part 2" is numbered "3,"
 so referring to "Part 1" etc. could be confusing.

.filetree
  .file angular-tour-of-heroes
  .children
    .file app
    .children
      .file app.component.ts
      .file app.module.ts
      .file main.ts
    .file node_modules ...
    .file typings ...      
    .file index.html
    .file package.json
    .file styles.css
    .file systemjs.config.js
    .file tsconfig.json
    .file typings.json
:marked
  ## Keep the app transpiling and running
  To start the TypeScript compiler in watch mode and start the server, type the following:

code-example(language="bash").
  npm start

:marked
  This command keeps the application running while you continue to build the Tour of Heroes.

.l-main-section
:marked
  ## Displaying heroes
  To display a list of heroes, you'll add the heroes to the view's template.
  
  ### Creating heroes
  Create an array of ten heroes.
//  CF: I don't see a rule in the Angular Writing Guidelines for task titles. Is there a 
  preference for using gerunds ("Creating heroes") or imperatives ("Create heroes")?
  Both styles are used in this tutorial.

+makeExample('toh-2/ts/app/app.component.ts', 'hero-array', 'app.component.ts (hero array)')

:marked
  The `HEROES` array is of type `Hero`, the class defined in the previous page.
  We aspire to fetch the list of heroes from a web service, but you'll take small steps
  and display mock heroes for now.

  ### Exposing heroes
  Create a public property in `AppComponent` that exposes the heroes for binding.

+makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'hero-array-1', 'app.component.ts (hero array property)')

:marked
  You didn't have to define the `heroes` type because TypeScript infers it from the `HEROES` array.
.l-sub-section
  :marked
    You could define the heroes list in the component class,
    but ultimately you'll get the heroes from a data service.
    Because we know where we're heading, it makes sense to separate the hero data
    from the class implementation from the start.
:marked
  ### Displaying heroes in a template
  Your component has `heroes`. To display the hero names in an unordered list,
  insert the following chunk of HTML below the title and above the hero details.

+makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'heroes-template-1', 'app.component.ts (heroes template)')

:marked
  Now you can fill the template with hero names.

  ### Listing heroes with ngFor

  Next, you'll bind the array of `heroes` in your component to your template, iterate over them,
  and display them individually.
  You'll need some help from Angular to do this.

  First, modify the `<li>` tag by adding the built-in directive `*ngFor`.

+makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'heroes-ngfor-1', 'app.component.ts (ngFor)')

.alert.is-critical
  :marked
    The leading asterisk (`*`) in front of `ngFor` is a critical part of this syntax.
//  CF: is a "critical" type note appropriate here? Could we merge this sentence with
    the .l-sub-section below?

.l-sub-section
  :marked
    The (`*`) prefix to `ngFor` indicates that the `<li>` element and its children
    constitute a master template.

    The `ngFor` directive iterates over the `heroes` array returned by the `AppComponent.heroes` property
    and stamps out instances of this template.

    The quoted text assigned to `ngFor` means
    “*in the `heroes` array, store each hero in the local `hero` variable
    and make it available to the corresponding template instance*.”

    The `let` keyword before "hero" identifies `hero` as a template input variable.
    We can reference this variable within the template to access a hero's properties.

    Learn more about `ngFor` and template input variables in the
    [Displaying Data](../guide/displaying-data.html#ngFor) and
    [Template Syntax](../guide/template-syntax.html#ngFor) pages.

:marked
  Next, update the `<li>` tags to add content
  that uses the `hero` template variable to display the hero's properties.

+makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'ng-for', 'app.component.ts (ngFor template)')(format=".")

:marked
  When the browser refreshes, you see a list of heroes.

  ### Styling our heroes
  The list of heroes looks pretty bland.
  We want to give users a visual cue of which hero they are hovering over and which hero is selected.

  To add some styles to your component, set the `styles` property on the `@Component` decorator
  to the following CSS classes:

+makeExample('toh-2/ts/app/app.component.ts', 'styles', 'app.component.ts (styles)')(format=".")

:marked
  Notice that again you use the backtick notation for multi-line strings.

  That's a lot of styles! In a later page, you'll move the styles to a separate file. 

  When you assign styles to a component, they are scoped to that specific component.
  These styles apply only to your `AppComponent` and won't affect the outer HTML.

  Your template for displaying the heroes should look like this:

+makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'heroes-styled', 'app.component.ts (styled heroes)')

.l-main-section
  :marked
    ## Selecting a hero
    The app now displays a list of heroes as well as a single hero in the details view.
    The list and the details view are not connected in any way.
    When the user selects a hero from the list, we want the selected hero to appear in the details view.
    This UI pattern is known as "master-detail."
    In this case, the master is the heroes list and the detail is the selected hero.

    Let's connect the master to the detail through a `selectedHero` component property, which is bound to a click event.

    ### Add a click event
    Modify the `<li>` by inserting an Angular event binding to its click event.

  +makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'selectedHero-click', 'app.component.ts (template excerpt)')

  :marked
    Focus on the event binding:
  code-example(format="." language="bash").
    (click)="onSelect(hero)"
  :marked
    The parentheses identify the `<li>` element's  `click` event as the target.
    The expression to the right of the equal sign calls the  `AppComponent` method, `onSelect()`,
    passing the template input variable `hero` as an argument.
    That's the same `hero` variable you defined previously in the `ngFor` directive.
  .l-sub-section
    :marked
      Learn more about event binding in the 
      [User Input](../guide/user-input.html) and
      [Templating Syntax](../guide/template-syntax.html#event-binding) pages.
  :marked
    ### Add the click handler
    <!-- CF: (Sorry for the change in comment style; I can't seem to add a // comment
    anywhere in this section without commenting out the rest of the section and the next section.)
    This section title is a verb, making it sound like a task, but it's really an introduction;
    the tasks it discusses aren't performed until the next section. Would it make sense to merge
    the two sections and maybe change the title to "Add a click handle to expose the selected hero"? -->
  
    Your event binding refers to an `onSelect` method that doesn't exist yet.
    The `onSelect` method sets the component's selected hero to the hero that the user clicks.
    You'll add that method to your component shortly.

    Your component also doesn't have a “selected hero” yet. Let's start there.

    ### Expose the selected hero
    You no longer need the static `hero` property of the `AppComponent`.
    Replace it with this simple `selectedHero` property:

  +makeExample('toh-2/ts/app/app.component.ts', 'selected-hero', 'app.component.ts (selectedHero)')
  // CF: here I noticed that the hero names disappeared. Would it be helpful to mention that?
    Perhaps "At this point, you'll notice that the hero names disappear in the browser. Don't 
    worry, you'll restore them soon."
  :marked
    We don't want any of the heroes to be selected before the user picks a hero, so
    you won't initialize the `selectedHero` as you did with `hero`.

    Add an `onSelect` method that sets the `selectedHero` property to the `hero` that the user clicks.
  +makeExample('toh-2/ts/app/app.component.ts', 'on-select', 'app.component.ts (onSelect)')

  :marked
    At the moment, the template still refers to the old `hero` property.
    To change the template to bind to the new `selectedHero` property, update the code as follows:

  +makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'selectedHero-details', 'app.component.ts (template excerpt)')
  :marked
    ### Hide the empty detail with ngIf

    When the app loads, you see a list of heroes, but a hero is not selected.
    The `selectedHero` is `undefined`.
    That's why the following error appears in the browser's console:

  code-example(language="html").
    EXCEPTION: TypeError: Cannot read property 'name' of undefined in [null]

  :marked
    Remember how you're displaying `selectedHero.name` in the template?
    This name property doesn't exist because `selectedHero` itself is undefined.

    To address this issue, you'll keep the hero detail out of the DOM until there is a selected hero.
    <!-- CF: Will readers know what "DOM" means? -->

    Wrap the HTML hero detail content of your template with a `<div>`.
    Then add the `ngIf` built-in directive and set it to the `selectedHero` property of your component.

  +makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'ng-if', 'app.component.ts (ngIf)')
  // CF: Would it be helpful to note that now the list of names reappears in the browser?

  .alert.is-critical
    :marked
      Remember that the leading asterisk (`*`) in front of `ngIf` is
      a critical part of this syntax.
  //  CF: is a "critical" type note appropriate here? Could I merge this sentence with
    the next section?
  :marked
    When there is no `selectedHero`, the `ngIf` directive removes the hero detail HTML from the DOM.
    There are no hero detail elements or bindings to worry about.

    When the user picks a hero, `selectedHero` becomes "truthy" and
    `ngIf` puts the hero detail content into the DOM and evaluates the nested bindings.
  .l-sub-section
    :marked
      `ngIf` and `ngFor` are called "structural directives" because they can change the
      structure of portions of the DOM.
      In other words, they give structure to the way Angular displays content in the DOM.

      Learn more about `ngIf`, `ngFor`, and other structural directives in the
      [Structural Directives](../guide/structural-directives.html) and
      [Template Syntax](../guide/template-syntax.html#directives) pages.

  :marked
    The browser refreshes and you see the list of heroes but not the selected hero detail.
    The `ngIf` keeps it out of the DOM as long as the `selectedHero` is undefined.
    When you click a hero in the list, the selected hero displays in the hero details.

    ### Styling the selection

    You see the selected hero in the details area, but it's difficult to quickly locate that hero in the list above.
    You can fix that by applying the `selected` CSS class to the appropriate `<li>` in the master list.
    For example, when a user selects Magneta from the heroes list,
    it will pop out with a subtle background color as shown:

  figure.image-display
    img(src='/resources/images/devguide/toh/heroes-list-selected.png' alt="Selected hero")
  :marked
    In the template, you'll add a property binding on `class` for the `selected` class. 
    You'll set the class to an expression that compares the current `selectedHero` to the `hero`.

    The key is the name of the CSS class (`selected`). The value is `true` if the two heroes match and `false` otherwise.
    You're saying “*apply the `selected` class if the heroes match, and remove it if they don't*”.
  +makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'class-selected-1', 'app.component.ts (setting the CSS class)')(format=".")
  :marked
    Notice that `class.selected` is surrounded by square brackets (`[]`).
    This is the syntax for a *property binding*, in which data flows one way
    from the data source (the expression `hero === selectedHero`) to a property of `class`.
  +makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'class-selected-2', 'app.component.ts (styling each hero)')(format=".")

  .l-sub-section
    :marked
      Learn more about [property bindings](../guide/template-syntax.html#property-binding)
      in the Template Syntax page.

  :marked
    The browser reloads your app.
    Click the hero Magneta. Your selection is clearly identified by the background color.

  figure.image-display
    img(src='/resources/images/devguide/toh/heroes-list-1.png' alt="Output of heroes list app")

  :marked
    Click a different hero name and the selection color switches to that hero.

    Here's the complete `app.component.ts` as it stands now:

  +makeExample('toh-2/ts/app/app.component.ts', '', 'app.component.ts')

.l-main-section
:marked
  ## The road you've travelled
  Here's what you achieved in this page:

  * Your Tour of Heroes app now displays a list of selectable heroes.
  * You added the ability to select a hero and show the hero's details.
  * You learned how to use the built-in directives `ngIf` and `ngFor` in a component's template.

  **Try it out**. Here's a link to a <live-example></live-example>.

  ## The road ahead
  Your Tour of Heroes app has grown, but it's far from complete.
  You can't put the entire app into a single component.
  <!-- CF: It's not clear to me why you can't put it into a single component. Is this sentence necessary? -->
  In the [next page](toh-pt3.html), you'll split the app into sub-components and make them work together.
