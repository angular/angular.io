include ../_util-fns

:marked
  In this page, you'll expand the Tour of Heroes app to display a list of heroes, and
  allow users to select a hero and display the hero's details.

  When you're done with this page, the app should look like this <live-example></live-example>.

.l-main-section
:marked
  ## Where you left off
  Before you continue with this page of the Tour of Heroes,
  verify that you have the following structure after [The Hero Editor](./toh-pt1.html) page.
  If your structure doesn't match, go back to that page to figure out what you missed.

.filetree
  .file angular-tour-of-heroes
  .children
    .file app
    .children
      .file app.component.ts
      .file app.module.ts
      .file main.ts
    .file node_modules ...  
    .file index.html
    .file package.json
    .file styles.css
    .file systemjs.config.js
    .file tsconfig.json
:marked
  ## Keep the app transpiling and running
  To start the TypeScript compiler in watch mode and start the server, type the following:

code-example(language="sh" class="code-shell").
  npm start

:marked
  This command keeps the app running while you continue to build the Tour of Heroes.

.l-main-section
:marked
  ## Displaying heroes
  To display a list of heroes, you'll add the heroes to the view's template.
  
  ### Create heroes
  Create an array of ten heroes.

+makeExample('toh-2/ts/app/app.component.ts', 'hero-array', 'app.component.ts (hero array)')

:marked
  The `HEROES` array is of type `Hero`, the class defined in the previous page.
  Eventually this app will fetch the list of heroes from a web service, but for now
  you can display mock heroes.

  ### Expose heroes
  Create a public property in `AppComponent` that exposes the heroes for binding.

+makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'hero-array-1', 'app.component.ts (hero array property)')

:marked
  The `heroes` type isn't defined because TypeScript infers it from the `HEROES` array.
  
.l-sub-section
:marked
  The hero data is separated from the class implementation
  because ultimately the hero names will come from a data service.

:marked
  ### Display hero names in a template
  The component has `heroes`. To display the hero names in an unordered list,
  insert the following chunk of HTML below the title and above the hero details.

+makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'heroes-template-1', 'app.component.ts (heroes template)')

:marked
  Now you can fill the template with hero names.

  ### List heroes with ngFor

  The goal is to bind the array of `heroes` in the component to the template, iterate over them,
  and display them individually.

  Modify the `<li>` tag by adding the built-in directive `*ngFor`.

+makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'heroes-ngfor-1', 'app.component.ts (ngFor)')

.alert.is-critical
  :marked
    The leading asterisk (`*`) in front of `ngFor` is a critical part of this syntax.
//  CF: is a "critical" type note appropriate here? Could we merge this sentence with
    the .l-sub-section below?

.l-sub-section
  :marked
    The (`*`) prefix to `ngFor` indicates that the `<li>` element and its children
    constitute a master template.

    The `ngFor` directive iterates over the `heroes` array returned by the `AppComponent.heroes` property
    and stamps out instances of this template.
    <!-- CF: "stamps out" sounds like jargon. How about "... overrides instances of this template"? --> 

    The quoted text assigned to `ngFor` means
    "*in the `heroes` array, store each hero in the local `hero` variable
    and make it available to the corresponding template instance*."

    The `let` keyword before "hero" identifies `hero` as a template input variable.
    You can reference this variable within the template to access a hero's properties.

    Read more about `ngFor` and template input variables in the
    [Showing an array property with *ngFor](../guide/displaying-data.html#ngFor) section of the
    [Displaying Data](../guide/displaying-data.html) page and the
    [ngFor](../guide/template-syntax.html#ngFor) section of the
    [Template Syntax](../guide/template-syntax.html) page.

:marked
  In the `<li>` tags, add content
  that uses the `hero` template variable to display the hero's properties.

+makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'ng-for', 'app.component.ts (ngFor template)')(format=".")

:marked
  When the browser refreshes, a list of heroes displays.

  ### Style the heroes
  Users should get a visual cue of which hero they are hovering over and which hero is selected.

  To add styles to your component, set the `styles` property on the `@Component` decorator
  to the following CSS classes:

+makeExample('toh-2/ts/app/app.component.ts', 'styles', 'app.component.ts (styles)')(format=".")

:marked
  Notice that again you used the backtick notation for multi-line strings.

  Adding these styles makes the file much longer, but in a later page you'll move the styles to a separate file.

  When you assign styles to a component, they are scoped to that specific component.
  These styles apply only to your `AppComponent` and don't affect the outer HTML.

  The template for displaying heroes should look like this:

+makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'heroes-styled', 'app.component.ts (styled heroes)')

.l-main-section
  :marked
    ## Selecting a hero
    The app now displays a list of heroes as well as a single hero in the details view, but
    the list and the details view are not connected.
    When users select a hero from the list, the selected hero should appear in the details view.
    This UI pattern is known as "master-detail."
    <!-- CF: To be consistent with the title of this page, should this be "Master/Detail"? Or vice-versa? -->
    In this case, the master is the heroes list and the detail is the selected hero.

    Next you'll connect the master to the detail through a `selectedHero` component property,
    which is bound to a click event.

    ### Add a click event
    Modify the `<li>` by inserting an Angular event binding to its click event.

  +makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'selectedHero-click', 'app.component.ts (template excerpt)')

  :marked
    Notice the event binding:
    (click)="onSelect(hero)"
  :marked
    The parentheses identify the `<li>` element's  `click` event as the target.
    The `onSelect(hero)` expression calls the  `AppComponent` method, `onSelect()`,
    passing the template input variable `hero` as an argument.
    That's the same `hero` variable you defined previously in the `ngFor` directive.
  .l-sub-section
    :marked
      Learn more about event binding at the 
      [User Input](../guide/user-input.html) page and the
      [Event binding](../guide/template-syntax.html#event-binding) section of the
      [Template Syntax](../guide/template-syntax.html) page.

  :marked
    ### Add a click handler to expose the selected hero
    You no longer need the static `hero` property of the `AppComponent`.
    Replace it with this simple `selectedHero` property:

  +makeExample('toh-2/ts/app/app.component.ts', 'selected-hero', 'app.component.ts (selectedHero)')
  :marked
    The hero names no longer display in the browser, but you'll restore them soon.

    The hero names should all be unselected before the user picks a hero, so
    you won't initialize the `selectedHero` as you did with `hero`.

    Add an `onSelect` method that sets the `selectedHero` property to the `hero` that the user clicks.
  +makeExample('toh-2/ts/app/app.component.ts', 'on-select', 'app.component.ts (onSelect)')

  :marked
    At the moment, the template still refers to the old `hero` property.
    To change the template to bind to the new `selectedHero` property, update the code as follows:

  +makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'selectedHero-details', 'app.component.ts (template excerpt)')
  :marked
    ### Hide the empty detail with ngIf

    When the app loads, a list of heroes displays, but no hero name is selected.
    The `selectedHero` is `undefined`.
    Thus, the following error appears in the browser's console:

  code-example(format="nocode").
    EXCEPTION: TypeError: Cannot read property 'name' of undefined in [null]

  :marked
    Although `selectedHero.name` is displayed in the template,
    this name property doesn't exist because `selectedHero` itself is undefined.
    So for now, keep the hero detail out of the DOM until there is a selected hero.

    Wrap the HTML hero detail content of your template with a `<div>`.
    Then add the `ngIf` built-in directive and set it to the `selectedHero` property of the component.

  +makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'ng-if', 'app.component.ts (ngIf)')

  :marked
    The list of names displays again in the browser.

  .alert.is-critical
    :marked
      Remember that the leading asterisk (`*`) in front of `ngIf` is
      a critical part of this syntax.
  //  CF: is a "critical" type note appropriate here? Could I merge this sentence with
    the next section?
  :marked
    When there is no `selectedHero`, the `ngIf` directive removes the hero detail HTML from the DOM.
    There are no hero detail elements or bindings to worry about.

    When the user picks a hero, `selectedHero` becomes "truthy" and
    `ngIf` puts the hero detail content into the DOM and evaluates the nested bindings.
  //  CF: Is "truthy" jargon? How about: "`selectedHero` is set to true ..."

  .l-sub-section
    :marked
      `ngIf` and `ngFor` are called "structural directives" because they can change the
      structure of portions of the DOM.
      In other words, they give structure to the way Angular displays content in the DOM.

      Read more about `ngIf`, `ngFor`, and other structural directives in the
      [Structural Directives](../guide/structural-directives.html) page and the
      [Built-in directives](../guide/template-syntax.html#directives) section of the
      [Template Syntax](../guide/template-syntax.html) page.


  :marked
    When the browser refreshes, the list of heroes displays, but the selected hero detail does not.
    The `ngIf` keeps the selected hero detail out of the DOM as long as the `selectedHero` is undefined.
    When you click a hero in the list, the selected hero displays in the hero details.

    ### Style the selection

    While the selected hero displays in the details area, it's difficult to quickly locate that hero in the list above.
    To fix that, you can apply the `selected` CSS class to the appropriate `<li>` in the master list.
    For example, when a user selects Magneta from the heroes list,
    it will pop out with a subtle background color.


  figure.image-display
    img(src='/resources/images/devguide/toh/heroes-list-selected.png' alt="Selected hero")
  :marked
    In the template, you can add a property binding on `class` for the `selected` class.
    You can set the class to an expression that compares the current `selectedHero` to the `hero`.

    The key is the name of the CSS class (`selected`). The value is `true` if the two heroes match and `false` if they don't.
  +makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'class-selected-1', 'app.component.ts (setting the CSS class)')(format=".")
  :marked
    Notice that `class.selected` is surrounded by square brackets (`[]`).
    This is the syntax for a *property binding*, in which data flows one way
    from the data source (the expression `hero === selectedHero`) to a property of `class`.
  //  CF: What is the preferred style for introduced terms? In this page I see two: quotes (used in
    "master-detail" on line 151 and "structural directives" on line 241) and italics (used in
    *property binding* on line 270).
  +makeExample('toh-2/ts-snippets/app.component.snippets.pt2.ts', 'class-selected-2', 'app.component.ts (styling each hero)')(format=".")

  .l-sub-section
    :marked
      Read more about [property bindings](../guide/template-syntax.html#property-binding)
      in the [Template Syntax](../guide/template-syntax.html) page.

  :marked
    After the browser refreshes,
    click the hero Magneta. The background color clearly identifies the selection.

  figure.image-display
    img(src='/resources/images/devguide/toh/heroes-list-1.png' alt="Output of heroes list app")

  :marked
    Click a different hero name and the selection color switches to that name.

    Here's the complete `app.component.ts` as of now:

  +makeExample('toh-2/ts/app/app.component.ts', '', 'app.component.ts')

.l-main-section
:marked
  ## The road you've travelled
  Here's what you achieved in this page:

  * The Tour of Heroes app displays a list of selectable heroes.
  * You added the ability to select a hero and show the hero's details.
  * You learned how to use the built-in directives `ngIf` and `ngFor` in a component's template.

  Your app should look like this <live-example></live-example>.

  ## The road ahead
  You've expanded the Tour of Heroes app, but it's far from complete.
  You can't put the entire app into a single component.
  In the [next page](toh-pt3.html), you'll split the app into sub-components and make them work together.
