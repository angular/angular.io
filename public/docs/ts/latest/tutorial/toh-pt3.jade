include ../_util-fns

:marked
  The app is growing.
  Use cases arise for reusing components, passing data to components, and creating more reusable assets.
  On this page, you'll separate the heroes list from the hero details and make the details component reusable.

  When you're done with this page, the app should look like this <live-example></live-example>.

.l-main-section
:marked
  ## Where you left off
  Before continuing with the Tour of Heroes, verify that you have the following structure.
  If not, go back to the previous pages.

.filetree
  .file angular-tour-of-heroes
  .children
    .file app
    .children
      .file app.component.ts
      .file app.module.ts
      .file main.ts
    .file node_modules ...   
    .file index.html
    .file package.json
    .file styles.css
    .file systemjs.config.js
    .file tsconfig.json
:marked
  ## Keep the app transpiling and running
  To start the TypeScript compiler in watch mode and start the server, type the following:

code-example(language="sh" class="code-shell").
  npm start

:marked
  This command keeps the app running while you continue to build the Tour of Heroes.

  ## Making a hero detail component
  The heroes list and hero details are in the same component in the same file.
  The components are small now, but any change puts both components at risk and doubles the testing burden.
  If you reused the hero details elsewhere in the app,
  you would have to include the heroes list as well.
  
  To comply with the
  [Single Responsibility Principle](https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html),
  you'll move the hero details out into a separate component.

  ### Separate the hero detail component
  Add a file named `hero-detail.component.ts` to the `app` folder and create `HeroDetailComponent` as follows.

+makeExample('toh-3/ts/app/hero-detail.component.ts', 'v1', 'app/hero-detail.component.ts (initial version)')(format=".")
.l-sub-section
  :marked
    ### Naming conventions
    In good coding practice, you can quickly identify component classes and files containing components.
    Suffix component names with "Component" and component filenames with ".component".
    For example, `AppComponent` is in a file named `app.component.ts` and
    `HeroDetailComponent` is in a file named `hero-detail.component.ts`.
    
    To prevent case-sensitivity issues on the server or in source control,
    spell filenames in lower *[dash case](../guide/glossary.html#!#dash-case)*
    (AKA *[kebab case](../guide/glossary.html#!#kebab-case)*).
    <!-- CF: This note seems like more of an aside. The code above is discussed immediately after this note,
    making the code discussion somewhat confusing. Can I move this note to the end of the section? -->
    

    <!-- TODO
    .l-sub-section
      :marked
        Read more about naming conventions in the [Naming Conventions] page.
    :marked
    -->
:marked
  You imported the `Component` and `Input` decorators from Angular because you'll need them soon.

  The `@Component` decorator
  specifes the selector name that identifies this component's element.
  The `HeroDetailComponent` class is exported to make it available to other components.
  
  Later, you'll import it into `AppComponent` and create a corresponding `<my-hero-detail>` element.
  <!-- CF: What does "it" refer to? HeroDetailComponent class?  -->
:marked
  ### Hero detail template
  To separate the *Heroes* and *Hero Detail* views,
  cut the *Hero Detail* content from `AppComponent` and paste it into the new template property, `HeroDetailComponent`.

  You previously bound to the `selectedHero.name` property of the `AppComponent`.
  `HeroDetailComponent` will have a `hero` property, not a `selectedHero` property.
  So replace `selectedHero` with `hero` everywhere in the new template.
  The result looks like this:

+makeExample('toh-3/ts/app/hero-detail.component.ts', 'template', 'app/hero-detail.component.ts (template)')(format=".")

:marked
  Now the hero detail layout exists only in the `HeroDetailComponent`.

  ### Add the *hero* property
  Add the earlier mentioned `hero` property to the component class.
+makeExample('toh-3/ts/app/hero-detail.component.ts', 'hero', 'app/hero-detail.component.ts')
:marked
  You may notice that the `hero` property is declared as type `Hero` but the `Hero` class is in the `app.component.ts` file.
  There are two components, each in their own file, that need to reference the `Hero` class.
  
  To resolve this issue, move the `Hero` class from `app.component.ts` to its own `hero.ts` file.

+makeExample('toh-3/ts/app/hero.ts', '', 'app/hero.ts')(format=".")

:marked
  The `Hero` class is exported from `hero.ts` because it is referenced in both component files. 
  Add the following import statement near the top of *both* `app.component.ts` and `hero-detail.component.ts`.

+makeExample('toh-3/ts/app/hero-detail.component.ts', 'hero-import')

:marked
  ### The *hero* property is an *input*
  
  The `HeroDetailComponent` needs to know what hero to display. The parent `AppComponent` will do this work.
  
  `AppComponent` knows to display the hero that a user selects from the list
  because the user's selection is in `AppComponent`'s `selectedHero` property.
  
  You'll soon update the `AppComponent` template so that it binds its `selectedHero` property
  to the `hero` property of the `HeroDetailComponent`. The binding *might* look like this:
code-example(language="html").
  &lt;my-hero-detail [hero]="selectedHero">&lt;/my-hero-detail>
// CF: As revealed further down on this page, indeed this is what the binding looks like. Why say "*might*"?
  Could I remove this paragraph and then discuss the details of the binding later in this page, 
  where the binding is actually added?
:marked
  The `hero` property is the *target* of a property binding; it's in square brackets to the left of the equal sign (=).
  
  Angular requires that you declare a *target* property to be an *input* property.
  Otherwise, Angular rejects the binding and throws an error.
.l-sub-section
  :marked
    Read more about input properties in the [Appendix: Input properties](../guide/attribute-directives.html#why-input) 
    section of the [Attribute Directives](../guide/attribute-directives.html) page.
    This section also explains why *target* properties require this treatment and 
    *source* properties do not.
:marked
  To declare that `hero` is an *input*,
  annotate the `hero` property with the `@Input` decorator that you imported earlier.
+makeExample('toh-3/ts/app/hero-detail.component.ts', 'hero-input', 'app/hero-detail.component.ts')(format='.')
  
.l-sub-section
  :marked
    Read more about the `@Input()` decorator in 
    [this](../guide/attribute-directives.html#input) section of the
    <!-- CF: The above link drops me in a paragraph mid-section. In this case, what link text is best to use here? -->
    [Attribute Directives](../guide/attribute-directives.html) page.

.l-main-section
:marked
  ## Refresh the AppModule
  Return to the `AppModule`, the application's root module, and teach it to use the `HeroDetailComponent`.

  Import the `HeroDetailComponent` so you can refer to it.

+makeExample('toh-3/ts/app/app.module.ts', 'hero-detail-import', 'app/app.module.ts')

:marked
  Add `HeroDetailComponent` to the `NgModule` decorator's `declarations` array.
  This array contains the list of all components, pipes, and directives that you created
  and that belong in the application's module.

+makeExample('toh-3/ts/app/app.module.ts', 'declarations', 'app/app.module.ts')

.l-main-section
:marked
  ## Refresh the AppComponent
:marked
  Now that the app knows about the `HeroDetailComponent`,
  find the location in the `AppComponent` template where you removed the *Hero Detail* content
  and add an element tag that represents the `HeroDetailComponent`.
code-example(language="html").
  &lt;my-hero-detail>&lt;/my-hero-detail>
.l-sub-section
  :marked
    *my-hero-detail* is the name that's set as the `selector` in the `HeroDetailComponent` metadata.
:marked
 To coordinate the two components, the `selectedHero` property of the `AppComponent` is bound
 to the `HeroDetailComponent` element's `hero` property.
:marked
  The `AppComponent`’s template should now look like this:

+makeExample('toh-3/ts/app/app.component.ts', 'hero-detail-template', 'app.component.ts (template)')(format='.')
:marked
  Thanks to the binding, the `HeroDetailComponent` receives the hero name from the `AppComponent` and displays that hero's detail beneath the list.
  The detail updates every time a user picks a new hero.
  
:marked
  ### What's changed?
  As in the [previous](./toh-pt2.html) page, 
  the list of heroes displays in the browser, and 
  when you select a hero, the selected hero’s details display.   
  However, now you can use the `HeroDetailComponent`
  to show hero details anywhere in the app.
  That is, you created the first reusable component.

  ### Review the app structure
  Verify that you have the following structure after refactoring:

.filetree
  .file angular-tour-of-heroes
  .children
    .file app
    .children
      .file app.component.ts
      .file app.module.ts
      .file hero.ts
      .file hero-detail.component.ts
      .file main.ts
    .file node_modules ...
    .file index.html
    .file package.json
    .file tsconfig.json
// CF: Shouldn't styles.css and systemjs.config.js be listed as well?

:marked
  Here are the code files discussed in this page.

+makeTabs(`
  toh-3/ts/app/hero-detail.component.ts,
  toh-3/ts/app/app.component.ts,
  toh-3/ts/app/hero.ts,
  toh-3/ts/app/app.module.ts
  `,'',`
  app/hero-detail.component.ts,
  app/app.component.ts,
  app/hero.ts,
  app/app.module.ts
 `)

.l-main-section
:marked
  ## The road you’ve travelled
  Here's what you achieved in this page:

  * You created a reusable component.
  * You learned how to make a component accept input.
  * You learned to declare the required application directives in an Angular module. You
  listed the directives in the `NgModule` decorator's `declarations` array.
  * You learned to bind a parent component to a child component.

  Your app should look like this <live-example></live-example>.

.l-main-section
:marked
  ## The road ahead
  The Tour of Heroes app is more reusable with shared components, 
  but its (mock) data is still obtained within the `AppComponent`.
  That's not sustainable. 
  Data access should be refactored to a separate service
  and shared among the components that need data. 
  
  You’ll learn to create services in the [next tutorial](toh-pt4.html) page.
