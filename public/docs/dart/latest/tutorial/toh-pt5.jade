extends ../../../ts/_cache/tutorial/toh-pt5

block includes
  include ../_util-fns
  - var _appRoutingTsVsAppComp = 'AppComponent'
  - var _declsVsDirectives = 'directives'
  - var _RoutesVsAtRouteConfig = '@RouteConfig'
  - var _RouterModuleVsRouterDirectives = 'ROUTER_DIRECTIVES'
  - var _redirectTo = 'useAsDefault'

block intro-file-tree
  .filetree
    .file angular2_tour_of_heroes
    .children
      .file lib
      .children
        .file app_component.dart
        .file hero.dart
        .file hero_detail_component.dart
        .file hero_service.dart
        .file mock_heroes.dart
      .file web
      .children
        .file index.html
        .file main.dart
        .file styles.css
      .file pubspec.yaml

block keep-app-running
  :marked
    ### Keep the app compiling and running
    Open a terminal/console window.
    Start the Dart compiler, watch for changes, and start our server by entering the command:

  code-example(language="bash").
    pub serve

block app-comp-v1
  +makeExcerpt('lib/app_component_1.dart (v1)', '')

block router-config-intro
  :marked
    ### Make the router available

    Not all apps need routing, which is why the Angular *Component Router* is in a separate, optional module library.

    The Angular router is a combination of multiple services (`ROUTER_PROVIDERS`), multiple directives (`ROUTER_DIRECTIVES`),
    and a configuration annotation (`RouteConfig`). We'll get them all by importing the router library:

  +makeExcerpt('app/app.component.2.ts (router imports)', 'import-router')

  :marked
    Like for any service, we make router services
    available to the application by adding them to the `providers` list.
    Let's update the `directives` and `providers` metadata lists to *include* the router assets.

  +makeExcerpt('app/app.component.2.ts (directives and providers)', 'directives-and-providers')

  :marked
    Notice that we also removed the `HeroesComponent` from the `directives` list.
    `AppComponent` no longer shows heroes; that will be the router's job.
    We'll soon remove `<my-heroes>` from the template too.

    ### Add and configure the router

    The `AppComponent` doesn't have a router yet. We'll use the `@RouteConfig` annotation to simultaneously
    (a) assign a router to the component and (b) configure that router with *routes*.

block routerLink
  :marked
    Notice the `[routerLink]` binding in the anchor tag.
    We bind the `RouterLink` directive (another of the `ROUTER_DIRECTIVES`) to a list
    that tells the router where to navigate when the user clicks the link.

    We define a *routing instruction* with a *link parameters list*.
    The list only has one element in our little sample, the quoted ***name* of the route** to follow.
    Looking back at the route configuration, we confirm that `'Heroes'` is the name of the route to the `HeroesComponent`.
  .l-sub-section
    :marked
      Learn about the *link parameters list*
      in the [Routing](../guide/router.html#link-parameters-array) chapter.

block redirect-vs-use-as-default
  :marked
    We don't have a route for that path and we'd rather not create one.

    Fortunately we can add the `useAsDefault: true` property to the *route definition* and the
    router will display the dashboard when the browser URL doesn't match an existing route.

block route-params
  :marked
    We will no longer receive the hero in a parent component property binding.
    The new `HeroDetailComponent` should take the `id` parameter from the router's `RouteParams` service
    and use the `HeroService` to fetch the hero with that `id`.

    We need an import statement to reference the `RouteParams`.

block onInit
  :marked
    We use the `OnInit` interface from the already imported `angular2/core.dart` package because we'll
    call the `HeroService` inside the `ngOnInit` component lifecycle hook.

    We inject both the `RouteParams` service and the `HeroService` into the constructor as we've done before,
    making private variables for both:

block ngOnInit
  :marked
    Inside the `ngOnInit` lifecycle hook, extract the `id` parameter value from the `RouteParams` service
    and use the `HeroService` to fetch the hero with that `id`.

block extract-id
  :marked
    Notice how we extract the `id` by calling the `RouteParams.get` method.

block css-files
  +makeTabs(
    `toh-5/dart/lib/hero_detail_component.css,
    toh-5/dart/lib/dashboard_component.css`,
    null,
    `lib/hero_detail_component.css,
    lib/dashboard_component.css`)

block router-link-active
  :marked
    **The *router-link-active* class**

    The Angular Router adds the `router-link-active` class to the HTML navigation element
    whose route matches the active route. All we have to do is define the style for it. Sweet!

block file-tree-end
  .filetree
    .file angular2_tour_of_heroes
    .children
      .file lib
      .children
        .file app_component.css
        .file app_component.dart
        .file dashboard_component.css
        .file dashboard_component.dart
        .file dashboard_component.html
        .file hero.dart
        .file hero_detail_component.css
        .file hero_detail_component.dart
        .file hero_detail_component.html
        .file hero_service.dart
        .file heroes_component.css
        .file heroes_component.dart
        .file heroes_component.html
        .file mock_heroes.dart
      .file web
      .children
        .file index.html
        .file main.dart
        .file styles.css
      .file pubspec.yaml
