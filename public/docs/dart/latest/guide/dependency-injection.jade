include ../_util-fns

+includeShared('{ts}', 'intro')

:marked
  The complete source code for the example app in this chapter is
  [in GitHub](https://github.com/angular/angular.io/tree/master/public/docs/_examples/dependency-injection/dart).

+includeShared('{ts}', 'why-1')
+makeExample('dependency-injection/ts/app/car/car-no-di.ts', 'car', 'app/car/car.ts (without DI)')
+includeShared('{ts}', 'why-2')
+makeTabs(
  'dependency-injection/ts/app/car/car.ts, dependency-injection/ts/app/car/car-no-di.ts',
  'car-ctor, car-ctor',
  'app/car/car.ts (excerpt with DI), app/car/car.ts (excerpt without DI)')(format=".")
+includeShared('{ts}', 'why-3')
+includeShared('{ts}', 'why-3-1')
+includeShared('{ts}', 'why-3-2')
- var stylePattern = { otl: /(new Car.*$)/gm };
+makeExample('dependency-injection/ts/app/car/car-creations.ts', 'car-ctor-instantiation', '', stylePattern)(format=".")
+includeShared('{ts}', 'why-4')
.l-sub-section
  :marked
    The _consumer_ of `Car` has the problem. The consumer must update the car creation code to
    something like this:
  - var stylePattern = { otl: /(new Car.*$)/gm };
  +makeExample('dependency-injection/ts/app/car/car-creations.ts', 'car-ctor-instantiation-with-param', '', stylePattern)(format=".")
  :marked
    The critical point is this: `Car` itself did not have to change.
    We'll take care of the consumer's problem soon enough.
+includeShared('{ts}', 'why-6')
- var stylePattern = { otl: /(new Car.*$)/gm };
+makeExample('dependency-injection/ts/app/car/car-creations.ts', 'car-ctor-instantiation-with-mocks', '', stylePattern)(format=".")
+includeShared('{ts}', 'why-7')
+makeExample('dependency-injection/ts/app/car/car-factory.ts', null, 'app/car/car-factory.ts')
+includeShared('{ts}', 'why-8')
+makeExample('dependency-injection/ts/app/car/car-injector.ts','injector-call')(format=".")
+includeShared('{ts}', 'why-9')

+includeShared('{ts}', 'di-1')
+makeTabs(
  `dependency-injection/ts/app/heroes/heroes.component.1.ts,
  dependency-injection/ts/app/heroes/hero-list.component.1.ts,
  dependency-injection/ts/app/heroes/hero.ts,
  dependency-injection/ts/app/heroes/mock-heroes.ts`,
  'v1,,,',
  `app/heroes/heroes.component.ts,
  app/heroes/hero-list.component.ts,
  app/heroes/hero.ts,
  app/heroes/mock-heroes.ts`)
+includeShared('{ts}', 'di-2')
+includeShared('{ts}', 'di-3')
+makeExample('dependency-injection/ts/app/heroes/hero.service.1.ts',null, 'app/heroes/hero.service.ts' )
+includeShared('{ts}', 'di-4')
+includeShared('{ts}', 'di-5')
+includeShared('{ts}', 'di-6')
+includeShared('{ts}', 'di-configure-injector-1')
+makeExample('dependency-injection/ts/app/main.ts', 'bootstrap', 'app/main.ts (excerpt)')(format='.')
+includeShared('{ts}', 'di-configure-injector-2')
+makeExample('dependency-injection/ts/app/main.1.ts', 'bootstrap')(format='.')
+includeShared('{ts}', 'di-configure-injector-3')
+includeShared('{ts}', 'di-register-providers-1')
+makeExample('dependency-injection/ts/app/heroes/heroes.component.1.ts',null,'app/heroes/heroes.component.ts')
+includeShared('{ts}', 'di-register-providers-2')
+makeExample('dependency-injection/ts/app/heroes/heroes.component.1.ts','providers')(format='.')
+includeShared('{ts}', 'di-register-providers-3')
+includeShared('{ts}', 'di-prepare-for-injection-1')
+makeTabs(
  `dependency-injection/ts/app/heroes/hero-list.component.2.ts,
  dependency-injection/ts/app/heroes/hero-list.component.1.ts`,
  null,
  `app/heroes/hero-list.component (with DI),
   app/heroes/hero-list.component (without DI)`)
.l-sub-section
  :marked
    ### Focus on the constructor

    Adding a parameter to the constructor isn't all that's happening here.
  +makeExample('dependency-injection/ts/app/heroes/hero-list.component.2.ts', 'ctor')(format=".")
  +includeShared('{ts}', 'di-prepare-for-injection-2')
+includeShared('{ts}', 'di-create-injector-implicitly-1')
+makeExample('dependency-injection/ts/app/car/car-injector.ts','injector-create-and-call')(format=".")
+includeShared('{ts}', 'di-create-injector-implicitly-2')
+includeShared('{ts}', 'di-singleton-services')
+includeShared('{ts}', 'di-testing-component-1')
+makeExample('dependency-injection/ts/app/test.component.ts', 'spec')(format='.')
+includeShared('{ts}', 'di-testing-component-2')
+includeShared('{ts}', 'di-service-service-1')
+makeTabs(
  `dependency-injection/ts/app/heroes/hero.service.2.ts,
  dependency-injection/ts/app/heroes/hero.service.1.ts`,
  null,
  `app/heroes/hero.service (v.2),
  app/heroes/hero.service (v.1)`)
+includeShared('{ts}', 'di-service-service-2')
+includeShared('{ts}', 'di-injectable')

+includeShared('{ts}', 'logger-service-1')
+makeExample(
  'dependency-injection/ts/app/logger.service.ts',null, 'app/logger.service')
+includeShared('{ts}', 'logger-service-2')
+makeExample('dependency-injection/ts/app/providers.component.ts','providers-logger', 'app/app.component.ts (excerpt)')
+includeShared('{ts}', 'logger-service-3')
+includeShared('{ts}', 'logger-service-4')
+makeExample('dependency-injection/ts/app/providers.component.ts','import-optional')(format='.')
+includeShared('{ts}', 'logger-service-5')
+makeExample('dependency-injection/ts/app/providers.component.ts','provider-10-ctor')(format='.')
+includeShared('{ts}', 'logger-service-6')
+makeExample('dependency-injection/ts/app/providers.component.ts','provider-10-logger')(format='.')
+includeShared('{ts}', 'logger-service-7')

+includeShared('{ts}', 'providers-1')
+makeExample('dependency-injection/ts/app/providers.component.ts','providers-logger')
+includeShared('{ts}', 'providers-2')
+includeShared('{ts}', 'providers-provide-1')
+makeExample('dependency-injection/ts/app/providers.component.ts','providers-1')
+includeShared('{ts}', 'providers-provide-2')
+makeExample('dependency-injection/ts/app/providers.component.ts','providers-2')
+includeShared('{ts}', 'providers-provide-3')
+makeExample('dependency-injection/ts/app/providers.component.ts','providers-3')
+includeShared('{ts}', 'providers-provide-4')
+includeShared('{ts}', 'providers-alternative-1')
+makeExample('dependency-injection/ts/app/providers.component.ts','providers-4')
+includeShared('{ts}', 'providers-alternative-2')
+makeExample('dependency-injection/ts/app/providers.component.ts','EvenBetterLogger')
+includeShared('{ts}', 'providers-alternative-3')
+makeExample('dependency-injection/ts/app/providers.component.ts','providers-5')(format=".")
+includeShared('{ts}', 'providers-aliased-1')
+makeExample('dependency-injection/ts/app/providers.component.ts','providers-6a')(format=".")
+includeShared('{ts}', 'providers-aliased-2')
+makeExample('dependency-injection/ts/app/providers.component.ts','providers-6b')(format=".")
+includeShared('{ts}', 'providers-value-1')
+makeExample('dependency-injection/ts/app/providers.component.ts','silent-logger')(format=".")
+includeShared('{ts}', 'providers-value-2')
+makeExample('dependency-injection/ts/app/providers.component.ts','providers-7')(format=".")
+includeShared('{ts}', 'providers-factory-1')
+makeExample('dependency-injection/ts/app/heroes/hero.service.ts','internals', 'app/heroes/hero.service.ts (excerpt)')(format='.')
+includeShared('{ts}', 'providers-factory-2')
+makeExample('dependency-injection/ts/app/heroes/hero.service.provider.ts','factory', 'app/heroes/hero.service.provider.ts (excerpt)')(format='.')
+includeShared('{ts}', 'providers-factory-3')
+makeExample('dependency-injection/ts/app/heroes/hero.service.provider.ts','provider', 'app/heroes/hero.service.provider.ts (excerpt)')(format='.')
+includeShared('{ts}', 'providers-factory-4')
+includeShared('{ts}', 'providers-factory-5')
+makeTabs(
  `dependency-injection/ts/app/heroes/heroes.component.ts,
  dependency-injection/ts/app/heroes/heroes.component.1.ts`,
  null,
  `app/heroes/heroes.component (v.3),
  app/heroes/heroes.component (v.2)`)
+includeShared('{ts}', 'tokens-1')
+makeExample('dependency-injection/ts/app/injector.component.ts','get-hero-service')(format='.')
+includeShared('{ts}', 'tokens-2')
+makeExample('dependency-injection/ts/app/providers.component.ts','provider-8-ctor')(format=".")
+includeShared('{ts}', 'tokens-3')
+includeShared('{ts}', 'tokens-non-class-deps-1')
+makeExample('dependency-injection/ts/app/app.config.ts','config','app/app-config.ts (excerpt)')(format='.')
+includeShared('{ts}', 'tokens-non-class-deps-2')
+includeShared('{ts}', 'tokens-string-1')
+makeExample('dependency-injection/ts/app/providers.component.ts','providers-9a')(format=".")
+includeShared('{ts}', 'tokens-string-2')
+makeExample('dependency-injection/ts/app/providers.component.ts','provider-9a-ctor')(format=".")
+includeShared('{ts}', 'tokens-opaque-1')
+makeExample('dependency-injection/ts/app/app.config.ts','token')(format='.')
+includeShared('{ts}', 'tokens-opaque-2')
+makeExample('dependency-injection/ts/app/providers.component.ts','providers-9b')(format=".")
+makeExample('dependency-injection/ts/app/providers.component.ts','provider-9b-ctor')(format=".")
+includeShared('{ts}', 'tokens-opaque-3')
+makeExample('dependency-injection/ts/app/app.component.ts','providers', 'app/app.component.ts (providers)')(format=".")
+makeExample('dependency-injection/ts/app/app.component.ts','ctor', 'app/app.component.ts (constructor)')(format=".")
+includeShared('{ts}', 'tokens-opaque-4')

+includeShared('{ts}', 'summary')

+includeShared('{ts}', 'appendix-explicit-injector-1')
+makeExample('dependency-injection/ts/app/injector.component.ts', 'injector', 'app/injector.component.ts')
+includeShared('{ts}', 'appendix-explicit-injector-2')
