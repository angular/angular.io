include ../../../../_includes/_util-fns

<!-- http://plnkr.co/edit/8mNT1g -->

:marked
  ## Displaying Component Properties

  We typically display data in Angular by binding controls in an HTML template
  to properties of an Angular Component.

  In this chapter, we'll create a component with a list of heroes. Each hero has a name.
  We'll display the list of hero names and
  conditionally show a selected hero in a detail area below the list.
  Our UI looks like this:

figure.image-display
  img(src="/resources/images/devguide/displaying-data/final.png" alt="Final UI")

<a id="interpolation"></a>
.l-main-section
:marked
  ## Showing component properties with interpolation
  The easiest way to display a component property
  is to bind the property name through interpolation.
  With interpolation, we put the property name in the view template, enclosed in double curly braces: <code>{&zwnj;{myHero}}</code> .

  Let's build a small illustrative example together.

  Create a new project folder (`displaying-data`) and follow the steps in the [QuickStart](../quickstart.html).

  Then modify the `app.js` file by changing the templateUrl and the body of the component.
  When we're done, it should look like this:

+makeExample('displaying-data/js/src/app/app.1.js')

:marked
  We added two properties to the formerly empty component: `title` and `myHero`. Now we need to create the template
  that is referenced by the templateUrl.

  Create a new file called `app.html` and add the contents below. 
  Our template displays the two component properties using the double curly brace interpolation.

+makeExample('displaying-data/js/src/app/app.1.html')

:marked
  Angular automatically pulls the value of the `title` and `myHero` properties from the component and
  inserts those values into the browser. Angular will update the display
  when these properties change.
.l-sub-section
  :marked
    More precisely, the re-display occurs after some kind of asynchronous event related to
    the view such as a keystroke, a timer completion, or an asynch `XHR` response.
    We don't have those in this sample.
    But then the properties aren't changing on their own either. For the moment we must operate on faith.
:marked
  Notice that we haven't created an instance of the `AppComponent` component.
  Angular is creating an instance for us. How?

  Notice the CSS `selector` in the `Component` method that specifies an element named "my-app".
  Remember back in QuickStart that we added the `<my-app>` element to the body of our `index.html`
+makeExample('displaying-data/js/src/index.html', 'my-app')

:marked
  When we bootstrap with the `AppComponent` component (see the bottom of `app.js`), Angular looks for a `<my-app>`
  in the `index.html`, finds it, instantiates an instance of `AppComponent`, and renders it
  inside the `<my-app>` tag.

  ## Template inline or template file?

  We can store our component's template in one of two places.
  We can define it "inline" using the template property as a string.
  Or as we do here, we can define the template in a separate HTML file and link to it in
  the component metadata using the `Component` method's `templateUrl` property.

  We're using the external HTML style because it is difficult to write clean HTML in JavaScript inline.
  The choice between them is a matter of taste, circumstances, and organization policy.

  In either style, The template data bindings have the same access to the component's properties.

<a id="ngFor"></a>
.l-main-section
:marked
  ## Showing an array property with NgFor

  We want to display a list of heroes. We begin by adding a mock heroes name array to the component,
  just above `myHero` and redefine `myHero` to be the first name in the array.
+makeExample('displaying-data/js/src/app/app.2.js', 'mock-heroes')

:marked
  Now we use the Angular `NgFor` "repeater" Directive in the template to display
  each item in the `heroes` list.

+makeExample('displaying-data/js/src/app/app.2.html')

:marked
  Our presentation is the familiar HTML unordered list with `<ul>` and `<li>` tags. Let's focus on the `<li>` tag.
+makeExample('displaying-data/js/src/app/app.2.html', 'li-repeater')

:marked
  We added a somewhat mysterious `*ngFor` to the `<li>` element.
  That's the Angular "repeater" directive.
  It's presence on the `<li>` tag marks that `<li>` element (and its children) as the "repeater template".

.alert.is-important
  :marked
    Don't forget the leading asterisk (\*) in front of `*ngFor`. It is an essential part of the syntax.
    Learn more about this and `NgFor` in the [Template Syntax](./template-syntax.html#ngFor) chapter.

:marked
  Notice the `#hero` in the `NgFor` double-quoted instruction.
  The `#hero` is a "[template local variable](./template-syntax.html#local-vars")"  *declaration*.
  The (#) prefix declares a local variable name named `hero`.

  Angular will duplicate the `<li>` for each item in the list, setting the `hero` variable
  to the item (the hero) in the current iteration. Angular uses that variable as the
  context for the interpolation in the double curly braces.

.l-sub-section
  :marked
    We happened to give `NgFor` an array to display.
    In fact, `NgFor` can repeat items for any [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)
    object.

:marked
  The `NgFor` directive is always available, and does not need to be directly registered into the component.
  This is how the resulting list should appear.

figure.image-display
  img(src="/resources/images/devguide/displaying-data/hero-names-list.png" alt="After ngfor")

.l-main-section
:marked
  ## Creating a class for the data

  We are defining our data directly inside our component.
  That's fine for a demo but certainly isn't a best practice. It's not even a good practice.
  We won't do anything about that in this chapter.

  At the moment, we're binding to an array of strings. We do that occasionally in real applications but
  most of the time we're displaying objects, potentially instances of classes.

  Let's turn our array of hero names into an array of `Hero` objects. For that we'll need a `Hero' class.

  Create a new file called `hero.js` and add the following short snippet to it. You should also include a reference
  to it in the index.html so it will get loaded into the application.
+makeExample('displaying-data/js/src/app/hero.js')

:marked
  We've defined a constructor function, which is the closest thing to a class in ES5.
  When a "new" instance of the object is created, it accepts two arguments, `id` and `name`, and assigns them as properties.

.l-main-section
:marked
  ## Use the Hero class
  Let's redefine the heroes property in our component to return an array of these Heroes
  and also set the `myHero` property with the first of these mock heroes.
+makeExample('displaying-data/js/src/app/app.3.js', 'heroes')

:marked
  We'll have to update the template.
  At the moment it displays the entire hero object which used to be a string value.
  Let's fix that so we interpolate the `hero.name` property
+makeExample('displaying-data/js/src/app/app.3.html')

:marked
  Our display looks the same but we know how much better it is under the hood.

<a id="ngIf"></a>
.l-main-section
:marked
  ## Conditional display with NgIf

  Sometimes the app should display a view or a portion of a view only under prescribed circumstances.

  In our example, we'd like to display a message if we have a large number of heroes ... say more than 3.

  The Angular `NgIf` directive will insert or remove an element based on a truthy/falsey condition.
  We can see it in action by adding the following paragraph at the bottom of the template:
+makeExample('displaying-data/js/src/app/app.final.html', 'message')
.alert.is-important
  :marked
    Don't forget the leading asterisk (\*) in front of `*ngIf`. It is an essential part of the syntax.
    Learn more about this and `NgIf` in the [Template Syntax](./template-syntax.html#ngIf) chapter.

:marked
  The [template expression](./template-syntax.html#template-expressions) inside the double quotes
  looks much like JavaScript and it is much like JavaScript.
  When the component's list of heroes has more than 3 items, Angular adds the paragraph to the DOM and the message appears.
  If there were 3 or fewer items, Angular omits the paragraph and there is no message.

.alert.is-helpful
  :marked
    Angular isn't showing and hiding the message. It is adding and removing the paragraph element from the DOM.
    That hardly matters here. It would matter a great deal from a performance perspective if
    we were conditionally including or excluding a big chunk of HTML with many data bindings.

:marked
  As with the `NgFor`, the `NgIf` directive is already available for the component to use without registering it.

  Try it out. We have four items in the array so the message should appear.
  Delete one of the elements from the array, refresh the browser, and the message should no longer appear.

.l-main-section
:marked
  ## Summary
  Now we know how to
  - use **interpolation** with the double curly braces to display a component property,
  - use **`NgFor`** to display a list of items,
  - use a constructor function to shape the model data for our component and display properties of that model,
  - use **`NgIf`** to conditionally display a chunk of HTML based on a boolean expression.

  Our final code:

+makeTabs('displaying-data/js/src/app/app.final.js, '+
           'displaying-data/js/src/app/hero.js, ' +
           'displaying-data/js/src/app/app.final.html',
           'final,',
           'app/app.js, app/hero.js, app/app.html')

.l-main-section
:marked
  ## Next Steps
  In addition to displaying data, most applications need to respond to user input.
  Learn about that in the [User Input](./user-input.html) chapter.
