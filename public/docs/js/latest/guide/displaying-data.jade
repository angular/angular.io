p.
    Mission: You should be able to display data from both properties and lists from a componentâ€™s controller to the
    view.
.l-main-section
    h2#section-examples Examples:
    ul
     li
        a(href='http://plnkr.co/edit/pQojSb3CTfTEejX0wGjO?p=preview') TypeScript
     li
        a(href='http://plnkr.co/edit/GOJiWOEem9jrOyEeY3uW?p=preview') ES5
    p.
     Displaying data is job number one for any good application.  In Angular, you bind data to elements in HTML
     templates and Angular automatically updates the UI as data changes.
    p.
     Let's walk through how we'd display a property, a list of properties, and then conditionally show content
     based on state.
    p.
     We'll end up with a UI that looks like this:
    div(align='center')
      img(src='displaying-data-example1.png')

.l-main-section
    h2#section-create-an-entry-point Create an entry point

    p Open your favorite editor and create a show-properties.html file with the content:
    pre.prettyprint.linenums.lang-html
        code.
           //ES5
           <display></display>

    pre.prettyprint.linenums.lang-html
        code.
          //TypeScript
          <display></display>

    p
     | The <code>&lt;display&gt;</code> component here acts as the site where you'll insert your application.
     | We'll assume a structure like this for the rest of the examples here and just focus on the parts that
     | are different.

.l-main-section
    h2#section-showing-properties-with-interpolation Showing properties with interpolation
    p.text-body(ng-non-bindable)
     | The simple method for binding text into templates is through interpolation where you put the name of a property
     | inside <strong>{{ }}</strong>.

    p To see this working, create another file, show-properties.js, and add the following:

    pre.prettyprint.linenums.lang-javascript
        code.
          // ES5
          function DisplayComponent() {
            this.myName = "Alice";
          }
          DisplayComponent.annotations = [
            new angular.Component({
              selector: "display"
            }),
            new angular.View({
              template:
                 '<p>My name: {{ myName }}</p>',
              directives: [angular.For, angular.If]
            })
          ];

    pre.prettyprint.linenums.lang-typescript
        code.
            // TypeScript
            import {Component, View, bootstrap, For} from 'angular2/angular2';

            @Component({
             selector: 'display'
            })
            @View({
              template: `
               <p>My name: {{ myName }}</p>
             `,
             directives: [For]
            })
            class DisplayComponent {
             myName: string;
             todos: Array<string>;

             constructor() {
               this.myName = "Alice";
             }
            }
    p.
     You've just defined a component that encompases a view and controller for the app. The view
     defines a template:
    pre.prettyprint.lang-html
     code.
       <p>My name: {{ myName }}</p>

    p.
     Angular will automatically pull the value of <code>myName</code> and insert it into the browser and
     update it whenever it changes without work on your part.

    p.
     One thing to notice here is that though you've written your <code>DisplayComponent</code> class, you haven't
     called new to create one anywhere.  By associating your class with elements named 'display' in
     the DOM, Angular knows to automatically call new on <code>DisplayComponent</code> and bind its properties to
     that part of the template.

    p.
     When you're building templates, data bindings like these have access to the same scope of
     properties as your controller class does.  Here, your class is the <code>DisplayComponent</code> that has
     just one property, myName.

      .callout.is-helpful
        header A Very Helpful Title
        p.
         While you've used <code>template:</code> to specify an inline view, for larger templates you'd
         want to move them to a separate file and load them with <code>templateUrl:</code> instead.

    p So you can see Angular dynamically update content, add a line after
       pre.prettyprint.lang-html
        code.
         <p>My name: {{ myName }}</p>

    p to this:
       pre.prettyprint.lang-html
        code.
         <p>Current time: {{ time }}</p>
    p.
     Then give the <code>DisplayComponent</code> a starting value for time and a call to update time via <code>setInterval</code>.

    pre.prettyprint.lang-javascript
      code.
        setInterval(function () { this.time = (new Date()).toString(); }.bind(this), 1000);

    p Reload the page in your browser and you'll now see the seconds updating automatically.
