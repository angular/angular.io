
<!-- MOBILE -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-stay-current-portrait"></span>
  .c7
    h3.text-headline.text-uppercase  Mobile First
    p.text-body.
      Angular's modular library design and mobile-specific routing help keep
      your app's code lean, so users on low-bandwidth networks don't need to wait.
      Other mobile-first features include first-class support for touch event gestures,
      tuning for performance and low-memory usage on mobile platforms, and
      material design UI components with responsive, cross-device support.


<!-- TypeScript -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-fast-forward"></span>
  .c7
    h3.text-headline.text-uppercase  Future Ready
    p.text-body.
      Angular 2 is written in TypeScript, which is a superset of 
      ECMAScript 6 (ES6) with the addition of features including
      types and annotations. TypeScript allows Angular to benefit from the 
      best of JavaScript, while maintaining clean and easy-to-read code.


<!-- Coffee, Dart, ES6 -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-favorite"></span>
  .c7
    h3.text-headline.text-uppercase  Flexible Development
    p.text-body.
      The choice of language is up to you.
      In addition to providing full support for ES6 and TypeScript,
      Angular 2 works equally well with today's ES5, Dart, CoffeeScript,
      and other languages that compile to JavaScript.


<!-- Speed & Performance -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-av-timer"></span>
  .c7
    h3.text-headline.text-uppercase  Speed &amp; Performance
    p.text-body.
      Change detection is now 5x faster,
      thanks to tunings for modern JavaScript engines.
      If you use data structures that imply change guarantees
      (like immutables and observables), Angular 2 can use those guarantees
      to speed up your application.


<!-- Simplicity -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon is-small icon-embed2"></span>
  .c7
    h3.text-headline.text-uppercase  Simple &amp; Expressive
    p.text-body.
      Make your intention clear using natural, easy-to-write syntax.
      Reduce complexity for your team: new, structure-rich templates are
      readable and easy to understand at a glance.


<!-- Routing  -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-call-split"></span>
  .c7
    h3.text-headline.text-uppercase Comprehensive Routing
    p.text-body.
      Design sophisticated views:
      map URL paths to application components,
      and use advanced features like nested and sibling routes.
      Angular 2 supports card stack navigation, animated transitions, and
      lazy loading for mobile users.
      If you already use routing from a prior version of Angular,
      you can easily migrate to Angular 2 routing.


<!-- Animations  -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-flip"></span>
  .c7
    h3.text-headline.text-uppercase Animations
    p.text-body.
      Tap directly into low-level animation support on
      mobile and desktop environments with easy-to-use Angular events.
      You can use CSS, JavaScript, and the Web Animations API to
      intelligently handle changes to animations in response to user events.
      Plan complex animation flows by sequencing the behavior of
      an entire website on a timeline.


<!-- Dependency Injection  -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-now-widgets"></span>
  .c7
    h3.text-headline.text-uppercase Hierarchical Dependency Injection
    p.text-body.
      Angular 2 ships with powerful, yet simple-to-use dependency injection,
      allowing you to maintain modular applications without writing tedious glue code.
      Dependency injection helps you write tests
      by making it easy to inject test doubles.


<!-- Web Components -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-web"></span>
  .c7
    h3.text-headline.text-uppercase Support for Web Components
    p.text-body.
      Angular 2 plays nicely with web components built using other libraries
      (Polymer, X-Tag, and others), allowing you to pass data into them
      as easily as if they were written in Angular.
      Angular components use web standards
      (such as shadow DOM and the HTML5 template tag)
      in browsers that support them.


<!-- Internationalization & Accessibility -->
.grid-fluid.l-space-bottom-8
  .c3.text-center
    .sticker <span class="sticker-icon icon-accessibility"></span>
  .c7
    h3.text-headline.text-uppercase Internationalization (I18N) &amp; Accessibility
    p.text-body(ng-non-bindable).
      Reach all your users.
      Use the familiar ICU message format in Angular interpolation syntax
      (<b>{{  }}</b>), including pluralization and gender rules.
      Automate message extraction, pseudo-localization, and translation updates.
      Generate static applications for each locale.
      Easily promote accessibility via screen readers and assistive devices by automatically generating appropriate ARIA attributes.



!= partial("/_includes/_cta-bar")
